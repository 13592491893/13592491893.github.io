<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hy</title>
  
  <subtitle>Hyの博客</subtitle>
  <link href="https://13592491893.github.io/atom.xml" rel="self"/>
  
  <link href="https://13592491893.github.io/"/>
  <updated>2021-12-29T03:19:25.627Z</updated>
  <id>https://13592491893.github.io/</id>
  
  <author>
    <name>Hy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL优化</title>
    <link href="https://13592491893.github.io/posts/2c9a5c07.html"/>
    <id>https://13592491893.github.io/posts/2c9a5c07.html</id>
    <published>2021-12-28T16:00:00.000Z</published>
    <updated>2021-12-29T03:19:25.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-MySQL环境"><a href="#1-MySQL环境" class="headerlink" title="1.MySQL环境"></a>1.MySQL环境</h1><h2 id="1-1-环境安装"><a href="#1-1-环境安装" class="headerlink" title="1.1.环境安装"></a>1.1.环境安装</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 查看Linux服务器上是否安装过MySQLrpm -qa | grep -i mysql # 查询出所有mysql依赖包# 1、拉取镜像docker pull mysql:5.7# 2、创建实例并启动docker run -p 3306:3306 --name mysql \-v /root/mysql/log:/var/log/mysql \-v /root/mysql/data:/var/lib/mysql \-v /root/mysql/conf:/etc/mysql \-e MYSQL_ROOT_PASSWORD=333 \-d mysql:5.7# 3、mysql配置 /root/mysql/conf/my.conf[client]#mysqlde utf8字符集默认为3位的，不支持emoji表情及部分不常见的汉字，故推荐使用utf8mb4default-character-set=utf8[mysql]default-character-set=utf8[mysqld]#设置client连接mysql时的字符集,防止乱码init_connect='SET collation_connection = utf8_general_ci'init_connect='SET NAMES utf8'#数据库默认字符集character-set-server=utf8#数据库字符集对应一些排序等规则，注意要和character-set-server对应collation-server=utf8_general_ci# 跳过mysql程序起动时的字符参数设置 ，使用服务器端字符集设置skip-character-set-client-handshake# 禁止MySQL对外部连接进行DNS解析，使用这一选项可以消除MySQL进行DNS解析的时间。但需要注意，如果开启该选项，则所有远程主机连接授权都要使用IP地址方式，否则MySQL将无法正常处理连接请求！skip-name-resolve# 4、重启mysql容器docker restart mysql# 5、进入到mysql容器docker exec -it mysql /bin/bash# 6、查看修改的配置文件cat /etc/mysql/my.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-安装位置"><a href="#1-2-安装位置" class="headerlink" title="1.2.安装位置"></a>1.2.安装位置</h2><p><code>Docker</code>容器就是一个小型的<code>Linux</code>环境，进入到<code>MySQL</code>容器中。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker exec -it mysql /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>Linux</code>环境下<code>MySQL</code>的安装目录。</p><table><thead><tr><th>路径</th><th>解释</th></tr></thead><tbody><tr><td><code>/var/lib/mysql</code></td><td>MySQL数据库文件存放位置</td></tr><tr><td><code>/usr/share/mysql</code></td><td>错误消息和字符集文件配置</td></tr><tr><td><code>/usr/bin</code></td><td>客户端程序和脚本</td></tr><tr><td><code>/etc/init.d/mysql</code></td><td>启停脚本相关</td></tr></tbody></table><h2 id="1-3-修改字符集"><a href="#1-3-修改字符集" class="headerlink" title="1.3.修改字符集"></a>1.3.修改字符集</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 1、进入到mysql数据库并查看字符集# show variables like 'character%';# show variables like '%char%';mysql&gt; show variables like 'character%';+--------------------------+----------------------------+| Variable_name            | Value                      |+--------------------------+----------------------------+| character_set_client     | utf8                       || character_set_connection | utf8                       || character_set_database   | utf8                       || character_set_filesystem | binary                     || character_set_results    | utf8                       || character_set_server     | utf8                       || character_set_system     | utf8                       || character_sets_dir       | /usr/share/mysql/charsets/ |+--------------------------+----------------------------+8 rows in set (0.00 sec)mysql&gt; show variables like '%char%';+--------------------------+----------------------------+| Variable_name            | Value                      |+--------------------------+----------------------------+| character_set_client     | utf8                       || character_set_connection | utf8                       || character_set_database   | utf8                       || character_set_filesystem | binary                     || character_set_results    | utf8                       || character_set_server     | utf8                       || character_set_system     | utf8                       || character_sets_dir       | /usr/share/mysql/charsets/ |+--------------------------+----------------------------+8 rows in set (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>MySQL5.7</code>配置文件位置是<code>/etc/my.cnf</code>或者<code>/etc/mysql/my.cnf</code>，如果字符集不是<code>utf-8</code>直接进入配置文件修改即可。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[client]default-character-set=utf8[mysql]default-character-set=utf8[mysqld]# 设置client连接mysql时的字符集,防止乱码init_connect='SET NAMES utf8'init_connect='SET collation_connection = utf8_general_ci'# 数据库默认字符集character-set-server=utf8#数据库字符集对应一些排序等规则，注意要和character-set-server对应collation-server=utf8_general_ci# 跳过mysql程序起动时的字符参数设置 ，使用服务器端字符集设置skip-character-set-client-handshake# 禁止MySQL对外部连接进行DNS解析，使用这一选项可以消除MySQL进行DNS解析的时间。但需要注意，如果开启该选项，则所有远程主机连接授权都要使用IP地址方式，否则MySQL将无法正常处理连接请求！skip-name-resolve<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：安装<code>MySQL</code>完毕之后，第一件事就是修改字符集编码。</strong></p><h2 id="1-4-配置文件"><a href="#1-4-配置文件" class="headerlink" title="1.4.配置文件"></a>1.4.配置文件</h2><p><strong><code>MySQL</code>配置文件讲解：<a href="https://www.cnblogs.com/gaoyuechen/p/10273102.html">https://www.cnblogs.com/gaoyuechen/p/10273102.html</a></strong></p><p>1、二进制日志<code>log-bin</code>：主从复制。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># my,cnf# 开启mysql binlog功能log-bin=mysql-bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、错误日志<code>log-error</code>：默认是关闭的，记录严重的警告和错误信息，每次启动和关闭的详细信息等。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># my,cnf# 数据库错误日志文件log-error = error.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3、查询日志<code>log</code>：默认关闭，记录查询的<code>sql</code>语句，如果开启会降低<code>MySQL</code>整体的性能，因为记录日志需要消耗系统资源。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># my,cnf# 慢查询sql日志设置slow_query_log = 1slow_query_log_file = slow.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4、数据文件。</p><ul><li><code>frm文件</code>：存放表结构。</li><li><code>myd</code>文件：存放表数据。</li><li><code>myi</code>文件：存放表索引。</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># mysql5.7 使用.frm文件来存储表结构# 使用 .ibd文件来存储表索引和表数据-rw-r-----  1 mysql mysql   8988 Jun 25 09:31 pms_category.frm-rw-r-----  1 mysql mysql 245760 Jul 21 10:01 pms_category.ibd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>MySQL5.7</code>的<code>Innodb</code>存储引擎可将所有数据存放于<code>ibdata*</code>的共享表空间，也可将每张表存放于独立的<code>.ibd</code>文件的独立表空间。<br>共享表空间以及独立表空间都是针对数据的存储方式而言的。</p><ul><li>共享表空间: 某一个数据库的所有的表数据，索引文件全部放在一个文件中，默认这个共享表空间的文件路径在<code>data</code>目录下。 默认的文件名为<code>:ibdata1</code> 初始化为<code>10M</code>。</li><li>独立表空间: 每一个表都将会生成以独立的文件方式来进行存储，每一个表都有一个<code>.frm</code>表描述文件，还有一个<code>.ibd</code>文件。 其中这个文件包括了单独一个表的数据内容以及索引内容，默认情况下它的存储位置也是在表的位置之中。在配置文件<code>my.cnf</code>中设置： <code>innodb_file_per_table</code>。</li></ul><h1 id="2-MySQL逻辑架构"><a href="#2-MySQL逻辑架构" class="headerlink" title="2.MySQL逻辑架构"></a>2.MySQL逻辑架构</h1><p><img src="https://img-blog.csdn.net/20180831173911997?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pfcnlhbg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="MySQL逻辑架构"></p><ul><li><p><code>Connectors</code>：指的是不同语言中与SQL的交互。</p></li><li><p><code>Connection Pool</code>：管理缓冲用户连接，线程处理等需要缓存的需求。<strong>MySQL数据库的连接层。</strong></p></li><li><p><code> Management Serveices &amp; Utilities</code>：系统管理和控制工具。备份、安全、复制、集群等等。。</p></li><li><p><code>SQL Interface</code>：接受用户的SQL命令，并且返回用户需要查询的结果。</p></li><li><p><code>Parser</code>：SQL语句解析器。</p></li><li><p><code>Optimizer</code>：查询优化器，SQL语句在查询之前会使用查询优化器对查询进行优化。<strong>就是优化客户端请求query</strong>，根据客户端请求的 query 语句，和数据库中的一些统计信息，在一系列算法的基础上进行分析，得出一个最优的策略，告诉后面的程序如何取得这个 query 语句的结果。<strong>For Example</strong>： <code>select uid,name from user where gender = 1;</code>这个<code>select </code>查询先根据<code>where </code>语句进行选取，而不是先将表全部查询出来以后再进行<code>gender</code>过滤；然后根据<code>uid</code>和<code>name</code>进行属性投影，而不是将属性全部取出以后再进行过滤。最后将这两个查询条件联接起来生成最终查询结果。</p></li><li><p><code>Caches &amp; Buffers</code>：查询缓存。</p></li><li><p><code>Pluggable Storage Engines</code>：<strong>存储引擎接口。MySQL区别于其他数据库的最重要的特点就是其插件式的表存储引擎(注意：存储引擎是基于表的，而不是数据库)。</strong></p></li><li><p><code>File System</code>：数据落地到磁盘上，就是文件的存储。</p></li></ul><p>MySQL数据库和其他数据库相比，MySQL有点与众不同，主要体现在存储引擎的架构上，<strong>插件式的存储引擎架构将查询处理和其他的系统任务以及数据的存储提取相分离</strong>。这种架构可以根据业务的需求和实际需求选择合适的存储引擎。</p><blockquote><p>逻辑架构分层</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200801165252510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JyaW5nb18=,size_16,color_FFFFFF,t_70" alt="MySQL逻辑架构"></p><ul><li><p>连接层：最上层是一些客户端和连接服务，包含本地sock通信和大多数基于客户端/服务端工具实现的类似于<code>tcp/ip</code>的通信。主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于<code>SSL</code>的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</p></li><li><p>服务层：MySQL的核心服务功能层，该层是MySQL的核心，包括查询缓存，解析器，解析树，预处理器，查询优化器。主要进行查询解析、分析、查询缓存、内置函数、存储过程、触发器、视图等，select操作会先检查是否命中查询缓存，命中则直接返回缓存数据，否则解析查询并创建对应的解析树。</p></li><li><p>引擎层：存储引擎层，存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API与存储引擎进行通信。不同的存储引擎具有的功能不同，这样我们可以根据自己的实际需要进行选取。</p></li><li><p>存储层：数据存储层，主要是将数据存储在运行于裸设备的文件系统之上，并完成与存储引擎的交互。</p></li></ul><h1 id="3-存储引擎"><a href="#3-存储引擎" class="headerlink" title="3.存储引擎"></a>3.存储引擎</h1><p><code>show engines;</code>命令查看MySQL5.7支持的存储引擎。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysql&gt; show engines;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200801170442428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JyaW5nb18=,size_16,color_FFFFFF,t_70" alt="存储引擎"></p><p><code>show variables like 'default_storage_engine%';</code>查看当前数据库正在使用的存储引擎。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysql&gt; show variables like 'default_storage_engine%';+------------------------+--------+| Variable_name          | Value  |+------------------------+--------+| default_storage_engine | InnoDB |+------------------------+--------+1 row in set (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>InnoDB和MyISAM对比</p></blockquote><table><thead><tr><th align="left">对比项</th><th align="center">MyISAM</th><th align="center">InnoDB</th></tr></thead><tbody><tr><td align="left">主外键</td><td align="center">不支持</td><td align="center">支持</td></tr><tr><td align="left">事务</td><td align="center">不支持</td><td align="center">支持</td></tr><tr><td align="left">行表锁</td><td align="center">表锁，即使操作一条记录也会锁住整张表，<strong>不适合高并发操作</strong></td><td align="center">行锁，操作时只锁某一行，不对其他行有影响，<strong>适合高并发操作</strong></td></tr><tr><td align="left">缓存</td><td align="center">只缓存索引，不缓存真实数据</td><td align="center">不仅缓存索引还要缓存真实数据，対内存要求较高，而且内存大小対性能有决定性影响</td></tr><tr><td align="left">表空间</td><td align="center">小</td><td align="center">大</td></tr><tr><td align="left">关注点</td><td align="center">性能</td><td align="center">事务</td></tr><tr><td align="left">默认安装</td><td align="center">Y</td><td align="center">Y</td></tr></tbody></table><h1 id="4-SQL性能下降的原因"><a href="#4-SQL性能下降的原因" class="headerlink" title="4.SQL性能下降的原因"></a>4.SQL性能下降的原因</h1><ul><li>查询语句写的差。</li><li>索引失效：索引建了，但是没有用上。</li><li>关联 查询太多<code>join</code>（设计缺陷或者不得已的需求）。</li><li>服务器调优以及各个参数的设置（缓冲、线程数等）。</li></ul><h1 id="5-SQL执行顺序"><a href="#5-SQL执行顺序" class="headerlink" title="5.SQL执行顺序"></a>5.SQL执行顺序</h1><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">select              # 5... from                # 1... where               # 2.... group by            # 3... having              # 4... order by            # 6... limit               # 7[offset]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="6-七种JOIN理论"><a href="#6-七种JOIN理论" class="headerlink" title="6.七种JOIN理论"></a>6.七种JOIN理论</h1><p><img src="https://img-blog.csdnimg.cn/20200801212011559.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JyaW5nb18=,size_16,color_FFFFFF,t_70" alt="七种JOIN理论"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/* 1 */</span><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>select_list<span class="token operator">&gt;</span> <span class="token keyword">FROM</span> TableA A <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> TableB B <span class="token keyword">ON</span> A<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token keyword">Key</span><span class="token punctuation">;</span><span class="token comment">/* 2 */</span><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>select_list<span class="token operator">&gt;</span> <span class="token keyword">FROM</span> TableA A <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> TableB B <span class="token keyword">ON</span> A<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token keyword">Key</span><span class="token punctuation">;</span><span class="token comment">/* 3 */</span><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>select_list<span class="token operator">&gt;</span> <span class="token keyword">FROM</span> TableA A <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> TableB B <span class="token keyword">ON</span> A<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token keyword">Key</span><span class="token punctuation">;</span><span class="token comment">/* 4 */</span><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>select_list<span class="token operator">&gt;</span> <span class="token keyword">FROM</span> TableA A <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> TableB B <span class="token keyword">ON</span> A<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token keyword">WHERE</span> B<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token comment">/* 5 */</span><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>select_list<span class="token operator">&gt;</span> <span class="token keyword">FROM</span> TableA A <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> TableB B <span class="token keyword">ON</span> A<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token keyword">WHERE</span> A<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token comment">/* 6 */</span><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>select_list<span class="token operator">&gt;</span> <span class="token keyword">FROM</span> TableA A <span class="token keyword">FULL</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> TableB B <span class="token keyword">ON</span> A<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token keyword">Key</span><span class="token punctuation">;</span><span class="token comment">/* MySQL不支持FULL OUTER JOIN这种语法 可以改成 1+2 */</span><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>select_list<span class="token operator">&gt;</span> <span class="token keyword">FROM</span> TableA A <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> TableB B <span class="token keyword">ON</span> A<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token keyword">Key</span><span class="token keyword">UNION</span><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>select_list<span class="token operator">&gt;</span> <span class="token keyword">FROM</span> TableA A <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> TableB B <span class="token keyword">ON</span> A<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token keyword">Key</span><span class="token punctuation">;</span><span class="token comment">/* 7 */</span><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>select_list<span class="token operator">&gt;</span> <span class="token keyword">FROM</span> TableA A <span class="token keyword">FULL</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> TableB B <span class="token keyword">ON</span> A<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token keyword">WHERE</span> A<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">IS</span> <span class="token boolean">NULL</span> <span class="token operator">OR</span> B<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token comment">/* MySQL不支持FULL OUTER JOIN这种语法 可以改成 4+5 */</span><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>select_list<span class="token operator">&gt;</span> <span class="token keyword">FROM</span> TableA A <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> TableB B <span class="token keyword">ON</span> A<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token keyword">WHERE</span> B<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token keyword">UNION</span><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>select_list<span class="token operator">&gt;</span> <span class="token keyword">FROM</span> TableA A <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> TableB B <span class="token keyword">ON</span> A<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token keyword">WHERE</span> A<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-索引"><a href="#7-索引" class="headerlink" title="7.索引"></a>7.索引</h1><h2 id="7-1-索引简介"><a href="#7-1-索引简介" class="headerlink" title="7.1.索引简介"></a>7.1.索引简介</h2><blockquote><p>索引是什么？</p></blockquote><p>MySQL官方对索引的定义为：<strong>索引（INDEX）是帮助MySQL高效获取数据的数据结果。</strong></p><p>从而可以获得索引的本质：<strong>索引是排好序的快速查找数据结构。</strong></p><p>索引的目的在于提高查询效率，可以类比字典的目录。如果要查<code>mysql</code>这个这个单词，我们肯定要先定位到<code>m</code>字母，然后从上往下找<code>y</code>字母，再找剩下的<code>sql</code>。如果没有索引，那么可能需要<code>a---z</code>，这样全字典扫描，如果我想找<code>Java</code>开头的单词呢？如果我想找<code>Oracle</code>开头的单词呢？？？</p><p><strong>重点：索引会影响到MySQL查找(WHERE的查询条件)和排序(ORDER BY)两大功能！</strong></p><p><strong>除了数据本身之外，数据库还维护着一个满足特定查找算法的数据结构，这些数据结构以某种方式指向数据，这样就可以在这些数据结构的基础上实现高级查找算法，这种数据结构就是索引。</strong></p><p>一般来说，索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储在磁盘上。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># Linux下查看磁盘空间命令 df -h [root@Ringo ~]# df -hFilesystem      Size  Used Avail Use% Mounted on/dev/vda1        40G   16G   23G  41% /devtmpfs        911M     0  911M   0% /devtmpfs           920M     0  920M   0% /dev/shmtmpfs           920M  480K  920M   1% /runtmpfs           920M     0  920M   0% /sys/fs/cgroupoverlay          40G   16G   23G  41% <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们平时所说的索引，如果没有特别指明，都是指B树（多路搜索树，并不一定是二叉的）结构组织的索引。其中聚集索引，次要索引，覆盖索引，复合索引，前缀索引，唯一索引默认都是使用B+树索引，统称索引。当然，除了B+树这种数据结构的索引之外，还有哈希索引（Hash Index）等。</p><blockquote><p>索引的优势和劣势</p></blockquote><p>优势：</p><ul><li>查找：类似大学图书馆的书目索引，提高数据检索的效率，降低数据库的IO成本。</li><li>排序：通过索引対数据进行排序，降低数据排序的成本，降低了CPU的消耗。</li></ul><p>劣势：</p><ul><li>实际上索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录，所以索引列也是要占用空间的。</li><li>虽然索引大大提高了查询速度，但是同时会降低表的更新速度，例如对表频繁的进行<code>INSERT</code>、<code>UPDATE</code>和<code>DELETE</code>。因为更新表的时候，MySQL不仅要保存数据，还要保存一下索引文件每次更新添加的索引列的字段，都会调整因为更新所带来的键值变化后的索引信息。</li><li>索引只是提高效率的一个因素，如果MySQL有大数据量的表，就需要花时间研究建立最优秀的索引。</li></ul><h2 id="7-2-MySQL索引分类"><a href="#7-2-MySQL索引分类" class="headerlink" title="7.2.MySQL索引分类"></a>7.2.MySQL索引分类</h2><p>索引分类：</p><ul><li>单值索引：一个索引只包含单个列，一个表可以有多个单列索引。</li><li>唯一索引：索引列的值必须唯一，但是允许空值。</li><li>复合索引：一个索引包含多个字段。</li></ul><p><strong>建议：一张表建的索引最好不要超过5个！</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/* 基本语法 */</span><span class="token comment">/* 1、创建索引 [UNIQUE]可以省略*/</span><span class="token comment">/* 如果只写一个字段就是单值索引，写多个字段就是复合索引 */</span><span class="token keyword">CREATE</span> <span class="token punctuation">[</span><span class="token keyword">UNIQUE</span><span class="token punctuation">]</span> <span class="token keyword">INDEX</span> indexName <span class="token keyword">ON</span> tabName<span class="token punctuation">(</span>columnName<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 2、删除索引 */</span><span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> <span class="token punctuation">[</span>indexName<span class="token punctuation">]</span> <span class="token keyword">ON</span> tabName<span class="token punctuation">;</span><span class="token comment">/* 3、查看索引 */</span><span class="token comment">/* 加上\G就可以以列的形式查看了 不加\G就是以表的形式查看 */</span><span class="token keyword">SHOW</span> <span class="token keyword">INDEX</span> <span class="token keyword">FROM</span> tabName \G<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>ALTER</code>命令来为数据表添加索引</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/* 1、该语句添加一个主键，这意味着索引值必须是唯一的，并且不能为NULL */</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tabName <span class="token keyword">ADD</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>column_list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 2、该语句创建索引的键值必须是唯一的(除了NULL之外，NULL可能会出现多次) */</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tabName <span class="token keyword">ADD</span> <span class="token keyword">UNIQUE</span> indexName<span class="token punctuation">(</span>column_list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 3、该语句创建普通索引，索引值可以出现多次 */</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tabName <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> indexName<span class="token punctuation">(</span>column_list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 4、该语句指定了索引为FULLTEXT，用于全文检索 */</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tabName <span class="token keyword">ADD</span> FULLTEXT indexName<span class="token punctuation">(</span>column_list<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-3MySQL索引数据结构"><a href="#7-3MySQL索引数据结构" class="headerlink" title="7.3MySQL索引数据结构"></a>7.3MySQL索引数据结构</h2><p>索引数据结构：</p><ul><li><code>BTree</code>索引。</li><li><code>Hash</code>索引。</li><li><code>Full-text</code>全文索引。</li><li><code>R-Tree</code>索引。</li></ul><p><code>BTree</code>索引检索原理：</p><p><img src="https://img-blog.csdnimg.cn/20200801233134931.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JyaW5nb18=,size_16,color_FFFFFF,t_70" alt="BTree"></p><h2 id="7-4-哪些情况需要建索引"><a href="#7-4-哪些情况需要建索引" class="headerlink" title="7.4.哪些情况需要建索引"></a>7.4.哪些情况需要建索引</h2><ul><li>主键自动建立主键索引（唯一 + 非空）。</li><li>频繁作为查询条件的字段应该创建索引。</li><li>查询中与其他表关联的字段，外键关系建立索引。</li><li>查询中排序的字段，排序字段若通过索引去访问将大大提高排序速度。</li><li>查询中统计或者分组字段（group by也和索引有关）。</li></ul><h2 id="7-5-那些情况不要建索引"><a href="#7-5-那些情况不要建索引" class="headerlink" title="7.5.那些情况不要建索引"></a>7.5.那些情况不要建索引</h2><ul><li><p>记录太少的表。</p></li><li><p>经常增删改的表。</p></li><li><p>频繁更新的字段不适合创建索引。</p></li><li><p>Where条件里用不到的字段不创建索引。</p></li><li><p>假如一个表有10万行记录，有一个字段A只有true和false两种值，并且每个值的分布概率大约为50%，那么对A字段建索引一般不会提高数据库的查询速度。索引的选择性是指索引列中不同值的数目与表中记录数的比。如果一个表中有2000条记录，表索引列有1980个不同的值，那么这个索引的选择性就是1980/2000=0.99。一个索引的选择性越接近于1，这个索引的效率就越高。</p></li></ul><h1 id="8-性能分析"><a href="#8-性能分析" class="headerlink" title="8.性能分析"></a>8.性能分析</h1><h2 id="8-1-EXPLAIN简介"><a href="#8-1-EXPLAIN简介" class="headerlink" title="8.1.EXPLAIN简介"></a>8.1.EXPLAIN简介</h2><blockquote><p>EXPLAIN是什么？</p></blockquote><p>EXPLAIN：SQL的执行计划，使用EXPLAIN关键字可以模拟优化器执行SQL查询语句，从而知道MySQL是如何处理SQL语句的。</p><blockquote><p>EXPLAIN怎么使用？</p></blockquote><p>语法：<code>explain</code> + <code>SQL</code>。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysql&gt; explain select * from pms_category \G;*************************** 1. row ***************************           id: 1  select_type: SIMPLE        table: pms_category   partitions: NULL         type: ALLpossible_keys: NULL          key: NULL      key_len: NULL          ref: NULL         rows: 1425     filtered: 100.00        Extra: NULL1 row in set, 1 warning (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>EXPLAIN能干嘛？</p></blockquote><p>可以查看以下信息：</p><ul><li><code>id</code>：表的读取顺序。</li><li><code>select_type</code>：数据读取操作的操作类型。</li><li><code>possible_keys</code>：哪些索引可以使用。</li><li><code>key</code>：哪些索引被实际使用。</li><li><code>ref</code>：表之间的引用。</li><li><code>rows</code>：每张表有多少行被优化器查询。</li></ul><h2 id="8-2-EXPLAIN字段"><a href="#8-2-EXPLAIN字段" class="headerlink" title="8.2.EXPLAIN字段"></a>8.2.EXPLAIN字段</h2><blockquote><p>id</p></blockquote><p><code>id</code>：表的读取和加载顺序。</p><p>值有以下三种情况：</p><ul><li><code>id</code>相同，执行顺序由上至下。</li><li><code>id</code>不同，如果是子查询，id的序号会递增，<strong>id值越大优先级越高，越先被执行。</strong></li><li><code>id</code>相同不同，同时存在。<strong>永远是id大的优先级最高，id相等的时候顺序执行。</strong></li></ul><blockquote><p>select_type</p></blockquote><p><code>select_type</code>：数据查询的类型，主要是用于区别，普通查询、联合查询、子查询等的复杂查询。</p><ul><li><code>SIMPLE</code>：简单的<code>SELECT</code>查询，查询中不包含子查询或者<code>UNION </code>。</li><li><code>PRIMARY</code>：查询中如果包含任何复杂的子部分，最外层查询则被标记为<code>PRIMARY</code>。</li><li><code>SUBQUERY</code>：在<code>SELECT</code>或者<code>WHERE</code>子句中包含了子查询。</li><li><code>DERIVED</code>：在<code>FROM</code>子句中包含的子查询被标记为<code>DERIVED(衍生)</code>，MySQL会递归执行这些子查询，把结果放在临时表中。</li><li><code>UNION</code>：如果第二个<code>SELECT</code>出现在<code>UNION</code>之后，则被标记为<code>UNION</code>；若<code>UNION</code>包含在<code>FROM</code>子句的子查询中，外层<code>SELECT</code>将被标记为<code>DERIVED</code>。</li><li><code>UNION RESULT</code>：从<code>UNION</code>表获取结果的<code>SELECT</code>。</li></ul><blockquote><p>type</p></blockquote><p><code>type</code>：访问类型排列。</p><p><strong>从最好到最差依次是：</strong><code>system</code>&gt;<code>const</code>&gt;<code>eq_ref</code>&gt;<code>ref</code>&gt;<code>range</code>&gt;<code>index</code>&gt;<code>ALL</code>。除了<code>ALL</code>没有用到索引，其他级别都用到索引了。</p><p>一般来说，得保证查询至少达到<code>range</code>级别，最好达到<code>ref</code>。</p><ul><li><p><code>system</code>：表只有一行记录（等于系统表），这是<code>const</code>类型的特例，平时不会出现，这个也可以忽略不计。</p></li><li><p><code>const</code>：表示通过索引一次就找到了，<code>const</code>用于比较<code>primary key</code>或者<code>unique</code>索引。因为只匹配一行数据，所以很快。如将主键置于<code>where</code>列表中，MySQL就能将该查询转化为一个常量。</p></li><li><p><code>eq_ref</code>：唯一性索引扫描，读取本表中和关联表表中的每行组合成的一行，查出来只有一条记录。除 了 <code>system</code> 和<code> const</code> 类型之外, 这是最好的联接类型。</p></li><li><p><code>ref</code>：非唯一性索引扫描，返回本表和关联表某个值匹配的所有行，查出来有多条记录。</p></li><li><p><code>range</code>：只检索给定范围的行，一般就是在<code>WHERE</code>语句中出现了<code>BETWEEN</code>、<code>&lt; &gt;</code>、<code>in</code>等的查询。这种范围扫描索引比全表扫描要好，因为它只需要开始于索引树的某一点，而结束于另一点，不用扫描全部索引。</p></li><li><p><code>index</code>：<code>Full Index Scan</code>，全索引扫描，<code>index</code>和<code>ALL</code>的区别为<code>index</code>类型只遍历索引树。<strong>也就是说虽然<code>ALL</code>和<code>index</code>都是读全表，但是<code>index</code>是从索引中读的，<code>ALL</code>是从磁盘中读取的。</strong></p></li><li><p><code>ALL</code>：<code>Full Table Scan</code>，没有用到索引，全表扫描。</p></li></ul><blockquote><p>possible_keys 和 key</p></blockquote><p><code>possible_keys</code>：显示可能应用在这张表中的索引，一个或者多个。查询涉及到的字段上若存在索引，则该索引将被列出，<strong>但不一定被查询实际使用。</strong></p><p><code>key</code>：实际使用的索引。如果为<code>NULL</code>，则没有使用索引。查询中如果使用了覆盖索引，则该索引仅仅出现在<code>key</code>列表中。</p><blockquote><p>key_len</p></blockquote><p><code>key_len</code>：表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。<code>key_len</code>显示的值为索引字段的最大可能长度，并非实际使用长度，即<code>key_len</code>是根据表定义计算而得，不是通过表内检索出的。在不损失精度的情况下，长度越短越好。</p><p><code>key_len</code>计算规则：<strong><a href="https://blog.csdn.net/qq_34930488/article/details/102931490">https://blog.csdn.net/qq_34930488/article/details/102931490</a></strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysql&gt; desc pms_category;+---------------+------------+------+-----+---------+----------------+| Field         | Type       | Null | Key | Default | Extra          |+---------------+------------+------+-----+---------+----------------+| cat_id        | bigint(20) | NO   | PRI | NULL    | auto_increment || name          | char(50)   | YES  |     | NULL    |                || parent_cid    | bigint(20) | YES  |     | NULL    |                || cat_level     | int(11)    | YES  |     | NULL    |                || show_status   | tinyint(4) | YES  |     | NULL    |                || sort          | int(11)    | YES  |     | NULL    |                || icon          | char(255)  | YES  |     | NULL    |                || product_unit  | char(50)   | YES  |     | NULL    |                || product_count | int(11)    | YES  |     | NULL    |                |+---------------+------------+------+-----+---------+----------------+9 rows in set (0.00 sec)mysql&gt; explain select cat_id from pms_category where cat_id between 10 and 20 \G;*************************** 1. row ***************************           id: 1  select_type: SIMPLE        table: pms_category   partitions: NULL         type: rangepossible_keys: PRIMARY          key: PRIMARY  # 用到了主键索引，通过查看表结构知道，cat_id是bigint类型，占用8个字节      key_len: 8        # 这里只用到了cat_id主键索引，所以长度就是8！          ref: NULL         rows: 11     filtered: 100.00        Extra: Using where; Using index1 row in set, 1 warning (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>ref</p></blockquote><p><code>ref</code>：显示索引的哪一列被使用了，如果可能的话，是一个常数。哪些列或常量被用于查找索引列上的值。</p><blockquote><p>rows</p></blockquote><p><code>rows</code>：根据表统计信息及索引选用情况，大致估算出找到所需的记录需要读取的行数。</p><blockquote><p>Extra</p></blockquote><p><code>Extra</code>：包含不适合在其他列中显示但十分重要的额外信息。</p><ul><li><code>Using filesort</code>：说明MySQL会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取。<strong>MySQL中无法利用索引完成的排序操作成为”文件内排序”。</strong></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 排序没有使用索引mysql&gt; explain select name from pms_category where name='Tangs' order by cat_level \G*************************** 1. row ***************************           id: 1  select_type: SIMPLE        table: pms_category   partitions: NULL         type: refpossible_keys: idx_name_parentCid_catLevel          key: idx_name_parentCid_catLevel      key_len: 201          ref: const         rows: 1     filtered: 100.00        Extra: Using where; Using index; Using filesort1 row in set, 1 warning (0.00 sec)#~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~# 排序使用到了索引mysql&gt; explain select name from pms_category where name='Tangs' order by parent_cid,cat_level\G*************************** 1. row ***************************           id: 1  select_type: SIMPLE        table: pms_category   partitions: NULL         type: refpossible_keys: idx_name_parentCid_catLevel          key: idx_name_parentCid_catLevel      key_len: 201          ref: const         rows: 1     filtered: 100.00        Extra: Using where; Using index1 row in set, 1 warning (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>Using temporary</code>：使用了临时表保存中间结果，MySQL在対查询结果排序时使用了临时表。常见于排序<code>order by</code>和分组查询<code>group by</code>。<strong>临时表対系统性能损耗很大。</strong></p></li><li><p><code>Using index</code>：表示相应的<code>SELECT</code>操作中使用了覆盖索引，避免访问了表的数据行，效率不错！如果同时出现<code>Using where</code>，表示索引被用来执行索引键值的查找；如果没有同时出现<code>Using where</code>，表明索引用来读取数据而非执行查找动作。</p></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 覆盖索引# 就是select的数据列只用从索引中就能够取得，不必从数据表中读取，换句话说查询列要被所使用的索引覆盖。# 注意：如果要使用覆盖索引，一定不能写SELECT *，要写出具体的字段。mysql&gt; explain select cat_id from pms_category \G;*************************** 1. row ***************************           id: 1  select_type: SIMPLE        table: pms_category   partitions: NULL         type: indexpossible_keys: NULL                 key: PRIMARY      key_len: 8          ref: NULL         rows: 1425     filtered: 100.00        Extra: Using index   # select的数据列只用从索引中就能够取得，不必从数据表中读取   1 row in set, 1 warning (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>Using where</code>：表明使用了<code>WHERE</code>过滤。</li><li><code>Using join buffer</code>：使用了连接缓存。</li><li><code>impossible where</code>：<code>WHERE</code>子句的值总是false，不能用来获取任何元组。</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysql&gt; explain select name from pms_category where name = 'zs' and name = 'ls'\G*************************** 1. row ***************************           id: 1  select_type: SIMPLE        table: NULL   partitions: NULL         type: NULLpossible_keys: NULL          key: NULL      key_len: NULL          ref: NULL         rows: NULL     filtered: NULL        Extra: Impossible WHERE   # 不可能字段同时查到两个名字1 row in set, 1 warning (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="9-索引分析"><a href="#9-索引分析" class="headerlink" title="9.索引分析"></a>9.索引分析</h1><h2 id="9-1-单表索引分析"><a href="#9-1-单表索引分析" class="headerlink" title="9.1.单表索引分析"></a>9.1.单表索引分析</h2><blockquote><p>数据准备</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>article<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>article<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>author_id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'作者id'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>category_id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'分类id'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>views<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'被查看的次数'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>comments<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'回帖的备注'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>title<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'标题'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>content<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'正文内容'</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'文章'</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>article<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>author_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>category_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>views<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>comments<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>title<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>content<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>article<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>author_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>category_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>views<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>comments<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>title<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>content<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>article<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>author_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>category_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>views<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>comments<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>title<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>content<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>article<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>author_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>category_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>views<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>comments<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>title<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>content<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>article<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>author_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>category_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>views<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>comments<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>title<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>content<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>案例：查询<code>category_id</code>为1且<code>comments</code>大于1的情况下，<code>views</code>最多的<code>article_id</code>。</p></blockquote><p>1、编写SQL语句并查看SQL执行计划。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 1、sql语句SELECT id,author_id FROM article WHERE category_id = 1 AND comments &gt; 1 ORDER BY views DESC LIMIT 1;# 2、sql执行计划mysql&gt; EXPLAIN SELECT id,author_id FROM article WHERE category_id = 1 AND comments &gt; 1 ORDER BY views DESC LIMIT 1\G*************************** 1. row ***************************           id: 1  select_type: SIMPLE        table: article   partitions: NULL         type: ALLpossible_keys: NULL          key: NULL      key_len: NULL          ref: NULL         rows: 5     filtered: 20.00        Extra: Using where; Using filesort  # 产生了文件内排序，需要优化SQL1 row in set, 1 warning (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、创建索引<code>idx_article_ccv</code>。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_article_ccv <span class="token keyword">ON</span> article<span class="token punctuation">(</span>category_id<span class="token punctuation">,</span>comments<span class="token punctuation">,</span>views<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、查看当前索引。</p><p><img src="https://img-blog.csdnimg.cn/20200803134154162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JyaW5nb18=,size_16,color_FFFFFF,t_70" alt="show index"></p><p>4、查看现在SQL语句的执行计划。</p><p><img src="https://img-blog.csdnimg.cn/20200803134549914.png" alt="explain"></p><p>我们发现，创建符合索引<code>idx_article_ccv</code>之后，虽然解决了全表扫描的问题，但是在<code>order by</code>排序的时候没有用到索引，MySQL居然还是用的<code>Using filesort</code>，为什么？</p><p>5、我们试试把SQL修改为<code>SELECT id,author_id FROM article WHERE category_id = 1 AND comments = 1 ORDER BY views DESC LIMIT 1;</code>看看SQL的执行计划。</p><p><img src="https://img-blog.csdnimg.cn/20200803135228945.png" alt="explain"></p><p>推论：当<code>comments &gt; 1</code>的时候<code>order by</code>排序<code>views</code>字段索引就用不上，但是当<code>comments = 1</code>的时候<code>order by</code>排序<code>views</code>字段索引就可以用上！！！<strong>所以，范围之后的索引会失效。</strong></p><p>6、我们现在知道<strong>范围之后的索引会失效</strong>，原来的索引<code>idx_article_ccv</code>最后一个字段<code>views</code>会失效，那么我们如果删除这个索引，创建<code>idx_article_cv</code>索引呢？？？？</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/* 创建索引 idx_article_cv */</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_article_cv <span class="token keyword">ON</span> article<span class="token punctuation">(</span>category_id<span class="token punctuation">,</span>views<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看当前的索引</p><p><img src="https://img-blog.csdnimg.cn/20200803140542912.png" alt="show index"></p><p>7、当前索引是<code>idx_article_cv</code>，来看一下SQL执行计划。</p><p><img src="https://img-blog.csdnimg.cn/20200803140951803.png" alt="explain"></p><h2 id="9-2-两表索引分析"><a href="#9-2-两表索引分析" class="headerlink" title="9.2.两表索引分析"></a>9.2.两表索引分析</h2><blockquote><p>数据准备</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>class<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>book<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>class<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>card<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'分类'</span> <span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品类别'</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>book<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>bookid<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>card<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'分类'</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'书籍'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>两表连接查询的SQL执行计划</p></blockquote><p>1、不创建索引的情况下，SQL的执行计划。</p><p><img src="https://img-blog.csdnimg.cn/20200803143557187.png" alt="explain"></p><p><code>book</code>和<code>class</code>两张表都是没有使用索引，全表扫描，那么如果进行优化，索引是创建在<code>book</code>表还是创建在<code>class</code>表呢？下面进行大胆的尝试！</p><p>2、左表(<code>book</code>表)创建索引。</p><p>创建索引<code>idx_book_card</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/* 在book表创建索引 */</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_book_card <span class="token keyword">ON</span> book<span class="token punctuation">(</span>card<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在<code>book</code>表中有<code>idx_book_card</code>索引的情况下，查看SQL执行计划</p><p><img src="https://img-blog.csdnimg.cn/20200803144429349.png" alt="explain"></p><p>3、删除<code>book</code>表的索引，右表(<code>class</code>表)创建索引。</p><p>创建索引<code>idx_class_card</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/* 在class表创建索引 */</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_class_card <span class="token keyword">ON</span> class<span class="token punctuation">(</span>card<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在<code>class</code>表中有<code>idx_class_card</code>索引的情况下，查看SQL执行计划</p><p><img src="https://img-blog.csdnimg.cn/20200803145030597.png" alt="explain"></p><p><strong>由此可见，左连接将索引创建在右表上更合适，右连接将索引创建在左表上更合适。</strong></p><h2 id="9-3-三张表索引分析"><a href="#9-3-三张表索引分析" class="headerlink" title="9.3.三张表索引分析"></a>9.3.三张表索引分析</h2><blockquote><p>数据准备</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>phone<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>phone<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>phone_id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>card<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'分类'</span> <span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'手机'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>三表连接查询SQL优化</p></blockquote><p>1、不加任何索引，查看SQL执行计划。</p><p><img src="https://img-blog.csdnimg.cn/20200803160631786.png" alt="explain"></p><p>2、根据两表查询优化的经验，左连接需要在右表上添加索引，所以尝试在<code>book</code>表和<code>phone</code>表上添加索引。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/* 在book表创建索引 */</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_book_card <span class="token keyword">ON</span> book<span class="token punctuation">(</span>card<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 在phone表上创建索引 */</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_phone_card <span class="token keyword">ON</span> phone<span class="token punctuation">(</span>card<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次执行SQL的执行计划</p><p><img src="https://img-blog.csdnimg.cn/20200803161013880.png" alt="explain"></p><h2 id="9-4-结论"><a href="#9-4-结论" class="headerlink" title="9.4.结论"></a>9.4.结论</h2><p><code>JOIN</code>语句的优化：</p><ul><li>尽可能减少<code>JOIN</code>语句中的<code>NestedLoop</code>（嵌套循环）的总次数：<strong>永远都是小的结果集驱动大的结果集</strong>。</li><li>优先优化<code>NestedLoop</code>的内层循环。</li><li>保证<code>JOIN</code>语句中被驱动表上<code>JOIN</code>条件字段已经被索引。</li><li>当无法保证被驱动表的<code>JOIN</code>条件字段被索引且内存资源充足的前提下，不要太吝惜<code>Join Buffer</code> 的设置。</li></ul><h1 id="10-索引失效"><a href="#10-索引失效" class="headerlink" title="10.索引失效"></a>10.索引失效</h1><blockquote><p>数据准备</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'年龄'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>pos<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'职位'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>add_time<span class="token punctuation">`</span> <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'入职时间'</span><span class="token punctuation">)</span><span class="token keyword">COMMENT</span> <span class="token string">'员工记录表'</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>pos<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'Ringo'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'manager'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>pos<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'dev'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>pos<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">'dev'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 创建索引 */</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_staffs_name_age_pos <span class="token keyword">ON</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>pos<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-1-索引失效的情况"><a href="#10-1-索引失效的情况" class="headerlink" title="10.1.索引失效的情况"></a>10.1.索引失效的情况</h2><ul><li>全值匹配我最爱。</li><li>最佳左前缀法则。</li><li>不在索引列上做任何操作（计算、函数、(自动or手动)类型转换），会导致索引失效而转向全表扫描。</li><li>索引中范围条件右边的字段会全部失效。</li><li>尽量使用覆盖索引（只访问索引的查询，索引列和查询列一致），减少<code>SELECT *</code>。</li><li>MySQL在使用<code>!=</code>或者<code>&lt;&gt;</code>的时候无法使用索引会导致全表扫描。</li><li><code>is null</code>、<code>is not null</code>也无法使用索引。</li><li><code>like</code>以通配符开头<code>%abc</code>索引失效会变成全表扫描（使用覆盖索引就不会全表扫描了）。</li><li>字符串不加单引号索引失效。</li><li>少用<code>or</code>，用它来连接时会索引失效。</li></ul><h2 id="10-2-最佳左前缀法则"><a href="#10-2-最佳左前缀法则" class="headerlink" title="10.2.最佳左前缀法则"></a>10.2.最佳左前缀法则</h2><blockquote><p>案例</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/* 用到了idx_staffs_name_age_pos索引中的name字段 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'Ringo'</span><span class="token punctuation">;</span><span class="token comment">/* 用到了idx_staffs_name_age_pos索引中的name, age字段 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'Ringo'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token comment">/* 用到了idx_staffs_name_age_pos索引中的name，age，pos字段 这是属于全值匹配的情况！！！*/</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'Ringo'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token number">18</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>pos<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'manager'</span><span class="token punctuation">;</span><span class="token comment">/* 索引没用上，ALL全表扫描 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token number">18</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>pos<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'manager'</span><span class="token punctuation">;</span><span class="token comment">/* 索引没用上，ALL全表扫描 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>pos<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'manager'</span><span class="token punctuation">;</span><span class="token comment">/* 用到了idx_staffs_name_age_pos索引中的name字段，pos字段索引失效 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'Ringo'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>pos<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'manager'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>概念</p></blockquote><p><strong>最佳左前缀法则：如果索引是多字段的复合索引，要遵守最佳左前缀法则。指的是查询从索引的最左前列开始并且不跳过索引中的字段。</strong></p><p><strong>口诀：带头大哥不能死，中间兄弟不能断。</strong></p><h2 id="10-3-索引列上不计算"><a href="#10-3-索引列上不计算" class="headerlink" title="10.3.索引列上不计算"></a>10.3.索引列上不计算</h2><blockquote><p>案例</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 现在要查询`name` = 'Ringo'的记录下面有两种方式来查询！# 1、直接使用 字段 = 值的方式来计算mysql&gt; SELECT * FROM `staffs` WHERE `name` = 'Ringo';+----+-------+-----+---------+---------------------+| id | name  | age | pos     | add_time            |+----+-------+-----+---------+---------------------+|  1 | Ringo |  18 | manager | 2020-08-03 08:30:39 |+----+-------+-----+---------+---------------------+1 row in set (0.00 sec)# 2、使用MySQL内置的函数mysql&gt; SELECT * FROM `staffs` WHERE LEFT(`name`, 5) = 'Ringo';+----+-------+-----+---------+---------------------+| id | name  | age | pos     | add_time            |+----+-------+-----+---------+---------------------+|  1 | Ringo |  18 | manager | 2020-08-03 08:30:39 |+----+-------+-----+---------+---------------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们发现以上两条SQL的执行结果都是一样的，但是执行效率有没有差距呢？？？</p><p>通过分析两条SQL的执行计划来分析性能。</p><p><img src="https://img-blog.csdnimg.cn/20200803171857325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JyaW5nb18=,size_16,color_FFFFFF,t_70" alt="explain"></p><p><strong>由此可见，在索引列上进行计算，会使索引失效。</strong></p><p><strong>口诀：索引列上不计算。</strong></p><h2 id="10-4-范围之后全失效"><a href="#10-4-范围之后全失效" class="headerlink" title="10.4.范围之后全失效"></a>10.4.范围之后全失效</h2><blockquote><p>案例</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/* 用到了idx_staffs_name_age_pos索引中的name，age，pos字段 这是属于全值匹配的情况！！！*/</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'Ringo'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token number">18</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>pos<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'manager'</span><span class="token punctuation">;</span><span class="token comment">/* 用到了idx_staffs_name_age_pos索引中的name，age字段，pos字段索引失效 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'张三'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token operator">&gt;</span> <span class="token number">18</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>pos<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'dev'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看上述SQL的执行计划</p><p><img src="https://img-blog.csdnimg.cn/20200803173357787.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JyaW5nb18=,size_16,color_FFFFFF,t_70" alt="explain"></p><p><strong>由此可知，查询范围的字段使用到了索引，但是范围之后的索引字段会失效。</strong></p><p><strong>口诀：范围之后全失效。</strong></p><h2 id="10-5-覆盖索引尽量用"><a href="#10-5-覆盖索引尽量用" class="headerlink" title="10.5.覆盖索引尽量用"></a>10.5.覆盖索引尽量用</h2><p>在写SQL的不要使用<code>SELECT *</code>，用什么字段就查询什么字段。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/* 没有用到覆盖索引 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'Ringo'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token number">18</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>pos<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'manager'</span><span class="token punctuation">;</span><span class="token comment">/* 用到了覆盖索引 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>pos<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'Ringo'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token number">18</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>pos<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'manager'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200803213031893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JyaW5nb18=,size_16,color_FFFFFF,t_70" alt="使用覆盖索引"></p><p>**口诀：查询一定不用<code>*</code>**。</p><h2 id="10-6-不等有时会失效"><a href="#10-6-不等有时会失效" class="headerlink" title="10.6.不等有时会失效"></a>10.6.不等有时会失效</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/* 会使用到覆盖索引 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>pos<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">!=</span> <span class="token string">'Ringo'</span><span class="token punctuation">;</span><span class="token comment">/* 索引失效 全表扫描 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">!=</span> <span class="token string">'Ringo'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-7-like百分加右边"><a href="#10-7-like百分加右边" class="headerlink" title="10.7.like百分加右边"></a>10.7.like百分加右边</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/* 索引失效 全表扫描 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'%ing%'</span><span class="token punctuation">;</span><span class="token comment">/* 索引失效 全表扫描 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'%ing'</span><span class="token punctuation">;</span><span class="token comment">/* 使用索引范围查询 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'Rin%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>口诀：<code>like</code>百分加右边。</strong></p><p>如果一定要使用<code>%like</code>，而且还要保证索引不失效，那么使用覆盖索引来编写SQL。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/* 使用到了覆盖索引 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'%in%'</span><span class="token punctuation">;</span><span class="token comment">/* 使用到了覆盖索引 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'%in%'</span><span class="token punctuation">;</span><span class="token comment">/* 使用到了覆盖索引 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'%in%'</span><span class="token punctuation">;</span><span class="token comment">/* 使用到了覆盖索引 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token punctuation">`</span>pos<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'%in%'</span><span class="token punctuation">;</span><span class="token comment">/* 使用到了覆盖索引 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'%in%'</span><span class="token punctuation">;</span><span class="token comment">/* 使用到了覆盖索引 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'%in%'</span><span class="token punctuation">;</span><span class="token comment">/* 使用到了覆盖索引 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>pos<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'%in'</span><span class="token punctuation">;</span><span class="token comment">/* 使用到了覆盖索引 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>pos<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'%na'</span><span class="token punctuation">;</span><span class="token comment">/* 索引失效 全表扫描 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>pos<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>add_time<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'%in'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200803220743206.png" alt="模糊查询百分号一定加前边"></p><p><strong>口诀：覆盖索引保两边。</strong></p><h2 id="10-8-字符要加单引号"><a href="#10-8-字符要加单引号" class="headerlink" title="10.8.字符要加单引号"></a>10.8.字符要加单引号</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/* 使用到了覆盖索引 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'Ringo'</span><span class="token punctuation">;</span><span class="token comment">/* 使用到了覆盖索引 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span><span class="token comment">/* 索引失效 全表扫描 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里name = 2000在MySQL中会发生强制类型转换，将数字转成字符串。</p><p><strong>口诀：字符要加单引号。</strong></p><h2 id="10-9-索引相关题目"><a href="#10-9-索引相关题目" class="headerlink" title="10.9.索引相关题目"></a>10.9.索引相关题目</h2><p><strong>假设index(a,b,c)</strong></p><table><thead><tr><th>Where语句</th><th>索引是否被使用</th></tr></thead><tbody><tr><td>where a = 3</td><td>Y，使用到a</td></tr><tr><td>where a = 3 and b = 5</td><td>Y，使用到a，b</td></tr><tr><td>where a = 3 and b = 5</td><td>Y，使用到a，b，c</td></tr><tr><td>where b = 3 或者 where b = 3 and c = 4 或者 where c = 4</td><td>N，没有用到a字段</td></tr><tr><td>where a = 3 and c = 5</td><td>使用到a，但是没有用到c，因为b断了</td></tr><tr><td>where a = 3 and b &gt; 4 and c = 5</td><td>使用到a，b，但是没有用到c，因为c在范围之后</td></tr><tr><td>where a = 3 and b like ‘kk%’ and c = 4</td><td>Y，a，b，c都用到</td></tr><tr><td>where a = 3 and b like ‘%kk’ and c = 4</td><td>只用到a</td></tr><tr><td>where a = 3 and b like ‘%kk%’ and c = 4</td><td>只用到a</td></tr><tr><td>where a = 3 and b like ‘k%kk%’ and c = 4</td><td>Y，a，b，c都用到</td></tr></tbody></table><h2 id="10-10-面试题分析"><a href="#10-10-面试题分析" class="headerlink" title="10.10.面试题分析"></a>10.10.面试题分析</h2><blockquote><p>数据准备</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/* 创建表 */</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c1<span class="token punctuation">`</span> <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c2<span class="token punctuation">`</span> <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c3<span class="token punctuation">`</span> <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c4<span class="token punctuation">`</span> <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c5<span class="token punctuation">`</span> <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 插入数据 */</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>c1<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c2<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c3<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c4<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c5<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'a1'</span><span class="token punctuation">,</span><span class="token string">'a2'</span><span class="token punctuation">,</span><span class="token string">'a3'</span><span class="token punctuation">,</span><span class="token string">'a4'</span><span class="token punctuation">,</span><span class="token string">'a5'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>c1<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c2<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c3<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c4<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c5<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'b1'</span><span class="token punctuation">,</span><span class="token string">'b22'</span><span class="token punctuation">,</span><span class="token string">'b3'</span><span class="token punctuation">,</span><span class="token string">'b4'</span><span class="token punctuation">,</span><span class="token string">'b5'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>c1<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c2<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c3<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c4<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c5<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'c1'</span><span class="token punctuation">,</span><span class="token string">'c2'</span><span class="token punctuation">,</span><span class="token string">'c3'</span><span class="token punctuation">,</span><span class="token string">'c4'</span><span class="token punctuation">,</span><span class="token string">'c5'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>c1<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c2<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c3<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c4<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c5<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'d1'</span><span class="token punctuation">,</span><span class="token string">'d2'</span><span class="token punctuation">,</span><span class="token string">'d3'</span><span class="token punctuation">,</span><span class="token string">'d4'</span><span class="token punctuation">,</span><span class="token string">'d5'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>c1<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c2<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c3<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c4<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c5<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'e1'</span><span class="token punctuation">,</span><span class="token string">'e2'</span><span class="token punctuation">,</span><span class="token string">'e3'</span><span class="token punctuation">,</span><span class="token string">'e4'</span><span class="token punctuation">,</span><span class="token string">'e5'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 创建复合索引 */</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_test03_c1234 <span class="token keyword">ON</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>c1<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c2<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c3<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c4<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>题目</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/* 最好索引怎么创建的，就怎么用，按照顺序使用，避免让MySQL再自己去翻译一次 */</span><span class="token comment">/* 1.全值匹配 用到索引c1 c2 c3 c4全字段 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>c1<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a1'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>c2<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a2'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>c3<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a3'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>c4<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a4'</span><span class="token punctuation">;</span><span class="token comment">/* 2.用到索引c1 c2 c3 c4全字段 MySQL的查询优化器会优化SQL语句的顺序*/</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>c1<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a1'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>c2<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a2'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>c4<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a4'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>c3<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a3'</span><span class="token punctuation">;</span><span class="token comment">/* 3.用到索引c1 c2 c3 c4全字段 MySQL的查询优化器会优化SQL语句的顺序*/</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>c4<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a4'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>c3<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a3'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>c2<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a2'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>c1<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a1'</span><span class="token punctuation">;</span><span class="token comment">/* 4.用到索引c1 c2 c3字段，c4字段失效，范围之后全失效 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>c1<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a1'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>c2<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a2'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>c3<span class="token punctuation">`</span> <span class="token operator">&gt;</span> <span class="token string">'a3'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>c4<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a4'</span><span class="token punctuation">;</span><span class="token comment">/* 5.用到索引c1 c2 c3 c4全字段 MySQL的查询优化器会优化SQL语句的顺序*/</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>c1<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a1'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>c2<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a2'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>c4<span class="token punctuation">`</span> <span class="token operator">&gt;</span> <span class="token string">'a4'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>c3<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a3'</span><span class="token punctuation">;</span><span class="token comment">/*    6.用到了索引c1 c2 c3三个字段, c1和c2两个字段用于查找,  c3字段用于排序了但是没有统计到key_len中，c4字段失效*/</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>c1<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a1'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>c2<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a2'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>c4<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a4'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">`</span>c3<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment">/* 7.用到了索引c1 c2 c3三个字段，c1和c2两个字段用于查找, c3字段用于排序了但是没有统计到key_len中*/</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>c1<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a1'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>c2<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a2'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">`</span>c3<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment">/*    8.用到了索引c1 c2两个字段，c4失效，c1和c2两个字段用于查找，c4字段排序产生了Using filesort说明排序没有用到c4字段 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>c1<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a1'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>c2<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a2'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">`</span>c4<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment">/* 9.用到了索引c1 c2 c3三个字段，c1用于查找，c2和c3用于排序 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>c1<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a1'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>c5<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a5'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">`</span>c2<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>c3<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment">/* 10.用到了c1一个字段，c1用于查找，c3和c2两个字段索引失效，产生了Using filesort */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>c1<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a1'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>c5<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a5'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">`</span>c3<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>c2<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment">/* 11.用到了c1 c2 c3三个字段，c1 c2用于查找，c2 c3用于排序 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>c1<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a1'</span> <span class="token operator">AND</span>  <span class="token punctuation">`</span>c2<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a2'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> c2<span class="token punctuation">,</span> c3<span class="token punctuation">;</span><span class="token comment">/* 12.用到了c1 c2 c3三个字段，c1 c2用于查找，c2 c3用于排序 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>c1<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a1'</span> <span class="token operator">AND</span>  <span class="token punctuation">`</span>c2<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a2'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>c5<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a5'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> c2<span class="token punctuation">,</span> c3<span class="token punctuation">;</span><span class="token comment">/*    13.用到了c1 c2 c3三个字段，c1 c2用于查找，c2 c3用于排序 没有产生Using filesort       因为之前c2这个字段已经确定了是'a2'了，这是一个常量，再去ORDER BY c3,c2 这时候c2已经不用排序了！      所以没有产生Using filesort 和(10)进行对比学习！*/</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>c1<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a1'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>c2<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a2'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>c5<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a5'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> c3<span class="token punctuation">,</span> c2<span class="token punctuation">;</span><span class="token comment">/* GROUP BY 表面上是叫做分组，但是分组之前必定排序。 */</span><span class="token comment">/* 14.用到c1 c2 c3三个字段，c1用于查找，c2 c3用于排序，c4失效 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>c1<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a1'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>c4<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a4'</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token punctuation">`</span>c2<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c3<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment">/* 15.用到c1这一个字段，c4失效，c2和c3排序失效产生了Using filesort */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>c1<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a1'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>c4<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a4'</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token punctuation">`</span>c3<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>c2<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>GROUP BY</code>基本上都需要进行排序，索引优化几乎和<code>ORDER BY</code>一致，但是<code>GROUP BY</code>会有临时表的产生。</p><h2 id="10-11-总结"><a href="#10-11-总结" class="headerlink" title="10.11.总结"></a>10.11.总结</h2><p>索引优化的一般性建议：</p><ul><li>对于单值索引，尽量选择针对当前<code>query</code>过滤性更好的索引。</li><li>在选择复合索引的时候，当前<code>query</code>中过滤性最好的字段在索引字段顺序中，位置越靠前越好。</li><li>在选择复合索引的时候，尽量选择可以能够包含当前<code>query</code>中的<code>where</code>子句中更多字段的索引。</li><li>尽可能通过分析统计信息和调整<code>query</code>的写法来达到选择合适索引的目的。</li></ul><p>口诀：</p><ul><li>带头大哥不能死。</li><li>中间兄弟不能断。</li><li>索引列上不计算。</li><li>范围之后全失效。</li><li>覆盖索引尽量用。</li><li>不等有时会失效。</li><li>like百分加右边。</li><li>字符要加单引号。</li><li>一般SQL少用or。</li></ul><h1 id="11-分析慢SQL的步骤"><a href="#11-分析慢SQL的步骤" class="headerlink" title="11.分析慢SQL的步骤"></a>11.分析慢SQL的步骤</h1><p>分析：</p><p>1、观察，至少跑1天，看看生产的慢SQL情况。</p><p>2、开启慢查询日志，设置阈值，比如超过5秒钟的就是慢SQL，并将它抓取出来。</p><p>3、explain + 慢SQL分析。</p><p>4、show Profile。</p><p>5、运维经理 OR DBA，进行MySQL数据库服务器的参数调优。</p><p>总结（大纲）：</p><p>1、慢查询的开启并捕获。</p><p>2、explain + 慢SQL分析。</p><p>3、show Profile查询SQL在MySQL数据库中的执行细节和生命周期情况。</p><p>4、MySQL数据库服务器的参数调优。</p><h1 id="12-查询优化"><a href="#12-查询优化" class="headerlink" title="12.查询优化"></a>12.查询优化</h1><h2 id="12-1-小表驱动大表"><a href="#12-1-小表驱动大表" class="headerlink" title="12.1.小表驱动大表"></a>12.1.小表驱动大表</h2><blockquote><p>优化原则：对于MySQL数据库而言，永远都是小表驱动大表。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 举个例子：可以使用嵌套的for循环来理解小表驱动大表。* 以下两个循环结果都是一样的，但是对于MySQL来说不一样，* 第一种可以理解为，和MySQL建立5次连接每次查询1000次。* 第一种可以理解为，和MySQL建立1000次连接每次查询5次。*/</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>IN和EXISTS</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/* 优化原则：小表驱动大表，即小的数据集驱动大的数据集 */</span><span class="token comment">/* IN适合B表比A表数据小的情况*/</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>A<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>B<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token comment">/* EXISTS适合B表比A表数据大的情况 */</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>A<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>B<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>B<span class="token punctuation">`</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token punctuation">`</span>A<span class="token punctuation">`</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>EXISTS：</strong></p><ul><li>语法：<code>SELECT....FROM tab WHERE EXISTS(subquery);</code>该语法可以理解为：</li><li>该语法可以理解为：将主查询的数据，放到子查询中做条件验证，根据验证结果（<code>true</code>或是<code>false</code>）来决定主查询的数据结果是否得以保留。</li></ul><p><strong>提示：</strong></p><ul><li><code>EXISTS(subquery)</code>子查询只返回<code>true</code>或者<code>false</code>，因此子查询中的<code>SELECT *</code>可以是<code>SELECT 1 OR SELECT X</code>，它们并没有区别。</li><li><code>EXISTS(subquery)</code>子查询的实际执行过程可能经过了优化而不是我们理解上的逐条对比，如果担心效率问题，可进行实际检验以确定是否有效率问题。</li><li><code>EXISTS(subquery)</code>子查询往往也可以用条件表达式，其他子查询或者<code>JOIN</code>替代，何种最优需要具体问题具体分析。</li></ul><h2 id="12-2-ORDER-BY优化"><a href="#12-2-ORDER-BY优化" class="headerlink" title="12.2.ORDER BY优化"></a>12.2.ORDER BY优化</h2><blockquote><p>数据准备</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>talA<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">,</span><span class="token punctuation">`</span>birth<span class="token punctuation">`</span> <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>talA<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>talA<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>talA<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>talA<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>talA<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>talA<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>talA<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>talA<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 创建索引 */</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_talA_age_birth <span class="token keyword">ON</span> <span class="token punctuation">`</span>talA<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>birth<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>案例</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/* 1.使用索引进行排序了 不会产生Using filesort */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>talA<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token operator">&gt;</span> <span class="token number">20</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment">/* 2.使用索引进行排序了 不会产生Using filesort */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>talA<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token operator">&gt;</span> <span class="token number">20</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>birth<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment">/* 3.没有使用索引进行排序 产生了Using filesort */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>talA<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token operator">&gt;</span> <span class="token number">20</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">`</span>birth<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment">/* 4.没有使用索引进行排序 产生了Using filesort */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>talA<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token operator">&gt;</span> <span class="token number">20</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">`</span>birth<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment">/* 5.没有使用索引进行排序 产生了Using filesort */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>talA<span class="token punctuation">`</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">`</span>birth<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment">/* 6.没有使用索引进行排序 产生了Using filesort */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>talA<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>birth<span class="token punctuation">`</span> <span class="token operator">&gt;</span> <span class="token string">'2020-08-04 07:42:21'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">`</span>birth<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment">/* 7.使用索引进行排序了 不会产生Using filesort */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>talA<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>birth<span class="token punctuation">`</span> <span class="token operator">&gt;</span> <span class="token string">'2020-08-04 07:42:21'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment">/* 8.没有使用索引进行排序 产生了Using filesort */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>talA<span class="token punctuation">`</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token keyword">ASC</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>birth<span class="token punctuation">`</span> <span class="token keyword">DESC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ORDER BY</code>子句，尽量使用索引排序，避免使用<code>Using filesort</code>排序。</p><p>MySQL支持两种方式的排序，<code>FileSort</code>和<code>Index</code>，<code>Index</code>的效率高，它指MySQL扫描索引本身完成排序。<code>FileSort</code>方式效率较低。</p><p><code>ORDER BY</code>满足两情况，会使用<code>Index</code>方式排序：</p><ul><li><code>ORDER BY</code>语句使用索引最左前列。</li><li>使用<code>WHERE</code>子句与<code>ORDER BY</code>子句条件列组合满足索引最左前列。</li></ul><p><strong>结论：尽可能在索引列上完成排序操作，遵照索引建的最佳左前缀原则。</strong></p><blockquote><p>如果不在索引列上，File Sort有两种算法：MySQL就要启动双路排序算法和单路排序算法</p></blockquote><p>1、双路排序算法：MySQL4.1之前使用双路排序，字面意思就是两次扫描磁盘，最终得到数据，读取行指针和<code>ORDER BY</code>列，対他们进行排序，然后扫描已经排序好的列表，按照列表中的值重新从列表中读取对应的数据输出。<strong>一句话，从磁盘取排序字段，在<code>buffer</code>中进行排序，再从磁盘取其他字段。</strong></p><p>取一批数据，要对磁盘进行两次扫描，众所周知，IO是很耗时的，所以在MySQL4.1之后，出现了改进的算法，就是单路排序算法。</p><p>2、单路排序算法：从磁盘读取查询需要的所有列，按照<code>ORDER BY</code>列在<code>buffer</code>対它们进行排序，然后扫描排序后的列表进行输出，它的效率更快一些，避免了第二次读取数据。并且把随机IO变成了顺序IO，但是它会使用更多的空间，因为它把每一行都保存在内存中了。</p><p>由于单路排序算法是后出的，总体而言效率好过双路排序算法。</p><p>但是单路排序算法有问题：如果<code>SortBuffer</code>缓冲区太小，导致从磁盘中读取所有的列不能完全保存在<code>SortBuffer</code>缓冲区中，这时候单路复用算法就会出现问题，反而性能不如双路复用算法。</p><p><strong>单路复用算法的优化策略：</strong></p><ul><li>增大<code>sort_buffer_size</code>参数的设置。</li><li>增大<code>max_length_for_sort_data</code>参数的设置。</li></ul><p><strong>提高ORDER BY排序的速度：</strong></p><ul><li><p><code>ORDER BY</code>时使用<code>SELECT *</code>是大忌，查什么字段就写什么字段，这点非常重要。在这里的影响是：</p><ul><li>当查询的字段大小总和小于<code>max_length_for_sort_data</code>而且排序字段不是<code>TEXT|BLOB</code>类型时，会使用单路排序算法，否则使用多路排序算法。</li><li>两种排序算法的数据都有可能超出<code>sort_buffer</code>缓冲区的容量，超出之后，会创建<code>tmp</code>临时文件进行合并排序，导致多次IO，但是单路排序算法的风险会更大一些，所以要增大<code>sort_buffer_size</code>参数的设置。</li></ul></li><li><p>尝试提高<code>sort_buffer_size</code>：不管使用哪种算法，提高这个参数都会提高效率，当然，要根据系统的能力去提高，因为这个参数是针对每个进程的。</p></li><li><p>尝试提高<code>max_length_for_sort_data</code>：提高这个参数，会增加用单路排序算法的概率。但是如果设置的太高，数据总容量<code>sort_buffer_size</code>的概率就增大，明显症状是高的磁盘IO活动和低的处理器使用率。</p></li></ul><h2 id="12-3-GORUP-BY优化"><a href="#12-3-GORUP-BY优化" class="headerlink" title="12.3.GORUP BY优化"></a>12.3.GORUP BY优化</h2><ul><li><p><code>GROUP BY</code>实质是先排序后进行分组，遵照索引建的最佳左前缀。</p></li><li><p>当无法使用索引列时，会使用<code>Using filesort</code>进行排序，增大<code>max_length_for_sort_data</code>参数的设置和增大<code>sort_buffer_size</code>参数的设置，会提高性能。</p></li><li><p><code>WHERE</code>执行顺序高于<code>HAVING</code>，能写在<code>WHERE</code>限定条件里的就不要写在<code>HAVING</code>中了。</p></li></ul><h2 id="12-4-总结"><a href="#12-4-总结" class="headerlink" title="12.4.总结"></a>12.4.总结</h2><p><strong>为排序使用索引</strong></p><ul><li>MySQL两种排序方式：<code>Using filesort</code>和<code>Index</code>扫描有序索引排序。</li><li>MySQL能为排序与查询使用相同的索引，创建的索引既可以用于排序也可以用于查询。</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/* 创建a b c三个字段的索引 */</span>idx_table_a_b_c<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token comment">/* 1.ORDER BY 能使用索引最左前缀 */</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> a<span class="token punctuation">;</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> a <span class="token keyword">DESC</span><span class="token punctuation">,</span> b <span class="token keyword">DESC</span><span class="token punctuation">,</span> c <span class="token keyword">DESC</span><span class="token punctuation">;</span><span class="token comment">/* 2.如果WHERE子句中使用索引的最左前缀定义为常量，则ORDER BY能使用索引 */</span><span class="token keyword">WHERE</span> a <span class="token operator">=</span> <span class="token string">'Ringo'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span><span class="token keyword">WHERE</span> a <span class="token operator">=</span> <span class="token string">'Ringo'</span> <span class="token operator">AND</span> b <span class="token operator">=</span> <span class="token string">'Tangs'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> c<span class="token punctuation">;</span><span class="token keyword">WHERE</span> a <span class="token operator">=</span> <span class="token string">'Ringo'</span> <span class="token operator">AND</span> b <span class="token operator">&gt;</span> <span class="token number">2000</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span><span class="token comment">/* 3.不能使用索引进行排序 */</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> a <span class="token keyword">ASC</span><span class="token punctuation">,</span> b <span class="token keyword">DESC</span><span class="token punctuation">,</span> c <span class="token keyword">DESC</span><span class="token punctuation">;</span>  <span class="token comment">/* 排序不一致 */</span><span class="token keyword">WHERE</span> g <span class="token operator">=</span> const <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>   <span class="token comment">/* 丢失a字段索引 */</span><span class="token keyword">WHERE</span> a <span class="token operator">=</span> const <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> c<span class="token punctuation">;</span>      <span class="token comment">/* 丢失b字段索引 */</span><span class="token keyword">WHERE</span> a <span class="token operator">=</span> const <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> a<span class="token punctuation">,</span> d<span class="token punctuation">;</span>   <span class="token comment">/* d字段不是索引的一部分 */</span><span class="token keyword">WHERE</span> a <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>  <span class="token comment">/* 对于排序来说，多个相等条件(a=1 or a=2)也是范围查询 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="13-慢查询日志"><a href="#13-慢查询日志" class="headerlink" title="13.慢查询日志"></a>13.慢查询日志</h1><h2 id="13-1-基本介绍"><a href="#13-1-基本介绍" class="headerlink" title="13.1.基本介绍"></a>13.1.基本介绍</h2><blockquote><p>慢查询日志是什么？</p></blockquote><ul><li>MySQL的慢查询日志是MySQL提供的一种日志记录，它用来记录在MySQL中响应时间超过阈值的语句，具体指运行时间超过<code>long_query_time</code>值的SQL，则会被记录到慢查询日志中。</li><li><code>long_query_time</code>的默认值为10，意思是运行10秒以上的语句。</li><li>由慢查询日志来查看哪些SQL超出了我们的最大忍耐时间值，比如一条SQL执行超过5秒钟，我们就算慢SQL，希望能收集超过5秒钟的SQL，结合之前<code>explain</code>进行全面分析。</li></ul><blockquote><p>特别说明</p></blockquote><p><strong>默认情况下，MySQL数据库没有开启慢查询日志，</strong>需要我们手动来设置这个参数。</p><p><strong>当然，如果不是调优需要的话，一般不建议启动该参数</strong>，因为开启慢查询日志会或多或少带来一定的性能影响。慢查询日志支持将日志记录写入文件。</p><blockquote><p>查看慢查询日志是否开以及如何开启</p></blockquote><ul><li><p>查看慢查询日志是否开启：<code>SHOW VARIABLES LIKE '%slow_query_log%';</code>。</p></li><li><p>开启慢查询日志：<code>SET GLOBAL slow_query_log = 1;</code>。<strong>使用该方法开启MySQL的慢查询日志只对当前数据库生效，如果MySQL重启后会失效。</strong></p></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 1、查看慢查询日志是否开启mysql&gt; SHOW VARIABLES LIKE '%slow_query_log%';+---------------------+--------------------------------------+| Variable_name       | Value                                |+---------------------+--------------------------------------+| slow_query_log      | OFF                                  || slow_query_log_file | /var/lib/mysql/1dcb5644392c-slow.log |+---------------------+--------------------------------------+2 rows in set (0.01 sec)# 2、开启慢查询日志mysql&gt; SET GLOBAL slow_query_log = 1;Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要使慢查询日志永久开启，需要修改<code>my.cnf</code>文件，在<code>[mysqld]</code>下增加修改参数。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># my.cnf[mysqld]# 1.这个是开启慢查询。注意ON需要大写slow_query_log=ON  # 2.这个是存储慢查询的日志文件。这个文件不存在的话，需要自己创建slow_query_log_file=/var/lib/mysql/slow.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>开启了慢查询日志后，什么样的SQL才会被记录到慢查询日志里面呢？</p></blockquote><p>这个是由参数<code>long_query_time</code>控制的，默认情况下<code>long_query_time</code>的值为10秒。</p><p>MySQL中查看<code>long_query_time</code>的时间：<code>SHOW VARIABLES LIKE 'long_query_time%';</code>。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 查看long_query_time 默认是10秒# 只有SQL的执行时间&gt;10才会被记录mysql&gt; SHOW VARIABLES LIKE 'long_query_time%';+-----------------+-----------+| Variable_name   | Value     |+-----------------+-----------+| long_query_time | 10.000000 |+-----------------+-----------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改<code>long_query_time</code>的时间，需要在<code>my.cnf</code>修改配置文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[mysqld]# 这个是设置慢查询的时间，我设置的为1秒long_query_time=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查新慢查询日志的总记录条数：<code>SHOW GLOBAL STATUS LIKE '%Slow_queries%';</code>。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysql&gt; SHOW GLOBAL STATUS LIKE '%Slow_queries%';+---------------+-------+| Variable_name | Value |+---------------+-------+| Slow_queries  | 3     |+---------------+-------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-2-日志分析工具"><a href="#13-2-日志分析工具" class="headerlink" title="13.2.日志分析工具"></a>13.2.日志分析工具</h2><p>日志分析工具<code>mysqldumpslow</code>：在生产环境中，如果要手工分析日志，查找、分析SQL，显然是个体力活，MySQL提供了日志分析工具<code>mysqldumpslow</code>。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 1、mysqldumpslow --help 来查看mysqldumpslow的帮助信息root@1dcb5644392c:/usr/bin# mysqldumpslow --helpUsage: mysqldumpslow [ OPTS... ] [ LOGS... ]Parse and summarize the MySQL slow query log. Options are  --verbose    verbose  --debug      debug  --help       write this text to standard output  -v           verbose  -d           debug  -s ORDER     what to sort by (al, at, ar, c, l, r, t), 'at' is default  # 按照何种方式排序                al: average lock time # 平均锁定时间                ar: average rows sent # 平均返回记录数                at: average query time # 平均查询时间                 c: count  # 访问次数                 l: lock time  # 锁定时间                 r: rows sent  # 返回记录                 t: query time  # 查询时间   -r           reverse the sort order (largest last instead of first)  -t NUM       just show the top n queries  # 返回前面多少条记录  -a           don't abstract all numbers to N and strings to 'S'  -n NUM       abstract numbers with at least n digits within names  -g PATTERN   grep: only consider stmts that include this string    -h HOSTNAME  hostname of db server for *-slow.log filename (can be wildcard),               default is '*', i.e. match all  -i NAME      name of server instance (if using mysql.server startup script)  -l           don't subtract lock time from total time  # 2、 案例# 2.1、得到返回记录集最多的10个SQLmysqldumpslow -s r -t 10 /var/lib/mysql/slow.log # 2.2、得到访问次数最多的10个SQLmysqldumpslow -s c -t 10 /var/lib/mysql/slow.log # 2.3、得到按照时间排序的前10条里面含有左连接的查询语句mysqldumpslow -s t -t 10 -g "left join" /var/lib/mysql/slow.log# 2.4、另外建议使用这些命令时结合|和more使用，否则出现爆屏的情况mysqldumpslow -s r -t 10 /var/lib/mysql/slow.log | more<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="14-批量插入数据脚本"><a href="#14-批量插入数据脚本" class="headerlink" title="14.批量插入数据脚本"></a>14.批量插入数据脚本</h1><h2 id="14-1-环境准备"><a href="#14-1-环境准备" class="headerlink" title="14.1.环境准备"></a>14.1.环境准备</h2><blockquote><p>1、建表SQL。</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/* 1.dept表 */CREATE TABLE `dept` (  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键',  `deptno` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '部门id',  `dname` varchar(20) NOT NULL DEFAULT '' COMMENT '部门名字',  `loc` varchar(13) NOT NULL DEFAULT '' COMMENT '部门地址',  PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='部门表'/* 2.emp表 */CREATE TABLE `emp` (  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键',  `empno` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '员工编号',  `ename` varchar(20) NOT NULL DEFAULT '' COMMENT '员工名字',  `job` varchar(9) NOT NULL DEFAULT '' COMMENT '职位',  `mgr` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '上级编号',  `hiredata` date NOT NULL COMMENT '入职时间',  `sal` decimal(7,2) NOT NULL COMMENT '薪水',  `comm` decimal(7,2) NOT NULL COMMENT '分红',  `deptno` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '部门id',  PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='员工表'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>2、由于开启过慢查询日志，开启了<code>bin-log</code>，我们就必须为<code>function</code>指定一个参数，否则使用函数会报错。</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 在mysql中设置 # log_bin_trust_function_creators 默认是关闭的 需要手动开启mysql&gt; SHOW VARIABLES LIKE 'log_bin_trust_function_creators';+---------------------------------+-------+| Variable_name                   | Value |+---------------------------------+-------+| log_bin_trust_function_creators | OFF   |+---------------------------------+-------+1 row in set (0.00 sec)mysql&gt; SET GLOBAL log_bin_trust_function_creators=1;Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述修改方式MySQL重启后会失败，在<code>my.cnf</code>配置文件下修改永久有效。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[mysqld]log_bin_trust_function_creators=ON<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="14-2-创建函数"><a href="#14-2-创建函数" class="headerlink" title="14.2.创建函数"></a>14.2.创建函数</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 1、函数：随机产生字符串DELIMITER $$CREATE FUNCTION rand_string(n INT) RETURNS VARCHAR(255)BEGIN    DECLARE chars_str VARCHAR(100) DEFAULT 'abcdefghijklmnopqrstuvwsyzABCDEFGHIJKLMNOPQRSTUVWXYZ';    DECLARE return_str VARCHAR(255) DEFAULT '';    DECLARE i INT DEFAULT 0;    WHILE i &lt; n DO    SET return_str = CONCAT(return_str,SUBSTRING(chars_str,FLOOR(1+RAND()*52),1));    SET i = i + 1;    END WHILE;    RETURN return_str;END $$# 2、函数：随机产生部门编号DELIMITER $$CREATE FUNCTION rand_num() RETURNS INT(5)BEGIN    DECLARE i INT DEFAULT 0;    SET i = FLOOR(100 + RAND() * 10);    RETURN i;END $$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-3-创建存储过程"><a href="#14-3-创建存储过程" class="headerlink" title="14.3.创建存储过程"></a>14.3.创建存储过程</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 1、函数：向dept表批量插入DELIMITER $$CREATE PROCEDURE insert_dept(IN START INT(10),IN max_num INT(10))BEGINDECLARE i INT DEFAULT 0;    SET autocommit = 0;    REPEAT    SET i = i + 1;    INSERT INTO dept(deptno,dname,loc) VALUES((START + i),rand_string(10),rand_string(8));    UNTIL i = max_num    END REPEAT;    COMMIT;END $$# 2、函数：向emp表批量插入DELIMITER $$CREATE PROCEDURE insert_emp(IN START INT(10),IN max_num INT(10))BEGINDECLARE i INT DEFAULT 0;    SET autocommit = 0;    REPEAT    SET i = i + 1;    INSERT INTO emp(empno,ename,job,mgr,hiredata,sal,comm,deptno) VALUES((START + i),rand_string(6),'SALESMAN',0001,CURDATE(),2000,400,rand_num());    UNTIL i = max_num    END REPEAT;    COMMIT;END $$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-4-调用存储过程"><a href="#14-4-调用存储过程" class="headerlink" title="14.4.调用存储过程"></a>14.4.调用存储过程</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 1、调用存储过程向dept表插入10个部门。DELIMITER ;CALL insert_dept(100,10);# 2、调用存储过程向emp表插入50万条数据。DELIMITER ;CALL insert_emp(100001,500000);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="15-Show-Profile"><a href="#15-Show-Profile" class="headerlink" title="15.Show Profile"></a>15.Show Profile</h1><blockquote><p>Show Profile是什么？</p></blockquote><p><code>Show Profile</code>：MySQL提供可以用来分析当前会话中语句执行的资源消耗情况。可以用于SQL的调优的测量。<strong>默认情况下，参数处于关闭状态，并保存最近15次的运行结果。</strong></p><blockquote><p>分析步骤</p></blockquote><p>1、是否支持，看看当前的MySQL版本是否支持。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 查看Show Profile功能是否开启mysql&gt; SHOW VARIABLES LIKE 'profiling';+---------------+-------+| Variable_name | Value |+---------------+-------+| profiling     | OFF   |+---------------+-------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、开启<code>Show Profile</code>功能，默认是关闭的，使用前需要开启。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 开启Show Profile功能mysql&gt; SET profiling=ON;Query OK, 0 rows affected, 1 warning (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3、运行SQL</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM `emp` GROUP BY `id`%10 LIMIT 150000;SELECT * FROM `emp` GROUP BY `id`%20 ORDER BY 5;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4、查看结果，执行<code>SHOW PROFILES;</code></p><p><code>Duration</code>：持续时间。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysql&gt; SHOW PROFILES;+----------+------------+---------------------------------------------------+| Query_ID | Duration   | Query                                             |+----------+------------+---------------------------------------------------+|        1 | 0.00156100 | SHOW VARIABLES LIKE 'profiling'                   ||        2 | 0.56296725 | SELECT * FROM `emp` GROUP BY `id`%10 LIMIT 150000 ||        3 | 0.52105825 | SELECT * FROM `emp` GROUP BY `id`%10 LIMIT 150000 ||        4 | 0.51279775 | SELECT * FROM `emp` GROUP BY `id`%20 ORDER BY 5   |+----------+------------+---------------------------------------------------+4 rows in set, 1 warning (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、诊断SQL，<code>SHOW PROFILE cpu,block io FOR QUERY Query_ID;</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 这里的3是第四步中的Query_ID。# 可以在SHOW PROFILE中看到一条SQL中完整的生命周期。mysql&gt; SHOW PROFILE cpu,block io FOR QUERY 3;+----------------------+----------+----------+------------+--------------+---------------+| Status               | Duration | CPU_user | CPU_system | Block_ops_in | Block_ops_out |+----------------------+----------+----------+------------+--------------+---------------+| starting             | 0.000097 | 0.000090 |   0.000002 |            0 |             0 || checking permissions | 0.000010 | 0.000009 |   0.000000 |            0 |             0 || Opening tables       | 0.000039 | 0.000058 |   0.000000 |            0 |             0 || init                 | 0.000046 | 0.000046 |   0.000000 |            0 |             0 || System lock          | 0.000011 | 0.000000 |   0.000000 |            0 |             0 || optimizing           | 0.000005 | 0.000000 |   0.000000 |            0 |             0 || statistics           | 0.000023 | 0.000037 |   0.000000 |            0 |             0 || preparing            | 0.000014 | 0.000000 |   0.000000 |            0 |             0 || Creating tmp table   | 0.000041 | 0.000053 |   0.000000 |            0 |             0 || Sorting result       | 0.000005 | 0.000000 |   0.000000 |            0 |             0 || executing            | 0.000003 | 0.000000 |   0.000000 |            0 |             0 || Sending data         | 0.520620 | 0.516267 |   0.000000 |            0 |             0 || Creating sort index  | 0.000060 | 0.000051 |   0.000000 |            0 |             0 || end                  | 0.000006 | 0.000000 |   0.000000 |            0 |             0 || query end            | 0.000011 | 0.000000 |   0.000000 |            0 |             0 || removing tmp table   | 0.000006 | 0.000000 |   0.000000 |            0 |             0 || query end            | 0.000004 | 0.000000 |   0.000000 |            0 |             0 || closing tables       | 0.000009 | 0.000000 |   0.000000 |            0 |             0 || freeing items        | 0.000032 | 0.000064 |   0.000000 |            0 |             0 || cleaning up          | 0.000019 | 0.000000 |   0.000000 |            0 |             0 |+----------------------+----------+----------+------------+--------------+---------------+20 rows in set, 1 warning (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Show Profile</code>查询参数备注：</p><ul><li><code>ALL</code>：显示所有的开销信息。</li><li><code>BLOCK IO</code>：显示块IO相关开销（通用）。</li><li><code>CONTEXT SWITCHES</code>：上下文切换相关开销。</li><li><code>CPU</code>：显示CPU相关开销信息（通用）。</li><li><code>IPC</code>：显示发送和接收相关开销信息。</li><li><code>MEMORY</code>：显示内存相关开销信息。</li><li><code>PAGE FAULTS</code>：显示页面错误相关开销信息。</li><li><code>SOURCE</code>：显示和Source_function。</li><li><code>SWAPS</code>：显示交换次数相关开销的信息。</li></ul><p>6、<code>Show Profile</code>查询列表，日常开发需要注意的结论：</p><ul><li><code>converting HEAP to MyISAM</code>：查询结果太大，内存都不够用了，往磁盘上搬了。</li><li><code>Creating tmp table</code>：创建临时表（拷贝数据到临时表，用完再删除），非常耗费数据库性能。</li><li><code>Copying to tmp table on disk</code>：把内存中的临时表复制到磁盘，危险！！！</li><li><code>locked</code>：死锁。</li></ul><h1 id="16-表锁-偏读"><a href="#16-表锁-偏读" class="headerlink" title="16.表锁(偏读)"></a>16.表锁(偏读)</h1><p><strong>表锁特点：</strong></p><ul><li>表锁偏向<code>MyISAM</code>存储引擎，开销小，加锁快，无死锁，锁定粒度大，发生锁冲突的概率最高，并发度最低。</li></ul><h2 id="16-1-环境准备"><a href="#16-1-环境准备" class="headerlink" title="16.1.环境准备"></a>16.1.环境准备</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 1、创建表CREATE TABLE `mylock`(`id` INT NOT NULL PRIMARY KEY AUTO_INCREMENT,`name` VARCHAR(20))ENGINE=MYISAM DEFAULT CHARSET=utf8 COMMENT='测试表锁';# 2、插入数据INSERT INTO `mylock`(`name`) VALUES('ZhangSan');INSERT INTO `mylock`(`name`) VALUES('LiSi');INSERT INTO `mylock`(`name`) VALUES('WangWu');INSERT INTO `mylock`(`name`) VALUES('ZhaoLiu');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="16-2-锁表的命令"><a href="#16-2-锁表的命令" class="headerlink" title="16.2.锁表的命令"></a>16.2.锁表的命令</h2><blockquote><p>1、查看数据库表锁的命令。</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 查看数据库表锁的命令SHOW OPEN TABLES;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>2、给<code>mylock</code>表上读锁，给<code>book</code>表上写锁。</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 给mylock表上读锁，给book表上写锁LOCK TABLE `mylock` READ, `book` WRITE;# 查看当前表的状态mysql&gt; SHOW OPEN TABLES;+--------------------+------------------------------------------------------+--------+-------------+| Database           | Table                                                | In_use | Name_locked |+--------------------+------------------------------------------------------+--------+-------------+| sql_analysis       | book                                                 |      1 |           0 || sql_analysis       | mylock                                               |      1 |           0 |+--------------------+------------------------------------------------------+--------+-------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>3、释放表锁。</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 释放给表添加的锁UNLOCK TABLES;# 查看当前表的状态mysql&gt; SHOW OPEN TABLES;+--------------------+------------------------------------------------------+--------+-------------+| Database           | Table                                                | In_use | Name_locked |+--------------------+------------------------------------------------------+--------+-------------+| sql_analysis       | book                                                 |      0 |           0 || sql_analysis       | mylock                                               |      0 |           0 |+--------------------+------------------------------------------------------+--------+-------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="16-3-读锁案例"><a href="#16-3-读锁案例" class="headerlink" title="16.3.读锁案例"></a>16.3.读锁案例</h2><blockquote><p>1、打开两个会话，<code>SESSION1</code>为<code>mylock</code>表添加读锁。</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 为mylock表添加读锁LOCK TABLE `mylock` READ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>2、打开两个会话，<code>SESSION1</code>是否可以读自己锁的表？是否可以修改自己锁的表？是否可以读其他的表？那么<code>SESSION2</code>呢？</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># SESSION1# 问题1：SESSION1为mylock表加了读锁，可以读mylock表！mysql&gt; SELECT * FROM `mylock`;+----+----------+| id | name     |+----+----------+|  1 | ZhangSan ||  2 | LiSi     ||  3 | WangWu   ||  4 | ZhaoLiu  |+----+----------+4 rows in set (0.00 sec)# 问题2：SESSION1为mylock表加了读锁，不可以修改mylock表！mysql&gt; UPDATE `mylock` SET `name` = 'abc' WHERE `id` = 1;ERROR 1099 (HY000): Table 'mylock' was locked with a READ lock and can't be updated# 问题3：SESSION1为mylock表加了读锁，不可以读其他的表！mysql&gt; SELECT * FROM `book`;ERROR 1100 (HY000): Table 'book' was not locked with LOCK TABLES# SESSION2# 问题1：SESSION1为mylock表加了读锁，SESSION2可以读mylock表！mysql&gt; SELECT * FROM `mylock`;+----+----------+| id | name     |+----+----------+|  1 | ZhangSan ||  2 | LiSi     ||  3 | WangWu   ||  4 | ZhaoLiu  |+----+----------+4 rows in set (0.00 sec)# 问题2：SESSION1为mylock表加了读锁，SESSION2修改mylock表会被阻塞，需要等待SESSION1释放mylock表！mysql&gt; UPDATE `mylock` SET `name` = 'abc' WHERE `id` = 1;^C^C -- query abortedERROR 1317 (70100): Query execution was interrupted# 问题3：SESSION1为mylock表加了读锁，SESSION2可以读其他表！mysql&gt; SELECT * FROM `book`;+--------+------+| bookid | card |+--------+------+|      1 |    1 ||      7 |    4 ||      8 |    4 ||      9 |    5 ||      5 |    6 ||     17 |    6 ||     15 |    8 |+--------+------+24 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="16-4-写锁案例"><a href="#16-4-写锁案例" class="headerlink" title="16.4.写锁案例"></a>16.4.写锁案例</h2><blockquote><p>1、打开两个会话，<code>SESSION1</code>为<code>mylock</code>表添加写锁。</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 为mylock表添加写锁LOCK TABLE `mylock` WRITE;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>2、打开两个会话，<code>SESSION1</code>是否可以读自己锁的表？是否可以修改自己锁的表？是否可以读其他的表？那么<code>SESSION2</code>呢？</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># SESSION1# 问题1：SESSION1为mylock表加了写锁，可以读mylock的表！mysql&gt; SELECT * FROM `mylock`;+----+----------+| id | name     |+----+----------+|  1 | ZhangSan ||  2 | LiSi     ||  3 | WangWu   ||  4 | ZhaoLiu  |+----+----------+4 rows in set (0.00 sec)# 问题2：SESSION1为mylock表加了写锁，可以修改mylock表!mysql&gt; UPDATE `mylock` SET `name` = 'abc' WHERE `id` = 1;Query OK, 1 row affected (0.00 sec)Rows matched: 1  Changed: 1  Warnings: 0# 问题3：SESSION1为mylock表加了写锁，不能读其他表!mysql&gt; SELECT * FROM `book`;ERROR 1100 (HY000): Table 'book' was not locked with LOCK TABLES# SESSION2# 问题1：SESSION1为mylock表加了写锁，SESSION2读mylock表会阻塞，等待SESSION1释放！mysql&gt; SELECT * FROM `mylock`;^C^C -- query abortedERROR 1317 (70100): Query execution was interrupted# 问题2：SESSION1为mylock表加了写锁，SESSION2读mylock表会阻塞，等待SESSION1释放！mysql&gt; UPDATE `mylock` SET `name` = 'abc' WHERE `id` = 1;^C^C -- query abortedERROR 1317 (70100): Query execution was interrupted# 问题3：SESSION1为mylock表加了写锁，SESSION2可以读其他表！mysql&gt; SELECT * FROM `book`;+--------+------+| bookid | card |+--------+------+|      1 |    1 ||      7 |    4 ||      8 |    4 ||      9 |    5 ||      5 |    6 ||     17 |    6 ||     15 |    8 |+--------+------+24 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="16-5-案例结论"><a href="#16-5-案例结论" class="headerlink" title="16.5.案例结论"></a>16.5.案例结论</h2><p><strong><code>MyISAM</code>引擎在执行查询语句<code>SELECT</code>之前，会自动给涉及到的所有表加读锁，在执行增删改之前，会自动给涉及的表加写锁。</strong></p><p>MySQL的表级锁有两种模式：</p><ul><li><p>表共享读锁（Table Read Lock）。</p></li><li><p>表独占写锁（Table Write Lock）。</p></li></ul><p>対<code>MyISAM</code>表进行操作，会有以下情况：</p><ul><li>対<code>MyISAM</code>表的读操作（加读锁），不会阻塞其他线程対同一表的读操作，但是会阻塞其他线程対同一表的写操作。只有当读锁释放之后，才会执行其他线程的写操作。</li><li>対<code>MyISAM</code>表的写操作（加写锁），会阻塞其他线程対同一表的读和写操作，只有当写锁释放之后，才会执行其他线程的读写操作。</li></ul><h2 id="16-6-表锁分析"><a href="#16-6-表锁分析" class="headerlink" title="16.6.表锁分析"></a>16.6.表锁分析</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysql&gt; SHOW STATUS LIKE 'table%';+----------------------------+-------+| Variable_name              | Value |+----------------------------+-------+| Table_locks_immediate      | 173   || Table_locks_waited         | 0     || Table_open_cache_hits      | 5     || Table_open_cache_misses    | 8     || Table_open_cache_overflows | 0     |+----------------------------+-------+5 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过<code>Table_locks_immediate</code>和<code>Table_locks_waited</code>状态变量来分析系统上的表锁定。具体说明如下：</p><p><code>Table_locks_immediate</code>：产生表级锁定的次数，表示可以立即获取锁的查询次数，每立即获取锁值加1。</p><p><code>Table_locks_waited</code>：出现表级锁定争用而发生等待的次数（不能立即获取锁的次数，每等待一次锁值加1），此值高则说明存在较严重的表级锁争用情况。</p><p><strong>此外，<code>MyISAM</code>的读写锁调度是写优先，这也是<code>MyISAM</code>不适合作为主表的引擎。因为写锁后，其他线程不能进行任何操作，大量的写操作会使查询很难得到锁，从而造成永远阻塞。</strong></p><h1 id="17-行锁-偏写"><a href="#17-行锁-偏写" class="headerlink" title="17.行锁(偏写)"></a>17.行锁(偏写)</h1><p><strong>行锁特点：</strong></p><ul><li>偏向<code>InnoDB</code>存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度最高。</li></ul><p><strong><code>InnoDB</code>存储引擎和<code>MyISAM</code>存储引擎最大不同有两点：一是支持事务，二是采用行锁。</strong></p><p>事务的ACID：</p><ul><li><code>Atomicity [ˌætəˈmɪsəti] </code>。</li><li><code>Consistency [kənˈsɪstənsi] </code>。</li><li><code>Isolation [ˌaɪsəˈleɪʃn]</code>。</li><li><code>Durability [ˌdjʊərəˈbɪlɪti] </code>。</li></ul><h2 id="17-1-环境准备"><a href="#17-1-环境准备" class="headerlink" title="17.1.环境准备"></a>17.1.环境准备</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 建表语句CREATE TABLE `test_innodb_lock`(`a` INT,`b` VARCHAR(16))ENGINE=INNODB DEFAULT CHARSET=utf8 COMMENT='测试行锁'; # 插入数据INSERT INTO `test_innodb_lock`(`a`, `b`) VALUES(1, 'b2');INSERT INTO `test_innodb_lock`(`a`, `b`) VALUES(2, '3');INSERT INTO `test_innodb_lock`(`a`, `b`) VALUES(3, '4000');INSERT INTO `test_innodb_lock`(`a`, `b`) VALUES(4, '5000');INSERT INTO `test_innodb_lock`(`a`, `b`) VALUES(5, '6000');INSERT INTO `test_innodb_lock`(`a`, `b`) VALUES(6, '7000');INSERT INTO `test_innodb_lock`(`a`, `b`) VALUES(7, '8000');INSERT INTO `test_innodb_lock`(`a`, `b`) VALUES(8, '9000');# 创建索引CREATE INDEX idx_test_a ON `test_innodb_lock`(a);CREATE INDEX idx_test_b ON `test_innodb_lock`(b);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="17-2-行锁案例"><a href="#17-2-行锁案例" class="headerlink" title="17.2.行锁案例"></a>17.2.行锁案例</h2><blockquote><p>1、开启手动提交</p></blockquote><p>打开<code>SESSION1</code>和<code>SESSION2</code>两个会话，都开启手动提交。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 开启MySQL数据库的手动提交mysql&gt; SET autocommit=0;Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>2、读几知所写</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># SESSION1 # SESSION1対test_innodb_lock表做写操作，但是没有commit。# 执行修改SQL之后，查询一下test_innodb_lock表，发现数据被修改了。mysql&gt; UPDATE `test_innodb_lock` SET `b` = '88' WHERE `a` = 1;Query OK, 1 row affected (0.00 sec)Rows matched: 1  Changed: 1  Warnings: 0mysql&gt; SELECT * FROM `test_innodb_lock`;+------+------+| a    | b    |+------+------+|    1 | 88   ||    2 | 3    ||    3 | 4000 ||    4 | 5000 ||    5 | 6000 ||    6 | 7000 ||    7 | 8000 ||    8 | 9000 |+------+------+8 rows in set (0.00 sec)# SESSION2 # SESSION2这时候来查询test_innodb_lock表。# 发现SESSION2是读不到SESSION1未提交的数据的。mysql&gt; SELECT * FROM `test_innodb_lock`;+------+------+| a    | b    |+------+------+|    1 | b2   ||    2 | 3    ||    3 | 4000 ||    4 | 5000 ||    5 | 6000 ||    6 | 7000 ||    7 | 8000 ||    8 | 9000 |+------+------+8 rows in set (0.00 se<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>3、行锁两个SESSION同时対一条记录进行写操作</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># SESSION1 対test_innodb_lock表的`a`=1这一行进行写操作，但是没有commitmysql&gt; UPDATE `test_innodb_lock` SET `b` = '99' WHERE `a` = 1;Query OK, 1 row affected (0.00 sec)Rows matched: 1  Changed: 1  Warnings: 0# SESSION2 也对test_innodb_lock表的`a`=1这一行进行写操作，但是发现阻塞了！！！# 等SESSION1执行commit语句之后，SESSION2的SQL就会执行了mysql&gt; UPDATE `test_innodb_lock` SET `b` = 'asdasd' WHERE `a` = 1;ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>4、行锁两个SESSION同时对不同记录进行写操作</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># SESSION1 対test_innodb_lock表的`a`=6这一行进行写操作，但是没有commitmysql&gt; UPDATE `test_innodb_lock` SET `b` = '8976' WHERE `a` = 6;Query OK, 1 row affected (0.00 sec)Rows matched: 1  Changed: 1  Warnings: 0# SESSION2 対test_innodb_lock表的`a`=4这一行进行写操作，没有阻塞！！！# SESSION1和SESSION2同时对不同的行进行写操作互不影响mysql&gt; UPDATE `test_innodb_lock` SET `b` = 'Ringo' WHERE `a` = 4;Query OK, 1 row affected (0.00 sec)Rows matched: 1  Changed: 1  Warnings: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="17-3-索引失效行锁变表锁"><a href="#17-3-索引失效行锁变表锁" class="headerlink" title="17.3.索引失效行锁变表锁"></a>17.3.索引失效行锁变表锁</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># SESSION1 执行SQL语句，没有执行commit。# 由于`b`字段是字符串，但是没有加单引号导致索引失效mysql&gt; UPDATE `test_innodb_lock` SET `a` = 888 WHERE `b` = 8000;Query OK, 1 row affected, 1 warning (0.00 sec)Rows matched: 1  Changed: 1  Warnings: 1# SESSION2 和SESSION1操作的并不是同一行，但是也被阻塞了？？？# 由于SESSION1执行的SQL索引失效，导致行锁升级为表锁。mysql&gt; UPDATE `test_innodb_lock` SET `b` = '1314' WHERE `a` = 1;ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="17-4-间隙锁的危害"><a href="#17-4-间隙锁的危害" class="headerlink" title="17.4.间隙锁的危害"></a>17.4.间隙锁的危害</h2><blockquote><p>什么是间隙锁？</p></blockquote><p>当我们用范围条件而不是相等条件检索数据，并请求共享或者排他锁时，<code>InnoDB</code>会给符合条件的已有数据记录的索引项加锁，对于键值在条件范文内但并不存在的记录，叫做”间隙(GAP)”。</p><p><code>InnoDB</code>也会对这个”间隙”加锁，这种锁的机制就是所谓的”间隙锁”。</p><blockquote><p>间隙锁的危害</p></blockquote><p>因为<code>Query</code>执行过程中通过范围查找的话，他会锁定整个范围内所有的索引键值，即使这个键值不存在。</p><p>间隙锁有一个比较致命的缺点，就是<strong>当锁定一个范围的键值后，即使某些不存在的键值也会被无辜的锁定，而造成在锁定的时候无法插入锁定键值范围内的任何数据。</strong>在某些场景下这可能会対性能造成很大的危害。</p><h2 id="17-5-如何锁定一行"><a href="#17-5-如何锁定一行" class="headerlink" title="17.5.如何锁定一行"></a>17.5.如何锁定一行</h2><p><img src="https://img-blog.csdnimg.cn/2020080616050355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JyaW5nb18=,size_16,color_FFFFFF,t_70" alt="锁定一行"></p><p><code>SELECT .....FOR UPDATE</code>在锁定某一行后，其他写操作会被阻塞，直到锁定的行被<code>COMMIT</code>。</p><p>mysql InnoDB引擎默认的修改数据语句，update,delete,insert都会自动给涉及到的数据加上排他锁，select语句默认不会加任何锁类型，如果加排他锁可以使用select …for update语句，加共享锁可以使用select … lock in share mode语句。所以加过排他锁的数据行在其他事务种是不能修改数据的，也不能通过for update和lock in share mode锁的方式查询数据，但可以直接通过select …from…查询数据，因为普通查询没有任何锁机制。</p><p><img src="https://img-blog.csdnimg.cn/20210421122919994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JyaW5nb18=,size_16,color_FFFFFF,t_70" alt="image-20210421122752768"></p><h2 id="17-6-案例结论"><a href="#17-6-案例结论" class="headerlink" title="17.6.案例结论"></a>17.6.案例结论</h2><p><code>InnoDB</code>存储引擎由于实现了行级锁定，虽然在锁定机制的实现方面所带来的性能损耗可能比表级锁定会要更高一些，但是在整体并发处理能力方面要远远优于<code>MyISAM</code>的表级锁定的。当系统并发量较高的时候，<code>InnoDB</code>的整体性能和<code>MyISAM</code>相比就会有比较明显的优势了。</p><p>但是，<code>InnoDB</code>的行级锁定同样也有其脆弱的一面，当我们使用不当的时候，可能会让<code>InnoDB</code>的整体性能表现不仅不能比<code>MyISAM</code>高，甚至可能会更差。</p><h2 id="17-7-行锁分析"><a href="#17-7-行锁分析" class="headerlink" title="17.7.行锁分析"></a>17.7.行锁分析</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysql&gt; SHOW STATUS LIKE 'innodb_row_lock%';+-------------------------------+--------+| Variable_name                 | Value  |+-------------------------------+--------+| Innodb_row_lock_current_waits | 0      || Innodb_row_lock_time          | 124150 || Innodb_row_lock_time_avg      | 31037  || Innodb_row_lock_time_max      | 51004  || Innodb_row_lock_waits         | 4      |+-------------------------------+--------+5 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>対各个状态量的说明如下：</p><ul><li><code>Innodb_row_lock_current_waits</code>：当前正在等待锁定的数量。</li><li><code>Innodb_row_lock_time</code>：从系统启动到现在锁定总时间长度（重要）。</li><li><code>Innodb_row_lock_time_avg</code>：每次等待所花的平均时间（重要）。</li><li><code>Innodb_row_lock_time_max</code>：从系统启动到现在等待最长的一次所花的时间。</li><li><code>Innodb_row_lock_waits</code>：系统启动后到现在总共等待的次数（重要）。</li></ul><p>尤其是当等待次数很高，而且每次等待时长也不小的时候，我们就需要分析系统中为什么会有如此多的等待，然后根据分析结果着手制定优化策略。</p><h1 id="18-主从复制"><a href="#18-主从复制" class="headerlink" title="18.主从复制"></a>18.主从复制</h1><h2 id="18-1-复制基本原理"><a href="#18-1-复制基本原理" class="headerlink" title="18.1.复制基本原理"></a>18.1.复制基本原理</h2><p><img src="https://img-blog.csdnimg.cn/20200806170415401.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JyaW5nb18=,size_16,color_FFFFFF,t_70" alt="主从复制"></p><p>MySQL复制过程分为三步：</p><ul><li>Master将改变记录到二进制日志(Binary Log)。这些记录过程叫做二进制日志事件，<code>Binary Log Events</code>；</li><li>Slave将Master的<code>Binary Log Events</code>拷贝到它的中继日志(Replay  Log);</li><li>Slave重做中继日志中的事件，将改变应用到自己的数据库中。MySQL复制是异步且串行化的。</li></ul><h2 id="18-2-复制基本原则"><a href="#18-2-复制基本原则" class="headerlink" title="18.2.复制基本原则"></a>18.2.复制基本原则</h2><ul><li>每个Slave只有一个Master。</li><li>每个Slave只能有一个唯一的服务器ID。</li><li>每个Master可以有多个Salve。</li></ul><h2 id="18-3-一主一从配置"><a href="#18-3-一主一从配置" class="headerlink" title="18.3.一主一从配置"></a>18.3.一主一从配置</h2><blockquote><p>1、基本要求：Master和Slave的MySQL服务器版本一致且后台以服务运行。</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创建mysql-slave1实例docker run -p 3307:3306 --name mysql-slave1 \-v /root/mysql-slave1/log:/var/log/mysql \-v /root/mysql-slave1/data:/var/lib/mysql \-v /root/mysql-slave1/conf:/etc/mysql \-e MYSQL_ROOT_PASSWORD=333 \-d mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>2、主从配置都是配在[mysqld]节点下，都是小写</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># Master配置[mysqld]server-id=1 # 必须log-bin=/var/lib/mysql/mysql-bin # 必须read-only=0binlog-ignore-db=mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># Slave配置[mysqld]server-id=2 # 必须log-bin=/var/lib/mysql/mysql-bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>3、Master配置</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 1、GRANT REPLICATION SLAVE ON *.* TO 'username'@'从机IP地址' IDENTIFIED BY 'password';mysql&gt; GRANT REPLICATION SLAVE ON *.* TO 'zhangsan'@'172.18.0.3' IDENTIFIED BY '123456';Query OK, 0 rows affected, 1 warning (0.01 sec)# 2、刷新命令mysql&gt; FLUSH PRIVILEGES;Query OK, 0 rows affected (0.00 sec)# 3、记录下File和Position# 每次配从机的时候都要SHOW MASTER STATUS;查看最新的File和Positionmysql&gt; SHOW MASTER STATUS;+------------------+----------+--------------+------------------+-------------------+| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |+------------------+----------+--------------+------------------+-------------------+| mysql-bin.000001 |      602 |              | mysql            |                   |+------------------+----------+--------------+------------------+-------------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>4、Slave从机配置</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">CHANGE MASTER TO MASTER_HOST='172.18.0.4',MASTER_USER='zhangsan',MASTER_PASSWORD='123456',MASTER_LOG_FILE='mysql-bin.File的编号',MASTER_LOG_POS=Position的最新值;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 1、使用用户名密码登录进Mastermysql&gt; CHANGE MASTER TO MASTER_HOST='172.18.0.4',    -&gt; MASTER_USER='zhangsan',    -&gt; MASTER_PASSWORD='123456',    -&gt; MASTER_LOG_FILE='mysql-bin.000001',    -&gt; MASTER_LOG_POS=602;Query OK, 0 rows affected, 2 warnings (0.02 sec)# 2、开启Slave从机的复制mysql&gt; START SLAVE;Query OK, 0 rows affected (0.00 sec)# 3、查看Slave状态# Slave_IO_Running 和 Slave_SQL_Running 必须同时为Yes 说明主从复制配置成功！mysql&gt; SHOW SLAVE STATUS\G*************************** 1. row ***************************               Slave_IO_State: Waiting for master to send event # Slave待命状态                  Master_Host: 172.18.0.4                  Master_User: zhangsan                  Master_Port: 3306                Connect_Retry: 60              Master_Log_File: mysql-bin.000001          Read_Master_Log_Pos: 602               Relay_Log_File: b030ad25d5fe-relay-bin.000002                Relay_Log_Pos: 320        Relay_Master_Log_File: mysql-bin.000001             Slave_IO_Running: Yes              Slave_SQL_Running: Yes              Replicate_Do_DB:           Replicate_Ignore_DB:            Replicate_Do_Table:        Replicate_Ignore_Table:       Replicate_Wild_Do_Table:   Replicate_Wild_Ignore_Table:                    Last_Errno: 0                   Last_Error:                  Skip_Counter: 0          Exec_Master_Log_Pos: 602              Relay_Log_Space: 534              Until_Condition: None               Until_Log_File:                 Until_Log_Pos: 0           Master_SSL_Allowed: No           Master_SSL_CA_File:            Master_SSL_CA_Path:               Master_SSL_Cert:             Master_SSL_Cipher:                Master_SSL_Key:         Seconds_Behind_Master: 0Master_SSL_Verify_Server_Cert: No                Last_IO_Errno: 0                Last_IO_Error:                Last_SQL_Errno: 0               Last_SQL_Error:   Replicate_Ignore_Server_Ids:              Master_Server_Id: 1                  Master_UUID: bd047557-b20c-11ea-9961-0242ac120002             Master_Info_File: /var/lib/mysql/master.info                    SQL_Delay: 0          SQL_Remaining_Delay: NULL      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates           Master_Retry_Count: 86400                  Master_Bind:       Last_IO_Error_Timestamp:      Last_SQL_Error_Timestamp:                Master_SSL_Crl:            Master_SSL_Crlpath:            Retrieved_Gtid_Set:             Executed_Gtid_Set:                 Auto_Position: 0         Replicate_Rewrite_DB:                  Channel_Name:            Master_TLS_Version: 1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>5、测试主从复制</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># Master创建数据库mysql&gt; create database test_replication;Query OK, 1 row affected (0.01 sec)# Slave查询数据库mysql&gt; show databases;+--------------------+| Database           |+--------------------+| information_schema || mysql              || performance_schema || sys                || test_replication   |+--------------------+5 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>6、停止主从复制功能</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 1、停止Slavemysql&gt; STOP SLAVE;Query OK, 0 rows affected (0.00 sec)# 2、重新配置主从# MASTER_LOG_FILE 和 MASTER_LOG_POS一定要根据最新的数据来配mysql&gt; CHANGE MASTER TO MASTER_HOST='172.18.0.4',    -&gt; MASTER_USER='zhangsan',    -&gt; MASTER_PASSWORD='123456',    -&gt; MASTER_LOG_FILE='mysql-bin.000001',    -&gt; MASTER_LOG_POS=797;Query OK, 0 rows affected, 2 warnings (0.01 sec)mysql&gt; START SLAVE;Query OK, 0 rows affected (0.00 sec)mysql&gt; SHOW SLAVE STATUS\G*************************** 1. row ***************************               Slave_IO_State: Waiting for master to send event                  Master_Host: 172.18.0.4                  Master_User: zhangsan                  Master_Port: 3306                Connect_Retry: 60              Master_Log_File: mysql-bin.000001          Read_Master_Log_Pos: 797               Relay_Log_File: b030ad25d5fe-relay-bin.000002                Relay_Log_Pos: 320        Relay_Master_Log_File: mysql-bin.000001             Slave_IO_Running: Yes            Slave_SQL_Running: Yes              Replicate_Do_DB:           Replicate_Ignore_DB:            Replicate_Do_Table:        Replicate_Ignore_Table:       Replicate_Wild_Do_Table:   Replicate_Wild_Ignore_Table:                    Last_Errno: 0                   Last_Error:                  Skip_Counter: 0          Exec_Master_Log_Pos: 797              Relay_Log_Space: 534              Until_Condition: None               Until_Log_File:                 Until_Log_Pos: 0           Master_SSL_Allowed: No           Master_SSL_CA_File:            Master_SSL_CA_Path:               Master_SSL_Cert:             Master_SSL_Cipher:                Master_SSL_Key:         Seconds_Behind_Master: 0Master_SSL_Verify_Server_Cert: No                Last_IO_Errno: 0                Last_IO_Error:                Last_SQL_Errno: 0               Last_SQL_Error:   Replicate_Ignore_Server_Ids:              Master_Server_Id: 1                  Master_UUID: bd047557-b20c-11ea-9961-0242ac120002             Master_Info_File: /var/lib/mysql/master.info                    SQL_Delay: 0          SQL_Remaining_Delay: NULL      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates           Master_Retry_Count: 86400                  Master_Bind:       Last_IO_Error_Timestamp:      Last_SQL_Error_Timestamp:                Master_SSL_Crl:            Master_SSL_Crlpath:            Retrieved_Gtid_Set:             Executed_Gtid_Set:                 Auto_Position: 0         Replicate_Rewrite_DB:                  Channel_Name:            Master_TLS_Version: 1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="19-MySql事务"><a href="#19-MySql事务" class="headerlink" title="19.MySql事务"></a>19.MySql事务</h1><h2 id="19-1-事务是什么？"><a href="#19-1-事务是什么？" class="headerlink" title="19.1.事务是什么？"></a>19.1.事务是什么？</h2><p>事务是一组SQL语句，要么全部执行成功，要么全部执行失败。通常一个事务对应一个完整的业务(例如银行账户转账业务，该业务就是一个最小的工作单元)<br>事务的提交：COMMIT<br>事务的回滚：ROLLBACK<br>事务的关闭：CLOSE<br>默认情况下一个SQL语句为一个事务。<br>举例说明：<br><img src="https://gitee.com/gsshy/picgo/raw/master/img/image-20211229104650143.png" alt="image-20211229104650143"></p><p>这是两张表 user和user1<br>现在我们需要让丽颖给刘昊然转十块钱。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/shiwu"</span><span class="token punctuation">;</span>            connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"132990"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//            // 禁止jdbc自动提交事务</span><span class="token comment">//            connection.setAutoCommit(false);</span>             preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">"update user set money = money-? where id= ?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token punctuation">}</span>             preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">"update user1 set money = money+? where id = ?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//            // 提交事务</span><span class="token comment">//            connection.commit();</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//            // 回滚事务</span><span class="token comment">//            try {</span><span class="token comment">//                connection.rollback();</span><span class="token comment">//            } catch (SQLException e1) {</span><span class="token comment">//                e1.printStackTrace();</span><span class="token comment">//            }</span>         <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                preparedStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以观察出两个SQL语句中间会报空指针异常，这个时候我们来 看一下运行结果。</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/image-20211229104822768.png" alt="image-20211229104822768"></p><p>所以这个时候我们应该禁止jdbc自动提交事务:</p><pre class="line-numbers language-none"><code class="language-none">connection.setAutoCommit(false);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后再两条SQl语句执行完之后提交事务</p><pre class="line-numbers language-none"><code class="language-none">connection.commit();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果有异常则回滚事务</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 回滚事务</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          connection<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="19-2-事务的ACID特性"><a href="#19-2-事务的ACID特性" class="headerlink" title="19.2.事务的ACID特性"></a>19.2.事务的ACID特性</h2><ol><li><p>原子性</p><p>事务是最小单元，不可再分，要么全部执行成功，要么全部失败回滚</p></li><li><p>一致性</p><p>一致性是指事务必须使数据库从一个一致的状态变到另外一个一致的状态，也就是执行事务之前和之后的状态都必须处于一致的状态。不一致性包含三点：<strong>脏读，不可重复读，幻读</strong></p></li><li><p>隔离性</p><p>隔离性是指当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离</p></li><li><p>持久性</p><p>DBMS（数据库管理系统）对数据的修改是永久性的。</p></li></ol><h2 id="19-3-事务的四个隔离级别"><a href="#19-3-事务的四个隔离级别" class="headerlink" title="19.3.事务的四个隔离级别"></a>19.3.事务的四个隔离级别</h2><p><strong>脏读</strong>：一个事务处理过程里读取了另一个未提交的事务中的数据<br><strong>可重复读</strong>：一个事务在它运行期间，两次查找相同的表，出现了不同的数据<br><strong>幻读</strong>：在一个事务中读取到了别的事务插入的数据，导致前后不一致：<br>A事务读取了B事务已经提交的新增数据。和不可重复读的区别，这里是新增，不可重复读是更改（或删除）。这两种情况对策是不一样的，对于不可重复读，只需要采取行级锁防止该记录数据被更改或删除，然而对于幻读必须加表级锁，防止在这个表中新增一条数据。</p><ul><li>读未提交：读未提交，即能够读取到没有被提交的数据，所以很明显这个级别的隔离机制无法解决脏读、不可重复读、幻读中的任何一种</li><li>读已提交：读已提交，即能够读到那些已经提交的数据，自然能够防止脏读，但是无法限制不可重复读和幻读</li><li>可重复读：可重复读，读取了一条数据，这个事务不结束，别的事务就不可以改这条记录，这样就解决了脏读、不可重复读的问题，</li><li>串行化：串行化，多个事务时，只有运行完一个事务之后，才能运行其他事务。</li></ul><p><strong>我们来演示一下：</strong><br>SELECT @@AUTOCOMMIT;   查看MySQL是否自动提交事务  0表示手动提交事务   1表示自动提交事务<br>SET AUTOCOMMIT = 0;   设置事务提交方式  0表示手动提交事务   1表示自动提交事务</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/image-20211229105755336.png" alt="image-20211229105755336"></p><p>SELECT  @@TX_ISOLATION;查询事务的隔离级别</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/image-20211229105817880.png" alt="image-20211229105817880"></p><p><strong>未提交读的隔离级别</strong></p><p><strong>默认为可重复读</strong>。我们来将它改成<strong>未提交读。</strong></p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/image-20211229105902048.png" alt="image-20211229105902048"></p><ul><li><p>脏读</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/image-20211229105932329.png" alt="image-20211229105932329"></p><p>我们可以看到左边的事务还未提交，右边查到了左边没有的事务。</p><p><strong>可提交读的隔离级别</strong></p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/image-20211229110050700.png" alt="image-20211229110050700"></p><p>我们可以看到在可提交读隔离级别上<strong>解决了脏读</strong></p></li><li><p><strong>可重复读</strong></p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/image-20211229110124302.png" alt="image-20211229110124302"></p><p>一个事务在它运行期间，两次查找相同的表，出现了不同的数据</p><p><strong>可重复读隔离级别</strong></p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/image-20211229110217504.png" alt="image-20211229110217504"></p><p>可重复读：</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/image-20211229110242339.png" alt="image-20211229110242339"></p><p>我么可以看到这个隔离级别解决了可重复读</p></li><li><p>幻读</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/image-20211229110317877.png" alt="image-20211229110317877"></p><p>我们可以看到这个并没有出现幻读。因为高版本MySQL Server做的一些优化，在高版本的MySQL用户手册里面，说在可重复读这个级别下，也会对幻读进行一定的防止，但是不能保证绝对不出现幻读。因为串行化一般是不会用到的，效率太低，MySQL默认工作在第三级别，可重复读情况下，所以对这个隔离级别做了优化。</p></li></ul><h2 id="19-4-锁机制"><a href="#19-4-锁机制" class="headerlink" title="19.4.锁机制"></a>19.4.锁机制</h2><p>MySQL大致可归纳为以下3种锁：</p><ul><li>表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。</li><li>行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</li><li>页面锁：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般<br>表锁：对ＭyISAM表的读操作，不会阻塞其他用户对同一表的读请求，但会阻塞对同一表的写请求；对ＭyISAM表的写操作，则会阻塞其他用户对同一表的读和写请求；<br>读读：可以允许<br>读写：不允许<br>写写：不允许<br>InnoDB采用行锁<br>InnoDB实现了以下两种类型的行锁。</li><li>共享锁（s）：允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁。</li><li>排他锁（Ｘ）：允许获取排他锁的事务更新数据，阻止其他事务取得相同的数据集共享读锁和排他写锁。<br>InnoDB行锁是通过索引上的索引项来实现的。InnoDB这种行锁实现特点意味者：只有通过索引条件检索数据，InnoDB才会使用行级锁，否则，InnoDB将使用表锁！<br>对于UPDATE、DELETE和INSERT语句，InnoDB会自动给涉及数据集加排他锁；对于普通SELECT语句，InnoDB不会加任何锁。<br>间隙锁（Next-Key锁）<br>当我们用范围条件而不是相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据的索引项加锁；对于键值在条件范围内但并不存在的记录，叫做“间隙”，InnoDB也会对这个“间隙”加锁，这种锁机制就是所谓的间隙锁。<br>比如会给between and 中间所有存在或者不存在数据加锁。可以防止幻读。<br>MVCC（无锁实现） 多版本并发控制机制 –》给每一个事务维护一个数据最初的快照<br>1，未提交读：<br>读读/读写：事务不做任何隔离操作<br>写写：获取记录的排他锁，不能同时进行，除非一个事务 提交或回滚<br>2，已提交读：<br>（其他事务提交或者回滚，它会立即读到）<br>读读：事务读的是事务最初的快照 mvcc机制<br>读写：读的是快照数据，写的也是快照数据 mvcc机制<br>写写：获取记录的排他锁，不能同时进行，除非一个事务 提交或回滚<br>3，可重复读 (jdbc默认隔离级别)<br>读读：事务读的是快照数据 mvcc机制<br>读写：读的是快照数据，写的也是快照数据（除非当前事务提交或回滚，否则访问的都是快照数据） mvcc机制<br>写写：获取记录的排他锁，不能同时进行，除非一个事务 提交或回滚<br>4，串行化<br>读读 ：共享锁多个事务可以同时获取<br>读写 : 共享锁和排它锁<br>写写 ： 排它锁和排它锁</li></ul><h2 id="19-5-mysql的for-update"><a href="#19-5-mysql的for-update" class="headerlink" title="19.5.mysql的for update"></a>19.5.mysql的for update</h2><h3 id="19-5-1-使用场景"><a href="#19-5-1-使用场景" class="headerlink" title="19.5.1.使用场景"></a>19.5.1.使用场景</h3><p>如果遇到存在高并发并且对于数据的准确性很有要求的场景，是需要了解和使用for update的。</p><p>比如涉及到金钱、库存等。一般这些操作都是很长一串并且是开启事务的。如果库存刚开始读的时候是1，而立马另一个进程进行了update将库存更新为0了，而事务还没有结束，会将错的数据一直执行下去，就会有问题。所以需要for upate 进行数据加锁防止高并发时候数据出错。<br><strong>原则：一锁二判三更新</strong></p><h3 id="19-5-2-使用方法"><a href="#19-5-2-使用方法" class="headerlink" title="19.5.2.使用方法"></a>19.5.2.使用方法</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> xxx <span class="token keyword">for</span> <span class="token keyword">update</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="19-5-3-锁表"><a href="#19-5-3-锁表" class="headerlink" title="19.5.3.锁表"></a>19.5.3.锁表</h3><p>InnoDB默认是行级别的锁，当有明确指定的主键时候，是行级锁。否则是表级别。</p><p>例子: 假设表foods ，存在有id跟name、status三个字段，id是主键，status有索引。</p><p>例1: (明确指定主键，并且有此记录，行级锁)<br>SELECT * FROM foods WHERE id=1 FOR UPDATE;<br>SELECT * FROM foods WHERE id=1 and name=‘咖啡色的羊驼’ FOR UPDATE;</p><p>例2: (明确指定主键/索引，若查无此记录，无锁)<br>SELECT * FROM foods WHERE id=-1 FOR UPDATE;</p><p>例3: (无主键/索引，表级锁)<br>SELECT * FROM foods WHERE name=‘咖啡色的羊驼’ FOR UPDATE;</p><p>例4: (主键/索引不明确，表级锁)<br>SELECT * FROM foods WHERE id&lt;&gt;‘3’ FOR UPDATE;<br>SELECT * FROM foods WHERE id LIKE ‘3’ FOR UPDATE;</p><p>for update的注意点<br>1.for update 仅适用于InnoDB，并且必须开启事务，在begin与commit之间才生效。</p><p>2.要测试for update的锁表情况，可以利用MySQL的Command Mode，开启二个视窗来做测试。</p><p>当开启一个事务进行for update的时候，另一个事务也有for update的时候会一直等着，直到第一个事务结束吗？<br>答：会的。除非第一个事务commit或者rollback或者断开连接，第二个事务会立马拿到锁进行后面操作。</p><p>如果没查到记录会锁表吗？<br>答：会的。表级锁时，不管是否查询到记录，都会锁定表。</p>]]></content>
    
    
    <summary type="html">MySQL优化</summary>
    
    
    
    <category term="mysql" scheme="https://13592491893.github.io/categories/mysql/"/>
    
    
    <category term="MySQL优化" scheme="https://13592491893.github.io/tags/MySQL%E4%BC%98%E5%8C%96/"/>
    
    <category term="教程" scheme="https://13592491893.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="优化" scheme="https://13592491893.github.io/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Docker基础篇之快速上手</title>
    <link href="https://13592491893.github.io/posts/b75e281c.html"/>
    <id>https://13592491893.github.io/posts/b75e281c.html</id>
    <published>2021-12-19T16:00:00.000Z</published>
    <updated>2021-12-29T03:19:25.623Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker基础篇之快速上手"><a href="#Docker基础篇之快速上手" class="headerlink" title="Docker基础篇之快速上手"></a>Docker基础篇之快速上手</h1><h1 id="第一章-Docker简介"><a href="#第一章-Docker简介" class="headerlink" title="第一章 Docker简介"></a>第一章 Docker简介</h1><h3 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h3><h4 id="问题：为什么会有-docker-的出现"><a href="#问题：为什么会有-docker-的出现" class="headerlink" title="问题：为什么会有 docker 的出现"></a>问题：为什么会有 docker 的出现</h4><p>一款产 品从开发到上线，从操作系统，到运行环境，再到应用配置。作为开发+运维之间的协作我们需要关心很多东西，这也是很多互联网公司都不得不面对的问题，特别是各种版本的迭代之后，不同版本环境的兼容，对运维人员都是考验<br><strong>Docker</strong>之所以发展如此迅速，也是因为它对此给出了一个标准化的解决方案。<br>环境配置如此麻烦，换一台机器，就要重来一次，费力费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装?也就是说，安装的时候，把原始环境-模-样地复制过来。开发人员利用Docker可以消除协作编码时“在我的机器上可正常工作”的问题。</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-02_17-51-22.png"></p><p>之前在服务器配置一个应用的运行环境，要安装各种软件，就拿尚硅谷电商项目的环境来说吧，<strong>Java/TomcatMySQL/JDBC</strong>驱动包等。安装和配置这些东西有多麻烦就不说了，它还不能跨平台。假如我们是在<strong>Windows</strong>上安装的这些环境，到了Linux 又得重新装。况且就算不跨操作系统，换另一台同样操作系统的服务器，要移植应用也是非常麻烦的。</p><p>传统上认为，软件编码开发/测试结束后，所产出的成果即是程序或是能够编译执行的二进制字节码等java为例)。而为了让这程序可以顺利执行，开发团队也得准备完整的部署文件，让维运团队得以部署应用程式，<strong>开发需要清楚的告诉运维部署团队，用的全部配置文件+所有软件环境。不过，即便如此，仍然常常发生部署失败的状况。</strong>Docker镜 像的设计<strong>，使得Docker得以打过去「程序即应用」的观念。透过镜像(images)将作业系统核心除外，运作应用程式所需要的系统环境，由下而上打包，达到应用程式跨平台间的无缝接轨运.作。</strong></p><h4 id="docker理念"><a href="#docker理念" class="headerlink" title="docker理念"></a>docker理念</h4><p>Docker是基于Go语言实现的云开源项目。<br>Docker的主要目标是“<strong>Build, Ship[ and Run Any App,Anywhere</strong>“，也就是通过对应用组件的封装、分发、部署、运行等生命期的管理，使用户的APP (可以是一个WEB应用或数据库应用等等)及其运行环境能够做到“<strong>一次封装，到处运行</strong>”。</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-02_18-14-27.png"></p><p> Linux容器技术的出现就解决了这样一 一个问题，而Docker就是在它的基础上发展过来的。将应用运行在Docker容器上面，而Docker容器在任何操作系统上都是一-致的，这就实现了跨平台、跨服务器。<strong>只需要一次配置好环境，换到别的机子上就可以一键部署好，大大简化了操作</strong></p><h4 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h4><p>解决了运行环境和配置问题的软件容器，方便做持续集成并有助于整体发布的容器虚拟化技术</p><h3 id="能干嘛"><a href="#能干嘛" class="headerlink" title="能干嘛"></a>能干嘛</h3><h4 id="之前的虚拟机技术"><a href="#之前的虚拟机技术" class="headerlink" title="之前的虚拟机技术"></a>之前的虚拟机技术</h4><p>虚拟机**(virtual machine)**就是带环境安装的一种解决方案。</p><p>它可以在一种操作系统里面运行另一种作系统，比如在<strong>Windows系统里面运行Linux系统</strong>。应用程序对此毫无感知，因为虚拟机看上去跟真实系统- -模-样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。这类虚拟机完美的运行了另一套系统，能够使应用程序，操作系统和硬件三者之间的逻辑不变。</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-02_18-18-07.png"></p><p>虚拟机的缺点:</p><p>1、资源占用多</p><p>2、冗余步骤多</p><p>3、启动慢</p><h4 id="容器虚拟化技术"><a href="#容器虚拟化技术" class="headerlink" title="容器虚拟化技术"></a>容器虚拟化技术</h4><p>由于前面虛拟机存在这些缺点，<strong>Linux</strong> 发展出了另一种虚拟化技术: <strong>Linux 容器</strong>(Linux Containers,缩为LXC)。</p><p><strong>Linux容器不是模拟一个完整的操作系统</strong>，而是对进程进行隔离。有了容器，就可以将软件运行所的所有资源打包到一个隔离的容器中。容器与虚拟机不同，不需要捆绑一整套操作系统，只需要软件工作所需的库资源和设置。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一地运行。.</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-02_18-22-04.png"></p><p>比较了<strong>Docker</strong>和传统虚拟化方式的不同之处:</p><p>1、传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程;</p><p>2、而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，<strong>而且也没有进行硬件虚拟</strong>。因此容器要比传统虚拟机为轻便。</p><p>3、每个容器之间互相隔离，每个容器有自己的文件系统，容器之间进程不会相互影响，能区分计算资源。</p><h4 id="开发-运维-DevOps"><a href="#开发-运维-DevOps" class="headerlink" title="开发/运维(DevOps)"></a>开发/运维(DevOps)</h4><p>一次构建、随处运行，</p><h5 id="更快速的应用交付和部署"><a href="#更快速的应用交付和部署" class="headerlink" title="更快速的应用交付和部署"></a>更快速的应用交付和部署</h5><p>​        传统的应用开发完成后，需要提供一堆安装程序和配置说明文档，安装部署后需根据配置文档进行繁杂的配置才能正常运行。Docker化<br>之后只需要交付少量容器镜像文件，在正式生产环境加载镜像并运行即可，应用安装配置在镜像里已经内置好，大大节省部署配置和测<br>试验证时间。</p><h5 id="更便捷的升级和扩缩容"><a href="#更便捷的升级和扩缩容" class="headerlink" title="更便捷的升级和扩缩容"></a>更便捷的升级和扩缩容</h5><p>​        随着微服务架构和Docker的发展，大量的应用会通过微服务方式架构，应用的开发构建将变成搭乐高积木一样，每个Docker容器将变成-块“积木”，应用的升级将变得非常容易。当现有的容器不足以支撑业务处理时，可通过镜像运行新的容器进行快速扩容，使应用系统的扩容从原先的天级变成分钟级甚至秒级。</p><h5 id="更简单的系统运维"><a href="#更简单的系统运维" class="headerlink" title="更简单的系统运维"></a>更简单的系统运维</h5><p>​        应用容器化运行后，生产环境运行的应用可与开发、测试环境的应用高度–致，容器会将应用程序相关的环境和状态完全封装起来，不会因为底层基础架构和操作系统的不一致性给应用带来影响，产生新的BUG。当出现程序异常时，也可以通过测试环境的相同容器进行快速定位和修复。</p><h5 id="更高效的计算资源利用"><a href="#更高效的计算资源利用" class="headerlink" title="更高效的计算资源利用"></a>更高效的计算资源利用</h5><p>​    <strong>Docker是内核级虚拟化</strong>，其不像传统的虚拟化技术一样 需要额外的Hypervisor支持，所以在-台物理机上可以运行很多个容器实例，可大大提升物理服务器的CPU和内存的利用率。</p><h4 id="企业级"><a href="#企业级" class="headerlink" title="企业级"></a>企业级</h4><p>新浪</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-02_18-30-08.png"></p><p>美团</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-02_18-30-56.png"></p><p>蘑菇街</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-02_18-31-11.png"></p><h4 id="去哪下"><a href="#去哪下" class="headerlink" title="去哪下"></a>去哪下</h4><h5 id="1、官网"><a href="#1、官网" class="headerlink" title="1、官网"></a>1、官网</h5><p>docker官网： <a href="https://www.docker.com/">https://www.docker.com/</a></p><p>docker中文网站: <a href="https://www.docker-cn.com/">https://www.docker-cn.com/</a></p><h5 id="2、仓库"><a href="#2、仓库" class="headerlink" title="2、仓库"></a>2、仓库</h5><p>Docker Hub官网：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p><h1 id="第二章-Docker安装"><a href="#第二章-Docker安装" class="headerlink" title="第二章 Docker安装"></a>第二章 Docker安装</h1><h3 id="前提说明"><a href="#前提说明" class="headerlink" title="前提说明"></a>前提说明</h3><p><strong>CentOS Docker安装</strong><br>Docker支持以下的CentOS版本:<br>CentOS 7 (64-bit)<br>CentOS 6.5 (64-bit)或更高的版本</p><p><strong>前提条件</strong><br>目前，CentOS 仅发行版本中的内核支持Docker。<br>Docker运行在CentOS 7.上，要求系统为64位、系统内核版本为3.10以上。<br>Docker运行在CentOS-6.5或更高的版本的CentOS上，要求系统为64位、系<strong>统内核版本为2.6.32-431或者更高版本。</strong></p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-02_18-46-16.png"></p><h3 id="Docker-的基本组成"><a href="#Docker-的基本组成" class="headerlink" title="Docker 的基本组成"></a>Docker 的基本组成</h3><h4 id="docker架构图"><a href="#docker架构图" class="headerlink" title="docker架构图"></a>docker架构图</h4><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/architecture.svg"></p><h4 id="镜像-image"><a href="#镜像-image" class="headerlink" title="镜像( image )"></a>镜像( image )</h4><p>Docker镜像(lmage)就是-一个只读的模板。镜像可以用来创建Docker容器，个镜像可以创建很多容器</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-02_19-39-12.png"></p><h4 id="容器-container"><a href="#容器-container" class="headerlink" title="容器( container)"></a>容器( container)</h4><p>Docker利用容器(Container) 独立运行的一个或一组应用。<strong>容器是用镜像创建的运行实例。</strong><br>它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。<br><strong>可以把容器看做是一个简 易版的Linux环境</strong>(包括root用户权限、进程空间、用户空间和网络空间等)和运行在其中的应用程序。<br>容器的定义和镜像几乎一模一样，也是一堆层的统一视角， 唯- -区别在于容器的最上面那-层是可读可写的。</p><h4 id="仓库-repository"><a href="#仓库-repository" class="headerlink" title="仓库( repository)"></a>仓库( repository)</h4><p>仓库(<strong>Repository</strong>) 是<strong>集中存放镜像</strong>文件的场所。<br>仓库(<strong>Repository</strong>)和仓库注册服务器(<strong>Registry</strong>) 是有区别的。仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多镜像，<br>每个镜像有不同的标签(tag) 。</p><p>仓库分为公开仓库(<strong>Public</strong>) 和私有仓库(<strong>Private</strong>) 两种形式。<br><strong>最大的公开仓库是Docker Hub(ttps://hub. docker.com/)</strong><br>存放了数量庞大的镜像供用户下载。国内的公开仓库包括阿里云、网易云等</p><h4 id="小总结"><a href="#小总结" class="headerlink" title="小总结 ()"></a>小总结 ()</h4><p>需要正确的理解仓储/镜像/容器这几个概念:</p><p>Docker本身是一个容器运行载体或称之为管理引擎。我们把应用程序和配置依赖打包好形成一-个可交付的运行环境，这个打好的运行环境就似乎image镜像文件。只有通过这个镜像文件才能生成Docker容器。image文件可以看作是容器的模板。Docker根据image文件生成容器的实例。同一个image文件，可以生成多个同时运行的容器实例。</p><p>image文件生成的容器实例，本身也是一一个文件，称为镜像文件。</p><p>一个容器运行一种服务，当我们需要的时候，就可以通过docker客户端创建一-个对应的运行实例，也就是我们的容器至于仓储，就是放了一堆镜像的地方，我们可以把镜像发布到仓储中，需要的时候从仓储中拉下来就可以了。|</p><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><h4 id="Centos6-8安装Docker"><a href="#Centos6-8安装Docker" class="headerlink" title="Centos6.8安装Docker"></a>Centos6.8安装Docker</h4><p>1、yum install -y epel-release</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-02_19-48-53.png"></p><p>2、yum install -y docker-io</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-02_19-49-37.png"></p><p>3、安装后的配置文件： etc/sysconfig/docker</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-02_19-50-17.png"></p><p>4、启动 Docker后台服务: service docker start</p><p>5、docker version 验证</p><h4 id="Centos7-0安装Docker"><a href="#Centos7-0安装Docker" class="headerlink" title="Centos7.0安装Docker"></a>Centos7.0安装Docker</h4><p><a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p><p><strong>centos8 安装docker解决:Failed to start docker.service: Unit docker.service not found.</strong></p><pre class="line-numbers language-none"><code class="language-none">1. CentOS 8 中安装 docker 和 Podman 冲突解决步骤：1) 查看是否安装 Podmanrpm -q podman2) 删除Podmandnf remove podman<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重装docker:</p><p>分别执行如下命令:</p><pre class="line-numbers language-none"><code class="language-none">sudo yum install -y yum-utils  device-mapper-persistent-data  lvm2 sudo yum-config-manager  --add-repo   https://download.docker.com/linux/centos/docker-ce.repo sudo yum install docker-ce docker-ce-cli containerd.io sudo yum install docker-ce docker-ce-cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动docker: </p><pre class="line-numbers language-none"><code class="language-none">sudo systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看版本</p><pre class="line-numbers language-none"><code class="language-none">docker -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>开机自启</p><pre class="line-numbers language-none"><code class="language-none">systemctl enable docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置淘宝镜像</p><pre class="line-numbers language-none"><code class="language-none">https://173i80ok.mirror.aliyuncs.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/image-20211219153019324.png" alt="image-20211219153019324"></p><pre class="line-numbers language-none"><code class="language-none">sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'{  "registry-mirrors": ["https://173i80ok.mirror.aliyuncs.com"]}EOFsudo systemctl daemon-reloadsudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="永远的helloworld"><a href="#永远的helloworld" class="headerlink" title="永远的helloworld"></a>永远的helloworld</h3><h4 id="阿里云镜像加速"><a href="#阿里云镜像加速" class="headerlink" title="阿里云镜像加速"></a>阿里云镜像加速</h4><p>是什么</p><p>​    <a href="https://promotion.aliyun.com/ntms/act/kubernetes.html">https://promotion.aliyun.com/ntms/act/kubernetes.html</a></p><p>注册一个属于自己的阿里云账户( 可复用淘宝账号)</p><p>获得加速器地址连接</p><p>​    登录阿里云开发者平台</p><p>​    获取加速器地址</p><p>配置本机Docker运行镜像加速器</p><p>​    鉴于国内网络问题，后续拉取Docker镜像十分缓慢，我们可以需要配置加速器来解决，<br>我使用的是阿里云的本人自己账号的镜像地址(需要自己注册有一个属于你自己的): ht:po/. mirror aliyuncns .com</p><ul><li>vim /etc/sysconfig/docker<br>将获得的自己账户下的阿里云加速地址配置进<br>other_ args-=”–registry-mirror=https://你自 己的账号加速信息.mirror .aliyuncs.com</li></ul><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-02_20-19-10.png"></p><p>重新启动 Docker 后台服务：service docker restart</p><p>Linux系统下配置完加速器需要检查是否生效</p><h4 id="网易云加速"><a href="#网易云加速" class="headerlink" title="网易云加速"></a>网易云加速</h4><p>基本上同上述阿里云</p><p>启动Docker后台容器(测试运行 hello-world )</p><p>​    docker run hello world</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_10-54-57.png"></p><p>run干了什么</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_10-55-24.png"></p><h3 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h3><h4 id="Docker是怎样工作的"><a href="#Docker是怎样工作的" class="headerlink" title="Docker是怎样工作的"></a>Docker是怎样工作的</h4><p>Docker是一个Client-Server结构的系统，Docker守 护进程运行在主机上，然后通过Socket连 接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。<strong>容器，是一个运行时环境，就是我们前面说到的集装箱。</strong></p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_10-58-47.png"></p><h4 id="为什么Docker比较比vm快"><a href="#为什么Docker比较比vm快" class="headerlink" title="为什么Docker比较比vm快"></a>为什么Docker比较比vm快</h4><p>1、<strong>docker</strong>有着比虚拟机更少的抽象层。由亍docker不需要<strong>Hypervisor</strong>实现硬件资源虚拟化,运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。<br>2、<strong>docker</strong>利用的是宿主机的内核,而不需要<strong>Guest OS</strong>。因此,当新建一个 容器时,docker不需要和虚拟机一样 重新加载- - 个操作系统内核仍而避免引寻、加载操作系统内核返个比较费时费资源的过程,当新建–个虚拟机时,虚拟机软件需要加载GuestOS,返个新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统,则省略了返个过程,因此新建一-个docker容器只需要几秒钟。</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_11-00-34.png"></p><h1 id="第三章-Docker常用命令"><a href="#第三章-Docker常用命令" class="headerlink" title="第三章 Docker常用命令"></a>第三章 Docker常用命令</h1><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker Versiondocker infodocker --help自己查看官网解释，高手都是自己练出来的，百度上只不过是翻译了下，加了点例子<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><h4 id="docker-images-列出本机上的镜像"><a href="#docker-images-列出本机上的镜像" class="headerlink" title="docker images 列出本机上的镜像"></a>docker images 列出本机上的镜像</h4><h4 id="OPTIONS-说明："><a href="#OPTIONS-说明：" class="headerlink" title="OPTIONS 说明："></a><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_11-09-33.png">OPTIONS 说明：</h4><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">-a 列出本地所有的镜像(含中间映射层)-q 只显示镜像ID--digests 显示镜像的摘要信息--no-trunc 显示完整的镜像信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="docker-search-某个XXX镜像的名字"><a href="#docker-search-某个XXX镜像的名字" class="headerlink" title="docker search 某个XXX镜像的名字"></a>docker search 某个XXX镜像的名字</h4><p>​    网站 <a href="http://www.dockerhub.com/">www.dockerhub.com</a></p><p>​    docker search [OPTIONS] 镜像名字</p><p>​    OPTIONS 说明</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">--no-trun 显示完整的镜像描述-s 列出收藏数不小于指定值的镜像--automated 只列出 automated build类型的镜像<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="docker-pull-某个镜像的名字"><a href="#docker-pull-某个镜像的名字" class="headerlink" title="docker pull 某个镜像的名字"></a>docker pull 某个镜像的名字</h4><p>​    下载镜像</p><p>​     docker pull 镜像名字[:TAG]</p><h4 id="docker-rmi-某个XXX镜像的名字ID"><a href="#docker-rmi-某个XXX镜像的名字ID" class="headerlink" title="docker rmi 某个XXX镜像的名字ID"></a>docker rmi 某个XXX镜像的名字ID</h4><p>​    删除镜像</p><p>​    删除单个 docker rm -f 镜像ID</p><p>​    删除多个 docker rm -f 镜像名1:TAG 镜像名2:TAG</p><p>​    删除多个 docker rmi -f ${docker images -qa}</p><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><p>有镜像才能创建容器，这是根本前提(下载一个Centos镜像演示)</p><p>​    docker pull centos</p><h4 id="新建并启动容器"><a href="#新建并启动容器" class="headerlink" title="新建并启动容器"></a>新建并启动容器</h4><p>​    docker run [OPTIONS] IMAGE [COMMAND][ARG]</p><p>​    OPTIONS 说明 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">OPTIONS说明<span class="token punctuation">(</span>常用<span class="token punctuation">)</span> <span class="token operator">:</span>有些是一个减号，有些是两个减号<span class="token operator">--</span>name<span class="token operator">=</span><span class="token string">"容器新名字"</span><span class="token operator">:</span>为容器指定一个名称<span class="token punctuation">;</span><span class="token operator">-</span>d<span class="token operator">:</span>后台运行容器，并返回容器ID， 也即启动守护式容器<span class="token punctuation">;</span><span class="token operator">-</span>i<span class="token operator">:</span>以交互模式运行容器，通常与<span class="token operator">-</span>t同时使用<span class="token punctuation">;</span><span class="token operator">-</span>t<span class="token operator">:</span>为容器重新分配一个伪输入终端，通常与<span class="token operator">-</span>i同时使用<span class="token punctuation">;</span><span class="token operator">-</span><span class="token class-name">P</span><span class="token operator">:</span>随机端口映射<span class="token punctuation">;</span><span class="token operator">-</span>p<span class="token operator">:</span>指定端口映射，有以下四种格式ip<span class="token operator">:</span>hostPort<span class="token operator">:</span>containerPortip<span class="token operator">::</span><span class="token function">containerPort</span>hostPort<span class="token operator">:</span>containerPortcontainerPort<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_11-40-34.png"></p><h4 id="列出当前所有正在运行的容器"><a href="#列出当前所有正在运行的容器" class="headerlink" title="列出当前所有正在运行的容器"></a>列出当前所有<strong>正在运行</strong>的容器</h4><p>​    docker ps [OPTIONS]</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">OPTIONS说明(常用) :-a :列出当前所有正在运行的容器+历史上运行过的-|:显示最近创建的容器。-n:显示最近n个创建的容器。-q :静默模式，只显示容器编号。--no-trunc :不截断输出。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h4><p>两种退出方式</p><p>​    exit 容器停止退出</p><p>​    ctrl+P+Q 容器不停止退出</p><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><p>docker start 容器ID或容器签名</p><h4 id="重启容器"><a href="#重启容器" class="headerlink" title="重启容器"></a>重启容器</h4><p>docker restart 容器ID或容器签名</p><h4 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h4><p>docker stop 容器ID或容器签名</p><h4 id="强制停止容器"><a href="#强制停止容器" class="headerlink" title="强制停止容器"></a>强制停止容器</h4><p>docker kill 容器ID或容器签名</p><h4 id="删除已停止的容器"><a href="#删除已停止的容器" class="headerlink" title="删除已停止的容器"></a>删除已停止的容器</h4><p>docker rm 容器ID  -f</p><p>​    一次性删除多个容器</p><p>​    docker rm -f $(docker ps -a -q)</p><p>​    docker ps -a -q | xargs docker rm</p><h3 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h3><h4 id="启动守护式容器"><a href="#启动守护式容器" class="headerlink" title="启动守护式容器"></a>启动守护式容器</h4><p>#使用镜像centos:latest以后台模式启动一个容器<br>docker run -d centos</p><p>问题:然后docker ps -a进行查看,<strong>会发现容器已经退出</strong><br>很重要的要说明的一点: <strong>Docker容器后台运行,就必须有一个前台进程.</strong><br>容器运行的命令如果不是那些<strong>一直挂起的命令</strong> (比如运行top，tail) ，就是会自动退出的。<br>这个是<strong>docker</strong>的机制问题,比如你的web容器，我们以<strong>nginx</strong>为例，正常情况下,我们配置启动服务只需要启动响应的<strong>service</strong>即可。例如<br>service nginx start<br>但是,这样做,<strong>nginx</strong>为后台进程模式运行,就导致<strong>docker</strong>前台没有运行的应用,这样的容器后台启动后，会立即自杀因为他觉得他没事可做了.所以，最佳的解决方案是将你要运行的程序以前台进程的形式运行</p><h4 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h4><p>docker logs -f -t –tail 容器ID </p><p>​    -t 是加入时间戳</p><p>​    -f 跟随最新的日志打印</p><p>​    –tail 数字显示最后多少条</p><h4 id="查看容器内的进程"><a href="#查看容器内的进程" class="headerlink" title="查看容器内的进程"></a>查看容器内的进程</h4><p>docker top 容器ID</p><h4 id="查看容器内部细节"><a href="#查看容器内部细节" class="headerlink" title="查看容器内部细节"></a>查看容器内部细节</h4><p>docker inspect 容器ID</p><h4 id="进入正在运行的容器并以命令行交互"><a href="#进入正在运行的容器并以命令行交互" class="headerlink" title="进入正在运行的容器并以命令行交互"></a>进入正在运行的容器并以命令行交互</h4><p>docker exec -it 容器ID bashShell</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_13-23-17.png"></p><p>重新进入docker attach 容器ID</p><p>上述两个区别</p><p>attach 直接进入容器启动命令的终端，不会启动新的进程</p><p>exec 实在容器中打开新的终端，并且可以穷的那个新的进程</p><h4 id="从容器内拷贝文件到主机上"><a href="#从容器内拷贝文件到主机上" class="headerlink" title="从容器内拷贝文件到主机上"></a>从容器内拷贝文件到主机上</h4><p>docker cp 容器ID:容器内路径 目的主机路径</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_13-26-40.png"></p><h3 id="小总结-1"><a href="#小总结-1" class="headerlink" title="小总结"></a>小总结</h3><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_13-30-12.png"></p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/20201003133051.png"></p><h1 id="第-四-章-Docker-镜像"><a href="#第-四-章-Docker-镜像" class="headerlink" title="第 四 章 Docker 镜像"></a>第 四 章 Docker 镜像</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的有内容，包括代码、运行时、库、环境变量和配置文件。</p><h3 id="UnionFS-联合文件系统"><a href="#UnionFS-联合文件系统" class="headerlink" title="UnionFS(联合文件系统)"></a>UnionFS(联合文件系统)</h3><p>UnionFS (状节又件示统)<br>UnionFS (联合文件系统) : Union文件系统(UnionFS)是一一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修作为一 次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a singlevirtualfilesystem)。Union文件系统是Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像(没有父镜像)可以制作各种具.体的应用镜像。</p><p>特性:一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文<br>件系统会包含所有底层的文件和目录</p><h3 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h3><p><strong>Docker镜像加载原理:</strong><br>    <strong>docker</strong>的镜像实际上由一层一层的文件系统组成，这种层级的文件系统<strong>UnionFS。</strong></p><p><strong>botfs(boot file system)**主要包含</strong>bootloader<strong>和</strong>kernel**, <strong>bootloader</strong>主 要是引导加载<strong>kernel</strong>, <strong>Linux</strong>刚启动时会加载bootfs文件系统，在<strong>Docker</strong>镜像的最底层是<strong>bootfs</strong>。这一-层与我们典型的<strong>Linux/Unix</strong>系统是- - -样的，包含boot加载器和内核。当boot加载完成之 后整个内核就都在内存中了，此时内存的使用权己由bootfs转交给内核，此时系统也会卸载bootfs。</p><p><strong>rootfs (root file system)，</strong>在<strong>bootfs</strong>之 上。 包含的就是典型Linux系统中的**/dev, /proc, /bin, /etc<strong>等标准目录和文件。</strong>rootfs<strong>就 是各种不同的操作系统发行版，比如</strong>Ubuntu<strong>，</strong>Centos**等等。</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_13-38-28.png"></p><p>平时我们安装的虚拟机的Centos都是好几个G ，为什么docker这里才要200m</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/QQ%E6%88%AA%E5%9B%BE20201003133908.png"></p><p>对于一个精简的<strong>OS, rootfs</strong>可 以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用<strong>Host</strong>的<strong>kernel</strong>,自只需要提供rootfs就行了。由此可见对于不同的<strong>linux</strong>发行版, <strong>bootfs</strong>基本是一致的, <strong>rootfs</strong>会有差别，因此不同的发行版可以公用<strong>bootfs</strong>。</p><h3 id="分层的镜像"><a href="#分层的镜像" class="headerlink" title="分层的镜像"></a>分层的镜像</h3><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_13-40-06.png"></p><h3 id="分层的镜像-1"><a href="#分层的镜像-1" class="headerlink" title="分层的镜像"></a>分层的镜像</h3><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_14-02-22.png"></p><h3 id="为什么-Docker纪念馆想要采用这种分层结构"><a href="#为什么-Docker纪念馆想要采用这种分层结构" class="headerlink" title="为什么 Docker纪念馆想要采用这种分层结构"></a>为什么 Docker纪念馆想要采用这种分层结构</h3><p>最大的一个好处就是-<strong>共享资源</strong><br>比如:<strong>有多个镜像都从相同的base镜像构建而来</strong>，那么宿主机只需在磁盘上保存一份<strong>base</strong>镜像,<br>同时内存中也只需加载一份<strong>base</strong>镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>Docker镜像都是只读的，当容器启动时，一个新的可写层被加载到<strong>镜像的顶部</strong>，这一层通常被称为<strong>容器层</strong>，容器层之下都叫<strong>镜像层</strong></p><h2 id="Docker镜像Commit操作"><a href="#Docker镜像Commit操作" class="headerlink" title="Docker镜像Commit操作"></a>Docker镜像Commit操作</h2><p>docker commit 提交容器副本使之称为一个新的镜像</p><p>docker commit -m=”提交的描述信息” -a=”作者” 容器ID 要创建的目标镜像名:[标签名]</p><h4 id="案例演示："><a href="#案例演示：" class="headerlink" title="案例演示："></a>案例演示：</h4><p>1、从Hub上下载tomcat镜像到本地并成功运行</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_14-26-27.png"></p><p>docker run -d -p 8080:8080 tomcat</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">-</span>p主机端口：docker容器端口<span class="token operator">-</span><span class="token class-name">P</span><span class="token operator">:</span>随机分配端口i<span class="token operator">:</span>交互t<span class="token operator">:</span>终端<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、故意删除上一步镜像生产tomcat容器的文档</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_14-28-22.png"></p><p>3、也即当前的tomcat运行实例是一个没有文档内容的容器，以他为模板commit一个没有doc的tomcat新镜像 atguigu/tomcat02</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_14-29-38.png"></p><p>4、启动我们的新镜像并和原来的对比</p><p>​    启动atuigu/tomcat02 没有doc</p><p>​    启动原来tomcat他有doc</p><h1 id="第-五-章-Docker容器数据卷"><a href="#第-五-章-Docker容器数据卷" class="headerlink" title="第 五 章 Docker容器数据卷"></a>第 五 章 Docker容器数据卷</h1><h2 id="是什么-1"><a href="#是什么-1" class="headerlink" title="是什么"></a>是什么</h2><p>先来看看<strong>Docker</strong>的理念:<br><em>将运用与运行的环境打包形成容器运行，运行可以伴随着容器，但是我们对数据的要求希望是持久化的<br>*容器之间希望有可能共享数据<br>*</em>Docker<strong>容器产生的数据，如果不通过</strong>docker** <strong>commit</strong>生成新的镜像，使得数据做为镜像的一部分保存下来，<br>那么当容器删除后，数据自然也就没有了。<br>为了能保存数据在docker中我们使用卷。|</p><p>一句话：有点类似我们Redis里面的rdb和aof文件</p><h2 id="能干嘛-1"><a href="#能干嘛-1" class="headerlink" title="能干嘛"></a>能干嘛</h2><p>卷就是目录或文件，存在于一个或多个容器中，由<strong>docker</strong>挂载到容器，但不属于联合文件系统，因此能够绕过Union FileSystem提供一些用 于持续存储或共享数据的特性:<br>卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此Docker不 会在容器删除时删除其挂载的数据卷</p><p>特点:<br>1:数据卷可在容器之间共享或重用数据<br>2:卷中的更改可以直接生效<br>3:数据卷中的更改不会包含在镜像的更新中<br>4:数据卷的生命周期一直持续到没有容器使用它为止</p><p><strong>容器的持久化</strong></p><p><strong>容器间继承+共享数据</strong></p><h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><h3 id="容器内添加"><a href="#容器内添加" class="headerlink" title="容器内添加"></a>容器内添加</h3><h4 id="直接命令添加"><a href="#直接命令添加" class="headerlink" title="直接命令添加"></a>直接命令添加</h4><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_15-30-44.png"></p><p>docker run -it -v /宿主机绝对路径目录:/容器内目录 镜像名</p><p>查看数据卷是否挂载成功</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_15-31-52.png"></p><p>容器和宿主机之间数据共享</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_15-32-19.png"></p><p>容器停止退出后，主机修改后的数据是否同步</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_15-33-03.png"></p><p>命令(带权限)</p><p>​    docker run -it -v /宿主机绝对路径目录:/容器内目录**:ro** 镜像名</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_15-33-49.png"></p><h4 id="DockerFile添加"><a href="#DockerFile添加" class="headerlink" title="DockerFile添加"></a>DockerFile添加</h4><p>根目录下新建mydocker文件夹并进入</p><p>可在Dockerfile中使用VOLUME指令来给镜像添加一个或多个数据卷</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_15-35-17.png"></p><p>File构建</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_15-35-37.png"></p><p>build后生成镜像</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_15-36-01.png"></p><p>获得一个新镜像zzyy/centos</p><p>run容器</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_15-36-31.png"></p><p>通过上述步骤，容器内的卷目录地址已经知道，对应的主机目录在哪</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_15-37-05.png"></p><p><strong>主机对应默认地址</strong></p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_15-37-22.png"></p><p>备注</p><p>Docker挂载主机目录Docker访问出现cannot open directory . Permission denied<br>解决办法:在挂载目录后多加一个–privileged=true参数即可</p><h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><h3 id="是什么-2"><a href="#是什么-2" class="headerlink" title="是什么"></a>是什么</h3><p>命名的容器挂载数据卷，其它容器通过挂载这个(父容器)实现数据共享，挂载数据卷的容器，称之为数据卷容器.</p><h3 id="总体介绍"><a href="#总体介绍" class="headerlink" title="总体介绍"></a>总体介绍</h3><p>以上一步新建的zzyy/centos为模板并运行容器 doc1/doc2/doc3</p><p>他们已经具有容器卷</p><p>​    /dataVolumeContainer1</p><p>​    /dataVolumeContainer2</p><h3 id="容器间传递共享-–volumes-from"><a href="#容器间传递共享-–volumes-from" class="headerlink" title="容器间传递共享(–volumes -from)"></a>容器间传递共享(–volumes -from)</h3><h4 id="先启动一个父容器doc1"><a href="#先启动一个父容器doc1" class="headerlink" title="先启动一个父容器doc1"></a>先启动一个父容器doc1</h4><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_15-40-46.png"></p><p>启动后在 dataVolumeContainer1中新增内容</p><h4 id="doc2-doc3-继承doc1"><a href="#doc2-doc3-继承doc1" class="headerlink" title="doc2/doc3 继承doc1"></a>doc2/doc3 继承doc1</h4><p>​    <strong>–volumes -from</strong></p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_15-41-51.png"></p><p>doc2/doc3 分别在dataVolumeContainer2各自新增内容</p><h4 id="回到doc1可以看到02-03各自添加的都能共享了"><a href="#回到doc1可以看到02-03各自添加的都能共享了" class="headerlink" title="回到doc1可以看到02/03各自添加的都能共享了"></a>回到doc1可以看到02/03各自添加的都能共享了</h4><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_15-42-46.png"></p><h4 id="删除doc1-doc2修改后doc3是否可以访问"><a href="#删除doc1-doc2修改后doc3是否可以访问" class="headerlink" title="删除doc1 doc2修改后doc3是否可以访问"></a>删除doc1 doc2修改后doc3是否可以访问</h4><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_15-43-31.png"></p><h4 id="删除doc02后doc3是否访问"><a href="#删除doc02后doc3是否访问" class="headerlink" title="删除doc02后doc3是否访问"></a>删除doc02后doc3是否访问</h4><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_15-43-57.png"></p><p>在进一步</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_15-44-11.png"></p><h4 id="新建doc04继承doc03-然后删除doc03"><a href="#新建doc04继承doc03-然后删除doc03" class="headerlink" title="新建doc04继承doc03 然后删除doc03"></a>新建doc04继承doc03 然后删除doc03</h4><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_15-44-56.png"></p><p><strong>结论：容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用它为止</strong></p><h1 id="第-六-章-DockerFile解析"><a href="#第-六-章-DockerFile解析" class="headerlink" title="第 六 章 DockerFile解析"></a>第 六 章 DockerFile解析</h1><h2 id="是什么-3"><a href="#是什么-3" class="headerlink" title="是什么"></a>是什么</h2><h3 id="Dockerfile是用来构建Docker镜像的构建文件，由一系列命令和参数构成的脚本"><a href="#Dockerfile是用来构建Docker镜像的构建文件，由一系列命令和参数构成的脚本" class="headerlink" title="Dockerfile是用来构建Docker镜像的构建文件，由一系列命令和参数构成的脚本"></a>Dockerfile是用来构建Docker镜像的构建文件，由一系列命令和参数构成的脚本</h3><h3 id="构建三步骤"><a href="#构建三步骤" class="headerlink" title="构建三步骤"></a>构建三步骤</h3><p>​    编写Dockerfile文件</p><p>​    docker build</p><p>​    docker run</p><h3 id="文件什么样？？？"><a href="#文件什么样？？？" class="headerlink" title="文件什么样？？？"></a>文件什么样？？？</h3><p>​    熟悉的Centos为例</p><p><a href="http://hub.docker.com/_/centos">http://hub.docker.com/_/centos</a></p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_17-32-12.png"></p><h2 id="DockerFile构建过程解析"><a href="#DockerFile构建过程解析" class="headerlink" title="DockerFile构建过程解析"></a>DockerFile构建过程解析</h2><p>Dockerfile内容基础知识</p><p>1、每条保留字指令都必须为大写字母且后面要跟随至少一个参数<br>2、 指令按照从.上到下，顺序执行<br>3、#表示注释<br>4、每条指令都会创建一个新的镜像层，并对镜像进行提交</p><h3 id="Docker执行Dockerfile的大致流程"><a href="#Docker执行Dockerfile的大致流程" class="headerlink" title="Docker执行Dockerfile的大致流程"></a>Docker执行Dockerfile的大致流程</h3><p>1、 docker 从基础镜像运行一个容器<br>2、执行一-条指令并对容器作出修改<br>3、执行类似docker commit的操作提交- -个新的镜像层<br>4、docker再基 于刚提交的镜像运行一一个新容器<br>5、执行dockerfile中的 下一条指令直到所有指令都执行完成</p><h3 id="小总结-2"><a href="#小总结-2" class="headerlink" title="小总结"></a>小总结</h3><p>从应用软件的角度来看，Dockerfile、 Docker镜像与Docker容器分别代表软件的三个不同阶段，<br>Dockerfile是软件的原材料<br>Docker镜像是软件的交付品<br>Docker容器则可以认为是软件的运行态。<br>Dockerfile面向开发，Docker镜 像成为交付标准，Docker容 器则涉及部署与运维，三者缺- -不可，合力充当Docker体系的基石。</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_17-35-08.png"></p><p>1、Dockerfile，需要定义一个Dockerfile，Dockerfile定 义了进程需要的一切东西。Dockerfile涉 及的内容包括执行代码或者是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进程和内核进程(当应用进程需要和系统服务和内核进程打交道，这时需要考虑如何设计namespace的权限控制)等等;<br>2、Docker镜像，在用Dockerfile定义一文件之后，docker build时会产生- -个Docker镜像，当运行Docker镜像时，会真正开始提供服务;<br>3、Docker容器，容器是直接提供服务的。</p><h2 id="DockerFile体系结构-保留字指令"><a href="#DockerFile体系结构-保留字指令" class="headerlink" title="DockerFile体系结构(保留字指令)"></a>DockerFile体系结构(保留字指令)</h2><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_17-47-26.png" style="zoom:200%;"><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_17-47-58.png"></p><p>小总结</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_17-48-16.png"></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="Base-镜像-scratch"><a href="#Base-镜像-scratch" class="headerlink" title="Base 镜像(scratch)"></a>Base 镜像(scratch)</h3><p>Docker Hub中 99%的镜像都是通过在base镜像中安装和配置需要的软件构建出来的</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_17-52-43.png"></p><h3 id="自定义镜像mycentos"><a href="#自定义镜像mycentos" class="headerlink" title="自定义镜像mycentos"></a>自定义镜像mycentos</h3><h4 id="1、编写"><a href="#1、编写" class="headerlink" title="1、编写"></a>1、编写</h4><p>​    Hub默认Centos镜像是什么情况</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_17-53-44.png"></p><p>准备Dockerfile文件</p><p>myCentOS内容Dockerfile</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_17-54-40.png"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">FROM centosMAINTAINER ZZYY&lt;zzyy167@126.com&gt;ENV MYPATH /usr/localWORKDIR $MYPATHRUN yum -y install vimRUN yum -y install net-toolsEXPOSE 80CMD echo $MYPATHCMD echo "success--------------ok"CMD /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、构建"><a href="#2、构建" class="headerlink" title="2、构建"></a>2、构建</h4><p>docker build -t 新镜像名字:TAG .</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_17-56-15.png"></p><h4 id="3、运行"><a href="#3、运行" class="headerlink" title="3、运行"></a>3、运行</h4><p>docker run -it 新镜像名字:TAG </p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_17-57-09.png"></p><h4 id="4、列出镜像的变更历史"><a href="#4、列出镜像的变更历史" class="headerlink" title="4、列出镜像的变更历史"></a>4、列出镜像的变更历史</h4><p>docker history 镜像名</p><p>CMD/ENTRYPOINT 镜像案例</p><p>都是指定一个容器启动时要运行的命令</p><h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><p>​    Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被dockerrun之后的参数替换</p><p>​    Case</p><p>​    tomcat的讲解演示 docker run -it -p 8080:8080 tomcat ls -l</p><h5 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h5><p>​    docker run 之后的参数会被当做参数传递给 ENTRYPOINT 之后形成新的命令组合</p><p>​    Case </p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_18-02-41.png"></p><p>制作CMD版可以查询IP信息的容器</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_18-03-11.png"></p><h5 id="curl的命令解释"><a href="#curl的命令解释" class="headerlink" title="curl的命令解释"></a>curl的命令解释</h5><p><strong>curl</strong>命令可以用来执行下载、发送各种<strong>HTTP</strong>请求，指定<strong>HTTP</strong>头部等操作。</p><p>如果系统没有<strong>curl</strong>可以使用<strong>yum install curl</strong>安装，也可以下载安装。<br><strong>curl是将下载文件输出到stdout</strong><br>使用命令: curl <a href="http://www/">http://www</a> .baidu.com<br>执行后，<a href="http://www.baidu.com的html就会显示在屏幕上了/">www.baidu.com的html就会显示在屏幕上了</a></p><p>这是最简单的使用方法。用这个命令获得了htp://curl.haxx.se指向的页面，同样，如果这里的URL指向的是–个文件或者一幅图都可以直接下载到本地。如果下载的是HTML文档，那么缺省的将只显示文件头部，即HTML文档的header。要全部显示，请加参数-i</p><p>WHY</p><p>我们可以看到可执行文件找不到的报错，<strong>executable file not found。</strong><br>之前我们说过，<strong>跟在镜像名后面的是command,运行时会替换CMD的默认值。</strong><br>因此这里的-i替换了原来的CMD，而不是添加在原来的curl -s htp://ip.cn后面。而-i 根本不是命令，所以自然找不到。<br>那么如果我们希望加入-i这参数，我们就必须重新完整的输入这个命令:<br><strong>$ docker run myip curl -s <a href="http://ip.cn/">http://ip.cn</a> -i</strong></p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_18-05-28.png"></p><h3 id="自定义镜像Tomcat"><a href="#自定义镜像Tomcat" class="headerlink" title="自定义镜像Tomcat"></a>自定义镜像Tomcat</h3><h5 id="1、mkdir-p-zzyy-mydockerfile-tomcat9"><a href="#1、mkdir-p-zzyy-mydockerfile-tomcat9" class="headerlink" title="1、mkdir -p /zzyy/mydockerfile/tomcat9"></a>1、mkdir -p /zzyy/mydockerfile/tomcat9</h5><h5 id="2、在上述目录下-touch-c-txt"><a href="#2、在上述目录下-touch-c-txt" class="headerlink" title="2、在上述目录下 touch c.txt"></a>2、在上述目录下 touch c.txt</h5><h5 id="3、将jdk和tomcat安装的压缩包拷贝进上一步目录"><a href="#3、将jdk和tomcat安装的压缩包拷贝进上一步目录" class="headerlink" title="3、将jdk和tomcat安装的压缩包拷贝进上一步目录"></a>3、将jdk和tomcat安装的压缩包拷贝进上一步目录</h5><h5 id="4、在zzyyuse-mydockerfile-tomcat9目录下新建Dockerfile文件"><a href="#4、在zzyyuse-mydockerfile-tomcat9目录下新建Dockerfile文件" class="headerlink" title="4、在zzyyuse/mydockerfile/tomcat9目录下新建Dockerfile文件"></a>4、在zzyyuse/mydockerfile/tomcat9目录下新建Dockerfile文件</h5><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM centosMAINTAINER zzyy&lt;zzyybs@ 126.com&gt;#把宿主机当前上下文的c .txt拷贝到容器/usr/local/路径下COPY c.txt /usr/local/cincontainer.txt#把java与tomcat添加到容器中ADD jdk-8u171-linux x64.tar .gz /usr/local/ADD apache-tomcat-9.0.8.tar.gz /usr/ocal/#安装vim编辑器RUN yum -y install vim#设置工 作访问时候的WORKDIR路径， 登录落脚点ENV MYPATH /usr/localWORKDIR $MYPATH#配:置java与tomcat环境变量ENV JAVA_ HOME /usr/localjdk1 .8.0_ 171ENV CLASSPATH $JAVA_ HOME/lib/dt.jar:$JAVA_ HOME/lib/tools.jarENV CATALINA_ HOME /usr/local/apache-tomcat-9.0.8ENV CATALINA_ BASE /usr/ocal/apache-tomcat-9.0.8ENV PATH $PATH:$JAVA_ HOME/bin:$CATALINA_ HOME/ib:$CATALINA_ HOME/bin#容器运行时监听的端口EXPOSE 8080#启动时运行tomcat# ENTRYPOINT ["/usrl/local/apache-tomcat-9.0.8/bin/startup.sh" ]# CMD ["/usr/local/apache-tomcat-9.0.8/bin/catalina.sh","run"]CMD /usr/local/apache-tomcat-9.0.8/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-9.0.8/in/logs/catalina.out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>目录内容</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_18-12-29.png"></p><h5 id="5、构建"><a href="#5、构建" class="headerlink" title="5、构建"></a>5、构建</h5><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_18-12-48.png"></p><p>构建完成</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_18-13-20.png"></p><h5 id="6、run"><a href="#6、run" class="headerlink" title="6、run"></a>6、run</h5><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">docker run -d -p 9080:8080 -name myt9 -v /zyuse/mydockerfiletomcat9/test:/usrlocal/apache-tomcat9.0.8/webapps/test -v /zzyyuse/mydockerfile/tomcat9/tomcat9logs/:/usrlocal/apache-tomcat-9.0.8/logs -privileged=true zzyytomcat9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_18-14-42.png"></p><p>备注</p><p>Docker挂载主机目录Docker访问出现cannot open directory : Permission denied解决办法:在挂载目录后多加一个–privileged=true参数即可</p><h5 id="7、验证"><a href="#7、验证" class="headerlink" title="7、验证"></a>7、验证</h5><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_18-58-14.png"></p><h5 id="8、综合前-述容器卷测试的web服务test发布"><a href="#8、综合前-述容器卷测试的web服务test发布" class="headerlink" title="8、综合前 述容器卷测试的web服务test发布"></a>8、综合前 述容器卷测试的web服务test发布</h5><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_18-58-56.png"></p><p>web.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1 .0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name"><span class="token namespace">xmIns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XML Schema-instance<span class="token punctuation">"</span></span><span class="token attr-name">xmIns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://java sun.com/xm/ns/javaee<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xsi:</span>schemaL</span> <span class="token attr-name">ocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://java. sun.com/xml/ns/javaee htp:/:/java. sun.com/xml/ns/javaee/web-app_ 2_ _5.xsd<span class="token punctuation">"</span></span><span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WebApp_ ID<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2.5<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>a.jsp</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%&gt;&lt;!DOCTYPE html PUBLIC“//W3C//DTD HTML 4.01 Transitional//EN" http://www.w3.org/TR/html4/loose.dtd"&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;&lt;title&gt;Insert title here &lt;/title&gt;&lt;/head&gt;&lt;body&gt;welcome-&lt;%="i am in docker tomcat self "%&gt;&lt;br&gt;&lt;br&gt;&lt;% System.out,.printIn("==========docker tomcat self");%&gt;&lt;/body&gt;&lt;/htmI&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%&gt;<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span> <span class="token name">PUBLIC“//W3C//DTD</span> <span class="token name">HTML</span> <span class="token name">4.01</span> <span class="token name">Transitional//EN</span><span class="token string">" http://www.w3.org/TR/html4/loose.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Insert title here <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>welcome-&lt;%="i am in docker tomcat self "%&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>&lt;% System.out,.printIn("==========docker tomcat self");%&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>htmI</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小总结-3"><a href="#小总结-3" class="headerlink" title="小总结"></a>小总结</h2><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-03_19-00-48.png"></p><h1 id="第-七-章-Docker常用安装"><a href="#第-七-章-Docker常用安装" class="headerlink" title="第 七 章 Docker常用安装"></a>第 七 章 Docker常用安装</h1><h3 id="总体步骤"><a href="#总体步骤" class="headerlink" title="总体步骤"></a>总体步骤</h3><blockquote><p>搜索镜像</p><p>拉取镜像</p><p>查看镜像</p><p>启动镜像</p><p>停止容器</p><p>移除容器</p></blockquote><h3 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h3><h4 id="docker-hub-上查找mysql镜像"><a href="#docker-hub-上查找mysql镜像" class="headerlink" title="docker hub 上查找mysql镜像"></a>docker hub 上查找mysql镜像</h4><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-04_11-38-56.png"></p><h4 id="从-docker-hub-阿里云加速器-拉取mysql镜像到本地标签为5-6"><a href="#从-docker-hub-阿里云加速器-拉取mysql镜像到本地标签为5-6" class="headerlink" title="从 docker hub(阿里云加速器)拉取mysql镜像到本地标签为5.6"></a>从 docker hub(阿里云加速器)拉取mysql镜像到本地标签为5.6</h4><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-04_11-40-13.png"></p><h4 id="使用mysql5-6镜像创建容器-也叫运行镜像"><a href="#使用mysql5-6镜像创建容器-也叫运行镜像" class="headerlink" title="使用mysql5.6镜像创建容器(也叫运行镜像)"></a>使用mysql5.6镜像创建容器(也叫运行镜像)</h4><p>使用mysql镜像</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -p 12345:3306 --name mysql -v /ggcc/mysql/conf:/etc/mysql/conf.d -v /ggcc/mysql/logs:/logs -v /ggcc/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.6----------------------------------------------命令说明:-p 12345:3306:将主机的12345端口映射到docker容器的3306端口。-name mysq:运行服务名字-V /ggcc/mysql/conf:/etc/mysql/conf.d :将主机/zzyyuse/mysq|录下的conf/my.cnf挂载到容器的/etc/mysql/conf.d-v /ggcc/mysqlogs/logs: 将主机/zzyyuse/mysq|目 录下的logs 目录挂载到容器的/logs。-V /ggcc/mysqldata:/var/lib/mysql :将主机lzzyyuse/mysql目录下的data目录挂载到容器的/var/lib/mysql .-e MYSQL_ ROOT_ PASSWORD=123456: 初始化root用户的密码。.-d mysql:5.6:后台程序运行mysql5.6 ----------------------------------------------docker exec -it Mysql运行成功后的容器ID /bin/bash----------------------------------------------数据备份小测试docker exec mysql服务容器ID sh -c 'exec mysqldump --all-databases -uroot -p"123456"' &gt;/ggcc/all-database.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-04_11-59-32.png"></p><h4 id="数据备份测试"><a href="#数据备份测试" class="headerlink" title="数据备份测试"></a>数据备份测试</h4><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-04_12-02-59.png"></p><h3 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h3><h4 id="从docker-hu上-阿里云加速器-拉取redis镜像到本地标签为：3-2"><a href="#从docker-hu上-阿里云加速器-拉取redis镜像到本地标签为：3-2" class="headerlink" title="从docker hu上(阿里云加速器)拉取redis镜像到本地标签为：3.2"></a>从docker hu上(阿里云加速器)拉取redis镜像到本地标签为：3.2</h4><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-04_12-05-08.png"></p><h4 id="使用redis3-2镜像创建容器-也叫运行镜像"><a href="#使用redis3-2镜像创建容器-也叫运行镜像" class="headerlink" title="使用redis3.2镜像创建容器(也叫运行镜像)"></a>使用redis3.2镜像创建容器(也叫运行镜像)</h4><p>​    使用镜像</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -p 6379:6379 -v /ggcc/myredis/data:/data -v /ggcc/myredis/conf/redis.conf:/usr/local/etc/redis/redis.conf -d redis redis-server /usr/local/etc/redis/redis.conf --appendonly yes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="在主机-ggcc-myredis-conf-redis-conf目录上新建redis-conf文件"><a href="#在主机-ggcc-myredis-conf-redis-conf目录上新建redis-conf文件" class="headerlink" title="在主机/ggcc/myredis/conf/redis.conf目录上新建redis.conf文件"></a>在主机/ggcc/myredis/conf/redis.conf目录上新建redis.conf文件</h4><p>vim /ggcc/myredis/conf/redis.conf/redis.conf</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"># <span class="token class-name">Redis</span> configuration file example<span class="token punctuation">.</span>## <span class="token class-name">Note</span> that in order <span class="token keyword">to</span> <span class="token namespace">read</span> the configuration file<span class="token punctuation">,</span> <span class="token class-name">Redis</span> must be# started <span class="token keyword">with</span> <span class="token namespace">the</span> file path as first argument<span class="token operator">:</span>## <span class="token punctuation">.</span>/redis<span class="token operator">-</span>server <span class="token operator">/</span>path<span class="token operator">/</span><span class="token keyword">to</span><span class="token operator">/</span>redis<span class="token punctuation">.</span>conf# <span class="token class-name">Note</span> on units<span class="token operator">:</span> when memory size is needed<span class="token punctuation">,</span> it is possible <span class="token keyword">to</span> <span class="token namespace">specify</span># it in the usual form of <span class="token number">1</span>k <span class="token number">5</span>GB <span class="token number">4</span>M and so forth<span class="token operator">:</span>## <span class="token number">1</span>k <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">1000</span> bytes# <span class="token number">1</span>kb <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">1024</span> bytes# <span class="token number">1</span>m <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">1000000</span> bytes# <span class="token number">1</span>mb <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span> bytes# <span class="token number">1</span>g <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">1000000000</span> bytes# <span class="token number">1</span>gb <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span> bytes## units are <span class="token keyword">case</span> insensitive so <span class="token number">1</span>GB <span class="token number">1</span>Gb <span class="token number">1</span>gB are all the same<span class="token punctuation">.</span>################################## INCLUDES #################################### <span class="token class-name">Include</span> one or more other config files here<span class="token punctuation">.</span>  <span class="token class-name">This</span> is useful <span class="token keyword">if</span> you# have a standard template that goes <span class="token keyword">to</span> <span class="token namespace">all</span> <span class="token class-name">Redis</span> servers but also need# <span class="token keyword">to</span> <span class="token namespace">customize</span> a few per<span class="token operator">-</span>server settings<span class="token punctuation">.</span>  <span class="token class-name">Include</span> files can include# other files<span class="token punctuation">,</span> so use <span class="token keyword">this</span> wisely<span class="token punctuation">.</span>## <span class="token class-name">Notice</span> option <span class="token string">"include"</span> won't be rewritten by command <span class="token string">"CONFIG REWRITE"</span># from admin or <span class="token class-name">Redis</span> <span class="token class-name">Sentinel</span><span class="token punctuation">.</span> <span class="token class-name">Since</span> <span class="token class-name">Redis</span> always <span class="token keyword">uses</span> <span class="token namespace">the</span> last processed# line as value of a configuration directive<span class="token punctuation">,</span> you'd better put includes# at the beginning of <span class="token keyword">this</span> file <span class="token keyword">to</span> <span class="token namespace">avoid</span> overwriting config change at runtime<span class="token punctuation">.</span>## <span class="token class-name">If</span> instead you are interested in using includes <span class="token keyword">to</span> <span class="token namespace">override</span> configuration# options<span class="token punctuation">,</span> it is better <span class="token keyword">to</span> <span class="token namespace">use</span> include as the last line<span class="token punctuation">.</span>## include <span class="token operator">/</span>path<span class="token operator">/</span><span class="token keyword">to</span><span class="token operator">/</span>local<span class="token punctuation">.</span>conf# include <span class="token operator">/</span>path<span class="token operator">/</span><span class="token keyword">to</span><span class="token operator">/</span>other<span class="token punctuation">.</span>conf################################## MODULES ###################################### <span class="token class-name">Load</span> modules at startup<span class="token punctuation">.</span> <span class="token class-name">If</span> the server is not able <span class="token keyword">to</span> <span class="token namespace">load</span> modules# it will abort<span class="token punctuation">.</span> <span class="token class-name">It</span> is possible <span class="token keyword">to</span> <span class="token namespace">use</span> multiple loadmodule directives<span class="token punctuation">.</span>## loadmodule <span class="token operator">/</span>path<span class="token operator">/</span><span class="token keyword">to</span><span class="token operator">/</span>my_module<span class="token punctuation">.</span>so# loadmodule <span class="token operator">/</span>path<span class="token operator">/</span><span class="token keyword">to</span><span class="token operator">/</span>other_module<span class="token punctuation">.</span>so################################## NETWORK ###################################### <span class="token class-name">By</span> <span class="token keyword">default</span><span class="token punctuation">,</span> <span class="token keyword">if</span> no <span class="token string">"bind"</span> configuration directive is specified<span class="token punctuation">,</span> <span class="token class-name">Redis</span> listens# <span class="token keyword">for</span> connections from all the network interfaces available on the server<span class="token punctuation">.</span># <span class="token class-name">It</span> is possible <span class="token keyword">to</span> <span class="token namespace">listen</span> <span class="token keyword">to</span> <span class="token namespace">just</span> one or multiple selected interfaces using# the <span class="token string">"bind"</span> configuration directive<span class="token punctuation">,</span> followed by one or more IP addresses<span class="token punctuation">.</span>## <span class="token class-name">Examples</span><span class="token operator">:</span>## bind <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.100</span> <span class="token number">10.0</span><span class="token number">.0</span><span class="token number">.1</span># bind <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> <span class="token operator">::</span><span class="token number">1</span>## <span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span> WARNING <span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span> <span class="token class-name">If</span> the computer running <span class="token class-name">Redis</span> is directly exposed <span class="token keyword">to</span> <span class="token namespace">the</span># internet<span class="token punctuation">,</span> binding <span class="token keyword">to</span> <span class="token namespace">all</span> the interfaces is dangerous and will expose the# instance <span class="token keyword">to</span> <span class="token namespace">everybody</span> on the internet<span class="token punctuation">.</span> <span class="token class-name">So</span> by <span class="token keyword">default</span> we uncomment the# following bind directive<span class="token punctuation">,</span> that will force <span class="token class-name">Redis</span> <span class="token keyword">to</span> <span class="token namespace">listen</span> only into# the <span class="token class-name">IPv4</span> loopback <span class="token keyword">interface</span> address <span class="token punctuation">(</span><span class="token keyword">this</span> means <span class="token class-name">Redis</span> will be able <span class="token keyword">to</span># accept connections only from clients running into the same computer it# is running<span class="token punctuation">)</span><span class="token punctuation">.</span>## IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES# JUST COMMENT THE FOLLOWING LINE<span class="token punctuation">.</span># <span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span>#bind <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span># <span class="token class-name">Protected</span> mode is a layer of security protection<span class="token punctuation">,</span> in order <span class="token keyword">to</span> <span class="token namespace">avoid</span> that# <span class="token class-name">Redis</span> instances left <span class="token keyword">open</span> <span class="token namespace">on</span> the internet are accessed and exploited<span class="token punctuation">.</span>## <span class="token class-name">When</span> <span class="token keyword">protected</span> mode is on and <span class="token keyword">if</span><span class="token operator">:</span>## <span class="token number">1</span><span class="token punctuation">)</span> <span class="token class-name">The</span> server is not binding explicitly <span class="token keyword">to</span> <span class="token namespace">a</span> set of addresses using the#    <span class="token string">"bind"</span> directive<span class="token punctuation">.</span># <span class="token number">2</span><span class="token punctuation">)</span> <span class="token class-name">No</span> password is configured<span class="token punctuation">.</span>## <span class="token class-name">The</span> server only accepts connections from clients connecting from the# <span class="token class-name">IPv4</span> and <span class="token class-name">IPv6</span> loopback addresses <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> and <span class="token operator">::</span><span class="token number">1</span><span class="token punctuation">,</span> and from <span class="token class-name">Unix</span> domain# sockets<span class="token punctuation">.</span>## <span class="token class-name">By</span> <span class="token keyword">default</span> <span class="token keyword">protected</span> mode is enabled<span class="token punctuation">.</span> <span class="token class-name">You</span> should disable it only <span class="token keyword">if</span># you are sure you want clients from other hosts <span class="token keyword">to</span> <span class="token namespace">connect</span> <span class="token keyword">to</span> <span class="token class-name">Redis</span># even <span class="token keyword">if</span> no authentication is configured<span class="token punctuation">,</span> nor a specific set of interfaces# are explicitly listed using the <span class="token string">"bind"</span> directive<span class="token punctuation">.</span><span class="token keyword">protected</span><span class="token operator">-</span>mode yes# <span class="token class-name">Accept</span> connections on the specified port<span class="token punctuation">,</span> <span class="token keyword">default</span> is <span class="token number">6379</span> <span class="token punctuation">(</span>IANA #<span class="token number">815344</span><span class="token punctuation">)</span><span class="token punctuation">.</span># <span class="token class-name">If</span> port <span class="token number">0</span> is specified <span class="token class-name">Redis</span> will not listen on a TCP socket<span class="token punctuation">.</span>port <span class="token number">6379</span># <span class="token class-name">TCP</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> backlog<span class="token punctuation">.</span>## <span class="token class-name">In</span> high requests<span class="token operator">-</span>per<span class="token operator">-</span>second environments you need an high backlog in order# <span class="token keyword">to</span> <span class="token namespace">avoid</span> slow clients connections issues<span class="token punctuation">.</span> <span class="token class-name">Note</span> that the <span class="token class-name">Linux</span> kernel# will silently truncate it <span class="token keyword">to</span> <span class="token namespace">the</span> value of <span class="token operator">/</span>proc<span class="token operator">/</span>sys<span class="token operator">/</span>net<span class="token operator">/</span>core<span class="token operator">/</span>somaxconn so# make sure <span class="token keyword">to</span> <span class="token namespace">raise</span> both the value of somaxconn and tcp_max_syn_backlog# in order <span class="token keyword">to</span> <span class="token namespace">get</span> the desired effect<span class="token punctuation">.</span>tcp<span class="token operator">-</span>backlog <span class="token number">511</span># <span class="token class-name">Unix</span> socket<span class="token punctuation">.</span>## <span class="token class-name">Specify</span> the path <span class="token keyword">for</span> the <span class="token class-name">Unix</span> socket that will be used <span class="token keyword">to</span> <span class="token namespace">listen</span> <span class="token keyword">for</span># incoming connections<span class="token punctuation">.</span> <span class="token class-name">There</span> is no <span class="token keyword">default</span><span class="token punctuation">,</span> so <span class="token class-name">Redis</span> will not listen# on a unix socket when not specified<span class="token punctuation">.</span>## unixsocket <span class="token operator">/</span>tmp<span class="token operator">/</span>redis<span class="token punctuation">.</span>sock# unixsocketperm <span class="token number">700</span># <span class="token class-name">Close</span> the connection after a client is idle <span class="token keyword">for</span> <span class="token class-name">N</span> seconds <span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">to</span> <span class="token namespace">disable</span><span class="token punctuation">)</span>timeout <span class="token number">0</span># TCP keepalive<span class="token punctuation">.</span>## <span class="token class-name">If</span> non<span class="token operator">-</span>zero<span class="token punctuation">,</span> use SO_KEEPALIVE <span class="token keyword">to</span> <span class="token namespace">send</span> TCP <span class="token class-name">ACKs</span> <span class="token keyword">to</span> <span class="token namespace">clients</span> in absence# of communication<span class="token punctuation">.</span> <span class="token class-name">This</span> is useful <span class="token keyword">for</span> two reasons<span class="token operator">:</span>## <span class="token number">1</span><span class="token punctuation">)</span> <span class="token class-name">Detect</span> dead peers<span class="token punctuation">.</span># <span class="token number">2</span><span class="token punctuation">)</span> <span class="token class-name">Take</span> the connection alive from the point of view of network#    equipment in the middle<span class="token punctuation">.</span>## <span class="token class-name">On</span> <span class="token class-name">Linux</span><span class="token punctuation">,</span> the specified value <span class="token punctuation">(</span>in seconds<span class="token punctuation">)</span> is the period used <span class="token keyword">to</span> <span class="token namespace">send</span> <span class="token class-name">ACKs</span><span class="token punctuation">.</span># <span class="token class-name">Note</span> that <span class="token keyword">to</span> <span class="token namespace">close</span> the connection the <span class="token keyword">double</span> of the time is needed<span class="token punctuation">.</span># <span class="token class-name">On</span> other kernels the period depends on the kernel configuration<span class="token punctuation">.</span>## <span class="token class-name">A</span> reasonable value <span class="token keyword">for</span> <span class="token keyword">this</span> option is <span class="token number">300</span> seconds<span class="token punctuation">,</span> which is the <span class="token keyword">new</span># <span class="token class-name">Redis</span> <span class="token keyword">default</span> starting <span class="token keyword">with</span> <span class="token class-name">Redis</span> <span class="token number">3.2</span><span class="token number">.1</span><span class="token punctuation">.</span>tcp<span class="token operator">-</span>keepalive <span class="token number">300</span>################################# TLS<span class="token operator">/</span>SSL ###################################### <span class="token class-name">By</span> <span class="token keyword">default</span><span class="token punctuation">,</span> TLS<span class="token operator">/</span>SSL is disabled<span class="token punctuation">.</span> <span class="token class-name">To</span> enable it<span class="token punctuation">,</span> the <span class="token string">"tls-port"</span> configuration# directive can be used <span class="token keyword">to</span> <span class="token namespace">define</span> TLS<span class="token operator">-</span>listening ports<span class="token punctuation">.</span> <span class="token class-name">To</span> enable TLS on the# <span class="token keyword">default</span> port<span class="token punctuation">,</span> use<span class="token operator">:</span>## port <span class="token number">0</span># tls<span class="token operator">-</span>port <span class="token number">6379</span># <span class="token class-name">Configure</span> a <span class="token class-name">X</span><span class="token number">.509</span> certificate and <span class="token keyword">private</span> key <span class="token keyword">to</span> <span class="token namespace">use</span> <span class="token keyword">for</span> authenticating the# server <span class="token keyword">to</span> <span class="token namespace">connected</span> clients<span class="token punctuation">,</span> masters or cluster peers<span class="token punctuation">.</span>  <span class="token class-name">These</span> files should be# PEM formatted<span class="token punctuation">.</span>## tls<span class="token operator">-</span>cert<span class="token operator">-</span>file redis<span class="token punctuation">.</span>crt # tls<span class="token operator">-</span>key<span class="token operator">-</span>file redis<span class="token punctuation">.</span>key# <span class="token class-name">Configure</span> a DH parameters file <span class="token keyword">to</span> <span class="token namespace">enable</span> <span class="token class-name">Diffie</span><span class="token operator">-</span><span class="token class-name">Hellman</span> <span class="token punctuation">(</span>DH<span class="token punctuation">)</span> key exchange<span class="token operator">:</span>## tls<span class="token operator">-</span>dh<span class="token operator">-</span>params<span class="token operator">-</span>file redis<span class="token punctuation">.</span>dh# <span class="token class-name">Configure</span> a <span class="token class-name">CA</span> <span class="token function">certificate</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> bundle or directory <span class="token keyword">to</span> <span class="token namespace">authenticate</span> TLS<span class="token operator">/</span>SSL# clients and peers<span class="token punctuation">.</span>  <span class="token class-name">Redis</span> <span class="token keyword">requires</span> <span class="token namespace">an</span> explicit configuration of at least one# of these<span class="token punctuation">,</span> and will not implicitly use the system wide configuration<span class="token punctuation">.</span>## tls<span class="token operator">-</span>ca<span class="token operator">-</span>cert<span class="token operator">-</span>file ca<span class="token punctuation">.</span>crt# tls<span class="token operator">-</span>ca<span class="token operator">-</span>cert<span class="token operator">-</span>dir <span class="token operator">/</span>etc<span class="token operator">/</span>ssl<span class="token operator">/</span>certs# <span class="token class-name">By</span> <span class="token keyword">default</span><span class="token punctuation">,</span> clients <span class="token punctuation">(</span>including replica servers<span class="token punctuation">)</span> on a TLS port are required# <span class="token keyword">to</span> <span class="token namespace">authenticate</span> using valid client side certificates<span class="token punctuation">.</span>## <span class="token class-name">If</span> <span class="token string">"no"</span> is specified<span class="token punctuation">,</span> client certificates are not required and not accepted<span class="token punctuation">.</span># <span class="token class-name">If</span> <span class="token string">"optional"</span> is specified<span class="token punctuation">,</span> client certificates are accepted and must be# valid <span class="token keyword">if</span> provided<span class="token punctuation">,</span> but are not required<span class="token punctuation">.</span>## tls<span class="token operator">-</span>auth<span class="token operator">-</span>clients no# tls<span class="token operator">-</span>auth<span class="token operator">-</span>clients optional# <span class="token class-name">By</span> <span class="token keyword">default</span><span class="token punctuation">,</span> a <span class="token class-name">Redis</span> replica does not attempt <span class="token keyword">to</span> <span class="token namespace">establish</span> a TLS connection# <span class="token keyword">with</span> <span class="token namespace">its</span> master<span class="token punctuation">.</span>## <span class="token class-name">Use</span> the following directive <span class="token keyword">to</span> <span class="token namespace">enable</span> TLS on replication links<span class="token punctuation">.</span>## tls<span class="token operator">-</span>replication yes# <span class="token class-name">By</span> <span class="token keyword">default</span><span class="token punctuation">,</span> the <span class="token class-name">Redis</span> <span class="token class-name">Cluster</span> bus <span class="token keyword">uses</span> <span class="token namespace">a</span> plain TCP connection<span class="token punctuation">.</span> <span class="token class-name">To</span> enable# TLS <span class="token keyword">for</span> the bus protocol<span class="token punctuation">,</span> use the following directive<span class="token operator">:</span>## tls<span class="token operator">-</span>cluster yes# <span class="token class-name">Explicitly</span> specify TLS versions <span class="token keyword">to</span> <span class="token namespace">support<span class="token punctuation">.</span></span> <span class="token class-name">Allowed</span> values are <span class="token keyword">case</span> insensitive# and include <span class="token string">"TLSv1"</span><span class="token punctuation">,</span> <span class="token string">"TLSv1.1"</span><span class="token punctuation">,</span> <span class="token string">"TLSv1.2"</span><span class="token punctuation">,</span> <span class="token string">"TLSv1.3"</span> <span class="token punctuation">(</span><span class="token class-name">OpenSSL</span> <span class="token operator">&gt;=</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token punctuation">)</span> or# any combination<span class="token punctuation">.</span> <span class="token class-name">To</span> enable only <span class="token class-name">TLSv1</span><span class="token number">.2</span> and <span class="token class-name">TLSv1</span><span class="token number">.3</span><span class="token punctuation">,</span> use<span class="token operator">:</span>## tls<span class="token operator">-</span>protocols <span class="token string">"TLSv1.2 TLSv1.3"</span># <span class="token class-name">Configure</span> allowed ciphers<span class="token punctuation">.</span>  <span class="token class-name">See</span> the <span class="token function">ciphers</span><span class="token punctuation">(</span><span class="token number">1</span>ssl<span class="token punctuation">)</span> manpage <span class="token keyword">for</span> more information# about the syntax of <span class="token keyword">this</span> string<span class="token punctuation">.</span>## <span class="token class-name">Note</span><span class="token operator">:</span> <span class="token keyword">this</span> configuration applies only <span class="token keyword">to</span> <span class="token operator">&lt;=</span> <span class="token class-name">TLSv1</span><span class="token number">.2</span><span class="token punctuation">.</span>## tls<span class="token operator">-</span>ciphers DEFAULT<span class="token operator">:</span><span class="token operator">!</span>MEDIUM# <span class="token class-name">Configure</span> allowed <span class="token class-name">TLSv1</span><span class="token number">.3</span> ciphersuites<span class="token punctuation">.</span>  <span class="token class-name">See</span> the <span class="token function">ciphers</span><span class="token punctuation">(</span><span class="token number">1</span>ssl<span class="token punctuation">)</span> manpage <span class="token keyword">for</span> more# information about the syntax of <span class="token keyword">this</span> string<span class="token punctuation">,</span> and specifically <span class="token keyword">for</span> <span class="token class-name">TLSv1</span><span class="token number">.3</span># ciphersuites<span class="token punctuation">.</span>## tls<span class="token operator">-</span>ciphersuites TLS_CHACHA20_POLY1305_SHA256# <span class="token class-name">When</span> choosing a cipher<span class="token punctuation">,</span> use the server's preference instead of the client# preference<span class="token punctuation">.</span> <span class="token class-name">By</span> <span class="token keyword">default</span><span class="token punctuation">,</span> the server follows the client's preference<span class="token punctuation">.</span>## tls<span class="token operator">-</span>prefer<span class="token operator">-</span>server<span class="token operator">-</span>ciphers yes# <span class="token class-name">By</span> <span class="token keyword">default</span><span class="token punctuation">,</span> TLS session caching is enabled <span class="token keyword">to</span> <span class="token namespace">allow</span> faster and less expensive# reconnections by clients that support it<span class="token punctuation">.</span> <span class="token class-name">Use</span> the following directive <span class="token keyword">to</span> <span class="token namespace">disable</span># caching<span class="token punctuation">.</span>## tls<span class="token operator">-</span>session<span class="token operator">-</span>caching no# <span class="token class-name">Change</span> the <span class="token keyword">default</span> number of TLS sessions cached<span class="token punctuation">.</span> <span class="token class-name">A</span> zero value sets the cache# <span class="token keyword">to</span> <span class="token namespace">unlimited</span> size<span class="token punctuation">.</span> <span class="token class-name">The</span> <span class="token keyword">default</span> size is <span class="token number">20480.</span>## tls<span class="token operator">-</span>session<span class="token operator">-</span>cache<span class="token operator">-</span>size <span class="token number">5000</span># <span class="token class-name">Change</span> the <span class="token keyword">default</span> timeout of cached TLS sessions<span class="token punctuation">.</span> <span class="token class-name">The</span> <span class="token keyword">default</span> timeout is <span class="token number">300</span># seconds<span class="token punctuation">.</span>## tls<span class="token operator">-</span>session<span class="token operator">-</span>cache<span class="token operator">-</span>timeout <span class="token number">60</span>################################# GENERAL ###################################### <span class="token class-name">By</span> <span class="token keyword">default</span> <span class="token class-name">Redis</span> does not run as a daemon<span class="token punctuation">.</span> <span class="token class-name">Use</span> <span class="token string">'yes'</span> <span class="token keyword">if</span> you need it<span class="token punctuation">.</span># <span class="token class-name">Note</span> that <span class="token class-name">Redis</span> will write a pid file in <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>run<span class="token operator">/</span>redis<span class="token punctuation">.</span>pid when daemonized<span class="token punctuation">.</span>daemonize no# <span class="token class-name">If</span> you run <span class="token class-name">Redis</span> from upstart or systemd<span class="token punctuation">,</span> <span class="token class-name">Redis</span> can interact <span class="token keyword">with</span> <span class="token namespace">your</span># supervision tree<span class="token punctuation">.</span> <span class="token class-name">Options</span><span class="token operator">:</span>#   supervised no      <span class="token operator">-</span> no supervision interaction#   supervised upstart <span class="token operator">-</span> signal upstart by putting <span class="token class-name">Redis</span> into SIGSTOP mode#   supervised systemd <span class="token operator">-</span> signal systemd by writing READY<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">to</span> $NOTIFY_SOCKET#   supervised auto    <span class="token operator">-</span> detect upstart or systemd method based on#                        UPSTART_JOB or NOTIFY_SOCKET environment variables# <span class="token class-name">Note</span><span class="token operator">:</span> these supervision methods only signal <span class="token string">"process is ready."</span>#       <span class="token class-name">They</span> <span class="token keyword">do</span> not enable continuous liveness pings back <span class="token keyword">to</span> <span class="token namespace">your</span> supervisor<span class="token punctuation">.</span>supervised no# <span class="token class-name">If</span> a pid file is specified<span class="token punctuation">,</span> <span class="token class-name">Redis</span> writes it where specified at startup# and removes it at exit<span class="token punctuation">.</span>## <span class="token class-name">When</span> the server runs non daemonized<span class="token punctuation">,</span> no pid file is created <span class="token keyword">if</span> none is# specified in the configuration<span class="token punctuation">.</span> <span class="token class-name">When</span> the server is daemonized<span class="token punctuation">,</span> the pid file# is used even <span class="token keyword">if</span> not specified<span class="token punctuation">,</span> defaulting <span class="token keyword">to</span> <span class="token string">"/var/run/redis.pid"</span><span class="token punctuation">.</span>## <span class="token class-name">Creating</span> a pid file is best effort<span class="token operator">:</span> <span class="token keyword">if</span> <span class="token class-name">Redis</span> is not able <span class="token keyword">to</span> <span class="token namespace">create</span> it# nothing bad happens<span class="token punctuation">,</span> the server will start and run normally<span class="token punctuation">.</span>pidfile <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>run<span class="token operator">/</span>redis_6379<span class="token punctuation">.</span>pid# <span class="token class-name">Specify</span> the server verbosity level<span class="token punctuation">.</span># <span class="token class-name">This</span> can be one of<span class="token operator">:</span># debug <span class="token punctuation">(</span>a lot of information<span class="token punctuation">,</span> useful <span class="token keyword">for</span> development<span class="token operator">/</span>testing<span class="token punctuation">)</span># verbose <span class="token punctuation">(</span>many rarely useful info<span class="token punctuation">,</span> but not a mess like the debug level<span class="token punctuation">)</span># notice <span class="token punctuation">(</span>moderately verbose<span class="token punctuation">,</span> what you want in production probably<span class="token punctuation">)</span># warning <span class="token punctuation">(</span>only very important <span class="token operator">/</span> critical messages are logged<span class="token punctuation">)</span>loglevel notice# <span class="token class-name">Specify</span> the log file name<span class="token punctuation">.</span> <span class="token class-name">Also</span> the empty string can be used <span class="token keyword">to</span> <span class="token namespace">force</span># <span class="token class-name">Redis</span> <span class="token keyword">to</span> <span class="token namespace">log</span> on the standard output<span class="token punctuation">.</span> <span class="token class-name">Note</span> that <span class="token keyword">if</span> you use standard# output <span class="token keyword">for</span> logging but daemonize<span class="token punctuation">,</span> logs will be sent <span class="token keyword">to</span> <span class="token operator">/</span>dev<span class="token operator">/</span><span class="token keyword">null</span>logfile <span class="token string">""</span># <span class="token class-name">To</span> enable logging <span class="token keyword">to</span> <span class="token namespace">the</span> system logger<span class="token punctuation">,</span> just set <span class="token string">'syslog-enabled'</span> <span class="token keyword">to</span> <span class="token namespace">yes</span><span class="token punctuation">,</span># and optionally update the other syslog parameters <span class="token keyword">to</span> <span class="token namespace">suit</span> your needs<span class="token punctuation">.</span># syslog<span class="token operator">-</span>enabled no# <span class="token class-name">Specify</span> the syslog identity<span class="token punctuation">.</span># syslog<span class="token operator">-</span>ident redis# <span class="token class-name">Specify</span> the syslog facility<span class="token punctuation">.</span> <span class="token class-name">Must</span> be USER or between LOCAL0<span class="token operator">-</span>LOCAL7<span class="token punctuation">.</span># syslog<span class="token operator">-</span>facility local0# <span class="token class-name">Set</span> the number of databases<span class="token punctuation">.</span> <span class="token class-name">The</span> <span class="token keyword">default</span> database is <span class="token class-name">DB</span> <span class="token number">0</span><span class="token punctuation">,</span> you can select# a different one on a per<span class="token operator">-</span>connection basis using SELECT <span class="token generics"><span class="token punctuation">&lt;</span>dbid<span class="token punctuation">&gt;</span></span> where# dbid is a number between <span class="token number">0</span> and <span class="token string">'databases'</span><span class="token operator">-</span><span class="token number">1</span>databases <span class="token number">16</span># <span class="token class-name">By</span> <span class="token keyword">default</span> <span class="token class-name">Redis</span> shows an ASCII art logo only when started <span class="token keyword">to</span> <span class="token namespace">log</span> <span class="token keyword">to</span> <span class="token namespace">the</span># standard output and <span class="token keyword">if</span> the standard output is a TTY<span class="token punctuation">.</span> <span class="token class-name">Basically</span> <span class="token keyword">this</span> means# that normally a logo is displayed only in interactive sessions<span class="token punctuation">.</span>## <span class="token class-name">However</span> it is possible <span class="token keyword">to</span> <span class="token namespace">force</span> the pre<span class="token operator">-</span><span class="token number">4.0</span> behavior and always show a# ASCII art logo in startup logs by setting the following option <span class="token keyword">to</span> <span class="token namespace">yes<span class="token punctuation">.</span></span>always<span class="token operator">-</span>show<span class="token operator">-</span>logo yes################################ SNAPSHOTTING  ################################## <span class="token class-name">Save</span> the DB on disk<span class="token operator">:</span>##   save <span class="token generics"><span class="token punctuation">&lt;</span>seconds<span class="token punctuation">&gt;</span></span> <span class="token generics"><span class="token punctuation">&lt;</span>changes<span class="token punctuation">&gt;</span></span>##   <span class="token class-name">Will</span> save the DB <span class="token keyword">if</span> both the given number of seconds and the given#   number of write operations against the DB occurred<span class="token punctuation">.</span>##   <span class="token class-name">In</span> the example below the behaviour will be <span class="token keyword">to</span> <span class="token namespace">save</span><span class="token operator">:</span>#   after <span class="token number">900</span> sec <span class="token punctuation">(</span><span class="token number">15</span> min<span class="token punctuation">)</span> <span class="token keyword">if</span> at least <span class="token number">1</span> key changed#   after <span class="token number">300</span> sec <span class="token punctuation">(</span><span class="token number">5</span> min<span class="token punctuation">)</span> <span class="token keyword">if</span> at least <span class="token number">10</span> keys changed#   after <span class="token number">60</span> sec <span class="token keyword">if</span> at least <span class="token number">10000</span> keys changed##   <span class="token class-name">Note</span><span class="token operator">:</span> you can disable saving completely by commenting out all <span class="token string">"save"</span> lines<span class="token punctuation">.</span>##   <span class="token class-name">It</span> is also possible <span class="token keyword">to</span> <span class="token namespace">remove</span> all the previously configured save#   points by adding a save directive <span class="token keyword">with</span> <span class="token namespace">a</span> single empty string argument#   like in the following example<span class="token operator">:</span>##   save <span class="token string">""</span>save <span class="token number">900</span> <span class="token number">1</span>save <span class="token number">300</span> <span class="token number">10</span>save <span class="token number">60</span> <span class="token number">10000</span># <span class="token class-name">By</span> <span class="token keyword">default</span> <span class="token class-name">Redis</span> will stop accepting writes <span class="token keyword">if</span> RDB snapshots are enabled# <span class="token punctuation">(</span>at least one save point<span class="token punctuation">)</span> and the latest background save failed<span class="token punctuation">.</span># <span class="token class-name">This</span> will make the user aware <span class="token punctuation">(</span>in a hard way<span class="token punctuation">)</span> that data is not persisting# on disk properly<span class="token punctuation">,</span> otherwise chances are that no one will notice and some# disaster will happen<span class="token punctuation">.</span>## <span class="token class-name">If</span> the background saving process will start working again <span class="token class-name">Redis</span> will# automatically allow writes again<span class="token punctuation">.</span>## <span class="token class-name">However</span> <span class="token keyword">if</span> you have setup your proper monitoring of the <span class="token class-name">Redis</span> server# and persistence<span class="token punctuation">,</span> you may want <span class="token keyword">to</span> <span class="token namespace">disable</span> <span class="token keyword">this</span> feature so that <span class="token class-name">Redis</span> will# <span class="token keyword">continue</span> <span class="token keyword">to</span> <span class="token namespace">work</span> as usual even <span class="token keyword">if</span> there are problems <span class="token keyword">with</span> <span class="token namespace">disk</span><span class="token punctuation">,</span># permissions<span class="token punctuation">,</span> and so forth<span class="token punctuation">.</span>stop<span class="token operator">-</span>writes<span class="token operator">-</span>on<span class="token operator">-</span>bgsave<span class="token operator">-</span>error yes# <span class="token class-name">Compress</span> string objects using LZF when dump <span class="token punctuation">.</span>rdb databases<span class="token operator">?</span># <span class="token class-name">For</span> <span class="token keyword">default</span> that<span class="token string">'s set to '</span>yes<span class="token string">' as it'</span>s almost always a win<span class="token punctuation">.</span># <span class="token class-name">If</span> you want <span class="token keyword">to</span> <span class="token namespace">save</span> some CPU in the saving child set it <span class="token keyword">to</span> <span class="token string">'no'</span> but# the dataset will likely be bigger <span class="token keyword">if</span> you have compressible values or keys<span class="token punctuation">.</span>rdbcompression yes# <span class="token class-name">Since</span> version <span class="token number">5</span> of RDB a CRC64 checksum is placed at the end of the file<span class="token punctuation">.</span># <span class="token class-name">This</span> makes the format more resistant <span class="token keyword">to</span> <span class="token namespace">corruption</span> but there is a performance# hit <span class="token keyword">to</span> <span class="token namespace">pay</span> <span class="token punctuation">(</span>around <span class="token number">10</span><span class="token operator">%</span><span class="token punctuation">)</span> when saving and loading <span class="token class-name">RDB</span> files<span class="token punctuation">,</span> so you can disable it# <span class="token keyword">for</span> maximum performances<span class="token punctuation">.</span>## RDB files created <span class="token keyword">with</span> <span class="token namespace">checksum</span> disabled have a checksum of zero that will# tell the loading code <span class="token keyword">to</span> <span class="token namespace">skip</span> the check<span class="token punctuation">.</span>rdbchecksum yes# <span class="token class-name">The</span> filename where <span class="token keyword">to</span> <span class="token namespace">dump</span> the DBdbfilename dump<span class="token punctuation">.</span>rdb# <span class="token class-name">Remove</span> RDB files used by replication in instances without persistence# enabled<span class="token punctuation">.</span> <span class="token class-name">By</span> <span class="token keyword">default</span> <span class="token keyword">this</span> option is disabled<span class="token punctuation">,</span> however there are environments# where <span class="token keyword">for</span> regulations or other security concerns<span class="token punctuation">,</span> RDB files persisted on# disk by masters in order <span class="token keyword">to</span> <span class="token namespace">feed</span> replicas<span class="token punctuation">,</span> or stored on disk by replicas# in order <span class="token keyword">to</span> <span class="token namespace">load</span> them <span class="token keyword">for</span> the initial synchronization<span class="token punctuation">,</span> should be deleted# ASAP<span class="token punctuation">.</span> <span class="token class-name">Note</span> that <span class="token keyword">this</span> option ONLY WORKS in instances that have both AOF# and RDB persistence disabled<span class="token punctuation">,</span> otherwise is completely ignored<span class="token punctuation">.</span>## <span class="token class-name">An</span> alternative <span class="token punctuation">(</span>and sometimes better<span class="token punctuation">)</span> way <span class="token keyword">to</span> <span class="token namespace">obtain</span> the same effect is# <span class="token keyword">to</span> <span class="token namespace">use</span> diskless replication on both master and replicas instances<span class="token punctuation">.</span> <span class="token class-name">However</span># in the <span class="token keyword">case</span> of replicas<span class="token punctuation">,</span> diskless is not always an option<span class="token punctuation">.</span>rdb<span class="token operator">-</span>del<span class="token operator">-</span>sync<span class="token operator">-</span>files no# <span class="token class-name">The</span> working directory<span class="token punctuation">.</span>## <span class="token class-name">The</span> DB will be written inside <span class="token keyword">this</span> directory<span class="token punctuation">,</span> <span class="token keyword">with</span> <span class="token namespace">the</span> filename specified# above using the <span class="token string">'dbfilename'</span> configuration directive<span class="token punctuation">.</span>## <span class="token class-name">The</span> <span class="token class-name">Append</span> <span class="token class-name">Only</span> <span class="token class-name">File</span> will also be created inside <span class="token keyword">this</span> directory<span class="token punctuation">.</span>## <span class="token class-name">Note</span> that you must specify a directory here<span class="token punctuation">,</span> not a file name<span class="token punctuation">.</span>dir <span class="token punctuation">.</span>/################################# REPLICATION ################################## <span class="token class-name">Master</span><span class="token operator">-</span><span class="token class-name">Replica</span> replication<span class="token punctuation">.</span> <span class="token class-name">Use</span> replicaof <span class="token keyword">to</span> <span class="token namespace">make</span> a <span class="token class-name">Redis</span> instance a copy of# another <span class="token class-name">Redis</span> server<span class="token punctuation">.</span> <span class="token class-name">A</span> few things <span class="token keyword">to</span> <span class="token namespace">understand</span> ASAP about <span class="token class-name">Redis</span> replication<span class="token punctuation">.</span>##   <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>      <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>#   <span class="token operator">|</span>      <span class="token class-name">Master</span>      <span class="token operator">|</span> <span class="token operator">--</span><span class="token operator">-&gt;</span> <span class="token operator">|</span>    <span class="token class-name">Replica</span>    <span class="token operator">|</span>#   <span class="token operator">|</span> <span class="token punctuation">(</span>receive writes<span class="token punctuation">)</span> <span class="token operator">|</span>      <span class="token operator">|</span>  <span class="token punctuation">(</span>exact copy<span class="token punctuation">)</span> <span class="token operator">|</span>#   <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>      <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>## <span class="token number">1</span><span class="token punctuation">)</span> <span class="token class-name">Redis</span> replication is asynchronous<span class="token punctuation">,</span> but you can configure a master <span class="token keyword">to</span>#    stop accepting writes <span class="token keyword">if</span> it appears <span class="token keyword">to</span> <span class="token namespace">be</span> not connected <span class="token keyword">with</span> <span class="token namespace">at</span> least#    a given number of replicas<span class="token punctuation">.</span># <span class="token number">2</span><span class="token punctuation">)</span> <span class="token class-name">Redis</span> replicas are able <span class="token keyword">to</span> <span class="token namespace">perform</span> a partial resynchronization <span class="token keyword">with</span> <span class="token namespace">the</span>#    master <span class="token keyword">if</span> the replication link is lost <span class="token keyword">for</span> a relatively small amount of#    time<span class="token punctuation">.</span> <span class="token class-name">You</span> may want <span class="token keyword">to</span> <span class="token namespace">configure</span> the replication backlog size <span class="token punctuation">(</span>see the next#    sections of <span class="token keyword">this</span> file<span class="token punctuation">)</span> <span class="token keyword">with</span> <span class="token namespace">a</span> sensible value depending on your needs<span class="token punctuation">.</span># <span class="token number">3</span><span class="token punctuation">)</span> <span class="token class-name">Replication</span> is automatic and does not need user intervention<span class="token punctuation">.</span> <span class="token class-name">After</span> a#    network partition replicas automatically <span class="token keyword">try</span> <span class="token keyword">to</span> <span class="token namespace">reconnect</span> <span class="token keyword">to</span> <span class="token namespace">masters</span>#    and resynchronize <span class="token keyword">with</span> <span class="token namespace">them<span class="token punctuation">.</span></span>## replicaof <span class="token generics"><span class="token punctuation">&lt;</span>masterip<span class="token punctuation">&gt;</span></span> <span class="token generics"><span class="token punctuation">&lt;</span>masterport<span class="token punctuation">&gt;</span></span># <span class="token class-name">If</span> the master is password <span class="token keyword">protected</span> <span class="token punctuation">(</span>using the <span class="token string">"requirepass"</span> configuration# directive below<span class="token punctuation">)</span> it is possible <span class="token keyword">to</span> <span class="token namespace">tell</span> the replica <span class="token keyword">to</span> <span class="token namespace">authenticate</span> before# starting the replication synchronization process<span class="token punctuation">,</span> otherwise the master will# refuse the replica request<span class="token punctuation">.</span>## masterauth <span class="token operator">&lt;</span>master<span class="token operator">-</span>password<span class="token operator">&gt;</span>## <span class="token class-name">However</span> <span class="token keyword">this</span> is not enough <span class="token keyword">if</span> you are using <span class="token class-name">Redis</span> <span class="token class-name">ACLs</span> <span class="token punctuation">(</span><span class="token keyword">for</span> <span class="token class-name">Redis</span> version# <span class="token number">6</span> or greater<span class="token punctuation">)</span><span class="token punctuation">,</span> and the <span class="token keyword">default</span> user is not capable of running the PSYNC# command and<span class="token operator">/</span>or other commands needed <span class="token keyword">for</span> replication<span class="token punctuation">.</span> <span class="token class-name">In</span> <span class="token keyword">this</span> <span class="token keyword">case</span> it's# better <span class="token keyword">to</span> <span class="token namespace">configure</span> a special user <span class="token keyword">to</span> <span class="token namespace">use</span> <span class="token keyword">with</span> <span class="token namespace">replication</span><span class="token punctuation">,</span> and specify the# masteruser configuration as such<span class="token operator">:</span>## masteruser <span class="token generics"><span class="token punctuation">&lt;</span>username<span class="token punctuation">&gt;</span></span>## <span class="token class-name">When</span> masteruser is specified<span class="token punctuation">,</span> the replica will authenticate against its# master using the <span class="token keyword">new</span> AUTH form<span class="token operator">:</span> AUTH <span class="token generics"><span class="token punctuation">&lt;</span>username<span class="token punctuation">&gt;</span></span> <span class="token generics"><span class="token punctuation">&lt;</span>password<span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span># <span class="token class-name">When</span> a replica loses its connection <span class="token keyword">with</span> <span class="token namespace">the</span> master<span class="token punctuation">,</span> or when the replication# is still in progress<span class="token punctuation">,</span> the replica can act in two different ways<span class="token operator">:</span>## <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">if</span> replica<span class="token operator">-</span>serve<span class="token operator">-</span>stale<span class="token operator">-</span>data is set <span class="token keyword">to</span> <span class="token string">'yes'</span> <span class="token punctuation">(</span>the <span class="token keyword">default</span><span class="token punctuation">)</span> the replica will#    still reply <span class="token keyword">to</span> <span class="token namespace">client</span> requests<span class="token punctuation">,</span> possibly <span class="token keyword">with</span> <span class="token namespace">out</span> of date data<span class="token punctuation">,</span> or the#    data set may just be empty <span class="token keyword">if</span> <span class="token keyword">this</span> is the first synchronization<span class="token punctuation">.</span>## <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">if</span> replica<span class="token operator">-</span>serve<span class="token operator">-</span>stale<span class="token operator">-</span>data is set <span class="token keyword">to</span> <span class="token string">'no'</span> the replica will reply <span class="token keyword">with</span>#    an error <span class="token string">"SYNC with master in progress"</span> <span class="token keyword">to</span> <span class="token namespace">all</span> the kind of commands#    but <span class="token keyword">to</span> INFO<span class="token punctuation">,</span> replicaOF<span class="token punctuation">,</span> AUTH<span class="token punctuation">,</span> PING<span class="token punctuation">,</span> SHUTDOWN<span class="token punctuation">,</span> REPLCONF<span class="token punctuation">,</span> ROLE<span class="token punctuation">,</span> CONFIG<span class="token punctuation">,</span>#    SUBSCRIBE<span class="token punctuation">,</span> UNSUBSCRIBE<span class="token punctuation">,</span> PSUBSCRIBE<span class="token punctuation">,</span> PUNSUBSCRIBE<span class="token punctuation">,</span> PUBLISH<span class="token punctuation">,</span> PUBSUB<span class="token punctuation">,</span>#    COMMAND<span class="token punctuation">,</span> POST<span class="token punctuation">,</span> HOST<span class="token operator">:</span> and LATENCY<span class="token punctuation">.</span>#replica<span class="token operator">-</span>serve<span class="token operator">-</span>stale<span class="token operator">-</span>data yes# <span class="token class-name">You</span> can configure a replica instance <span class="token keyword">to</span> <span class="token namespace">accept</span> writes or not<span class="token punctuation">.</span> <span class="token class-name">Writing</span> against# a replica instance may be useful <span class="token keyword">to</span> <span class="token namespace">store</span> some ephemeral data <span class="token punctuation">(</span>because data# written on a replica will be easily deleted after resync <span class="token keyword">with</span> <span class="token namespace">the</span> master<span class="token punctuation">)</span> but# may also cause problems <span class="token keyword">if</span> clients are writing <span class="token keyword">to</span> <span class="token namespace">it</span> because of a# misconfiguration<span class="token punctuation">.</span>## <span class="token class-name">Since</span> <span class="token class-name">Redis</span> <span class="token number">2.6</span> by <span class="token keyword">default</span> replicas are read<span class="token operator">-</span>only<span class="token punctuation">.</span>## <span class="token class-name">Note</span><span class="token operator">:</span> read only replicas are not designed <span class="token keyword">to</span> <span class="token namespace">be</span> exposed <span class="token keyword">to</span> <span class="token namespace">untrusted</span> clients# on the internet<span class="token punctuation">.</span> <span class="token class-name">It</span>'s just a protection layer against misuse of the instance<span class="token punctuation">.</span># <span class="token class-name">Still</span> a read only replica <span class="token keyword">exports</span> <span class="token namespace">by</span> <span class="token keyword">default</span> all the administrative commands# such as CONFIG<span class="token punctuation">,</span> DEBUG<span class="token punctuation">,</span> and so forth<span class="token punctuation">.</span> <span class="token class-name">To</span> a limited extent you can improve# security of read only replicas using <span class="token string">'rename-command'</span> <span class="token keyword">to</span> <span class="token namespace">shadow</span> all the# administrative <span class="token operator">/</span> dangerous commands<span class="token punctuation">.</span>replica<span class="token operator">-</span>read<span class="token operator">-</span>only yes# <span class="token class-name">Replication</span> SYNC strategy<span class="token operator">:</span> disk or socket<span class="token punctuation">.</span>## <span class="token class-name">New</span> replicas and reconnecting replicas that are not able <span class="token keyword">to</span> <span class="token keyword">continue</span> the# replication process just receiving differences<span class="token punctuation">,</span> need <span class="token keyword">to</span> <span class="token keyword">do</span> what is called a# <span class="token string">"full synchronization"</span><span class="token punctuation">.</span> <span class="token class-name">An</span> RDB file is transmitted from the master <span class="token keyword">to</span> <span class="token namespace">the</span># replicas<span class="token punctuation">.</span>## <span class="token class-name">The</span> transmission can happen in two different ways<span class="token operator">:</span>## <span class="token number">1</span><span class="token punctuation">)</span> <span class="token class-name">Disk</span><span class="token operator">-</span>backed<span class="token operator">:</span> <span class="token class-name">The</span> <span class="token class-name">Redis</span> master creates a <span class="token keyword">new</span> process that writes the RDB#                 file on disk<span class="token punctuation">.</span> <span class="token class-name">Later</span> the file is transferred by the parent#                 process <span class="token keyword">to</span> <span class="token namespace">the</span> replicas incrementally<span class="token punctuation">.</span># <span class="token number">2</span><span class="token punctuation">)</span> <span class="token class-name">Diskless</span><span class="token operator">:</span> <span class="token class-name">The</span> <span class="token class-name">Redis</span> master creates a <span class="token keyword">new</span> process that directly writes the#              RDB file <span class="token keyword">to</span> <span class="token namespace">replica</span> sockets<span class="token punctuation">,</span> without touching the disk at all<span class="token punctuation">.</span>## <span class="token class-name">With</span> disk<span class="token operator">-</span>backed replication<span class="token punctuation">,</span> <span class="token keyword">while</span> the RDB file is generated<span class="token punctuation">,</span> more replicas# can be queued and served <span class="token keyword">with</span> <span class="token namespace">the</span> RDB file as soon as the current child# producing the RDB file finishes its work<span class="token punctuation">.</span> <span class="token class-name">With</span> diskless replication instead# once the transfer starts<span class="token punctuation">,</span> <span class="token keyword">new</span> replicas arriving will be queued and a <span class="token keyword">new</span># transfer will start when the current one terminates<span class="token punctuation">.</span>## <span class="token class-name">When</span> diskless replication is used<span class="token punctuation">,</span> the master waits a configurable amount of# time <span class="token punctuation">(</span>in seconds<span class="token punctuation">)</span> before starting the transfer in the hope that multiple# replicas will arrive and the transfer can be parallelized<span class="token punctuation">.</span>## <span class="token class-name">With</span> slow disks and fast <span class="token punctuation">(</span>large bandwidth<span class="token punctuation">)</span> networks<span class="token punctuation">,</span> diskless replication# works better<span class="token punctuation">.</span>repl<span class="token operator">-</span>diskless<span class="token operator">-</span>sync no# <span class="token class-name">When</span> diskless replication is enabled<span class="token punctuation">,</span> it is possible <span class="token keyword">to</span> <span class="token namespace">configure</span> the delay# the server waits in order <span class="token keyword">to</span> <span class="token namespace">spawn</span> the child that transfers the RDB via socket# <span class="token keyword">to</span> <span class="token namespace">the</span> replicas<span class="token punctuation">.</span>## <span class="token class-name">This</span> is important since once the transfer starts<span class="token punctuation">,</span> it is not possible <span class="token keyword">to</span> <span class="token namespace">serve</span># <span class="token keyword">new</span> replicas arriving<span class="token punctuation">,</span> that will be queued <span class="token keyword">for</span> the next <span class="token class-name">RDB</span> transfer<span class="token punctuation">,</span> so the# server waits a delay in order <span class="token keyword">to</span> <span class="token namespace">let</span> more replicas arrive<span class="token punctuation">.</span>## <span class="token class-name">The</span> delay is specified in seconds<span class="token punctuation">,</span> and by <span class="token keyword">default</span> is <span class="token number">5</span> seconds<span class="token punctuation">.</span> <span class="token class-name">To</span> disable# it entirely just set it <span class="token keyword">to</span> <span class="token number">0</span> seconds and the transfer will start ASAP<span class="token punctuation">.</span>repl<span class="token operator">-</span>diskless<span class="token operator">-</span>sync<span class="token operator">-</span>delay <span class="token number">5</span># <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span># WARNING<span class="token operator">:</span> RDB diskless load is experimental<span class="token punctuation">.</span> <span class="token class-name">Since</span> in <span class="token keyword">this</span> setup the replica# does not immediately store an RDB on disk<span class="token punctuation">,</span> it may cause data loss during# failovers<span class="token punctuation">.</span> RDB diskless load <span class="token operator">+</span> <span class="token class-name">Redis</span> modules not handling <span class="token class-name">I</span><span class="token operator">/</span><span class="token class-name">O</span> reads may also# cause <span class="token class-name">Redis</span> <span class="token keyword">to</span> <span class="token namespace">abort</span> in <span class="token keyword">case</span> of <span class="token class-name">I</span><span class="token operator">/</span><span class="token class-name">O</span> errors during the initial synchronization# stage <span class="token keyword">with</span> <span class="token namespace">the</span> master<span class="token punctuation">.</span> <span class="token class-name">Use</span> only <span class="token keyword">if</span> your <span class="token keyword">do</span> what you are doing<span class="token punctuation">.</span># <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>## <span class="token class-name">Replica</span> can load the RDB it reads from the replication link directly from the# socket<span class="token punctuation">,</span> or store the RDB <span class="token keyword">to</span> <span class="token namespace">a</span> file and read that file after it was completely# recived from the master<span class="token punctuation">.</span>## <span class="token class-name">In</span> many cases the disk is slower than the network<span class="token punctuation">,</span> and storing and loading# the RDB file may increase replication time <span class="token punctuation">(</span>and even increase the master's# <span class="token class-name">Copy</span> on <span class="token class-name">Write</span> memory and salve buffers<span class="token punctuation">)</span><span class="token punctuation">.</span># <span class="token class-name">However</span><span class="token punctuation">,</span> parsing the RDB file directly from the socket may mean that we have# <span class="token keyword">to</span> <span class="token namespace">flush</span> the contents of the current database before the full rdb was# received<span class="token punctuation">.</span> <span class="token class-name">For</span> <span class="token keyword">this</span> reason we have the following options<span class="token operator">:</span>## <span class="token string">"disabled"</span>    <span class="token operator">-</span> <span class="token class-name">Don</span>'t use diskless load <span class="token punctuation">(</span>store the rdb file <span class="token keyword">to</span> <span class="token namespace">the</span> disk first<span class="token punctuation">)</span># <span class="token string">"on-empty-db"</span> <span class="token operator">-</span> <span class="token class-name">Use</span> diskless load only when it is completely safe<span class="token punctuation">.</span># <span class="token string">"swapdb"</span>      <span class="token operator">-</span> <span class="token class-name">Keep</span> a copy of the current db contents in RAM <span class="token keyword">while</span> parsing#                 the data directly from the socket<span class="token punctuation">.</span> note that <span class="token keyword">this</span> <span class="token keyword">requires</span>#                 sufficient memory<span class="token punctuation">,</span> <span class="token keyword">if</span> you don't have it<span class="token punctuation">,</span> you risk an OOM kill<span class="token punctuation">.</span>repl<span class="token operator">-</span>diskless<span class="token operator">-</span>load disabled# <span class="token class-name">Replicas</span> send <span class="token class-name">PINGs</span> <span class="token keyword">to</span> <span class="token namespace">server</span> in a predefined interval<span class="token punctuation">.</span> <span class="token class-name">It</span>'s possible <span class="token keyword">to</span># change <span class="token keyword">this</span> interval <span class="token keyword">with</span> <span class="token namespace">the</span> repl_ping_replica_period option<span class="token punctuation">.</span> <span class="token class-name">The</span> <span class="token keyword">default</span># value is <span class="token number">10</span> seconds<span class="token punctuation">.</span>## repl<span class="token operator">-</span>ping<span class="token operator">-</span>replica<span class="token operator">-</span>period <span class="token number">10</span># <span class="token class-name">The</span> following option sets the replication timeout <span class="token keyword">for</span><span class="token operator">:</span>## <span class="token number">1</span><span class="token punctuation">)</span> <span class="token class-name">Bulk</span> transfer <span class="token class-name">I</span><span class="token operator">/</span><span class="token class-name">O</span> during SYNC<span class="token punctuation">,</span> from the point of view of replica<span class="token punctuation">.</span># <span class="token number">2</span><span class="token punctuation">)</span> <span class="token class-name">Master</span> timeout from the point of view of replicas <span class="token punctuation">(</span>data<span class="token punctuation">,</span> pings<span class="token punctuation">)</span><span class="token punctuation">.</span># <span class="token number">3</span><span class="token punctuation">)</span> <span class="token class-name">Replica</span> timeout from the point of view of masters <span class="token punctuation">(</span>REPLCONF <span class="token class-name">ACK</span> pings<span class="token punctuation">)</span><span class="token punctuation">.</span>## <span class="token class-name">It</span> is important <span class="token keyword">to</span> <span class="token namespace">make</span> sure that <span class="token keyword">this</span> value is greater than the value# specified <span class="token keyword">for</span> repl<span class="token operator">-</span>ping<span class="token operator">-</span>replica<span class="token operator">-</span>period otherwise a timeout will be detected# every time there is low traffic between the master and the replica<span class="token punctuation">.</span>## repl<span class="token operator">-</span>timeout <span class="token number">60</span># <span class="token class-name">Disable</span> TCP_NODELAY on the replica socket after SYNC<span class="token operator">?</span>## <span class="token class-name">If</span> you select <span class="token string">"yes"</span> <span class="token class-name">Redis</span> will use a smaller number of TCP packets and# less bandwidth <span class="token keyword">to</span> <span class="token namespace">send</span> data <span class="token keyword">to</span> <span class="token namespace">replicas<span class="token punctuation">.</span></span> <span class="token class-name">But</span> <span class="token keyword">this</span> can add a delay <span class="token keyword">for</span># the data <span class="token keyword">to</span> <span class="token namespace">appear</span> on the replica side<span class="token punctuation">,</span> up <span class="token keyword">to</span> <span class="token number">40</span> milliseconds <span class="token keyword">with</span># <span class="token class-name">Linux</span> kernels using a <span class="token keyword">default</span> configuration<span class="token punctuation">.</span>## <span class="token class-name">If</span> you select <span class="token string">"no"</span> the delay <span class="token keyword">for</span> data <span class="token keyword">to</span> <span class="token namespace">appear</span> on the replica side will# be reduced but more bandwidth will be used <span class="token keyword">for</span> replication<span class="token punctuation">.</span>## <span class="token class-name">By</span> <span class="token keyword">default</span> we optimize <span class="token keyword">for</span> low latency<span class="token punctuation">,</span> but in very high traffic conditions# or when the master and replicas are many hops away<span class="token punctuation">,</span> turning <span class="token keyword">this</span> <span class="token keyword">to</span> <span class="token string">"yes"</span> may# be a good idea<span class="token punctuation">.</span>repl<span class="token operator">-</span>disable<span class="token operator">-</span>tcp<span class="token operator">-</span>nodelay no# <span class="token class-name">Set</span> the replication backlog size<span class="token punctuation">.</span> <span class="token class-name">The</span> backlog is a buffer that accumulates# replica data when replicas are disconnected <span class="token keyword">for</span> some time<span class="token punctuation">,</span> so that when a# replica wants <span class="token keyword">to</span> <span class="token namespace">reconnect</span> again<span class="token punctuation">,</span> often a full resync is not needed<span class="token punctuation">,</span> but a# partial resync is enough<span class="token punctuation">,</span> just passing the portion of data the replica# missed <span class="token keyword">while</span> disconnected<span class="token punctuation">.</span>## <span class="token class-name">The</span> bigger the replication backlog<span class="token punctuation">,</span> the longer the time the replica can be# disconnected and later be able <span class="token keyword">to</span> <span class="token namespace">perform</span> a partial resynchronization<span class="token punctuation">.</span>## <span class="token class-name">The</span> backlog is only allocated once there is at least a replica connected<span class="token punctuation">.</span>## repl<span class="token operator">-</span>backlog<span class="token operator">-</span>size <span class="token number">1</span>mb# <span class="token class-name">After</span> a master has no longer connected replicas <span class="token keyword">for</span> some time<span class="token punctuation">,</span> the backlog# will be freed<span class="token punctuation">.</span> <span class="token class-name">The</span> following option configures the amount of seconds that# need <span class="token keyword">to</span> <span class="token namespace">elapse</span><span class="token punctuation">,</span> starting from the time the last replica disconnected<span class="token punctuation">,</span> <span class="token keyword">for</span># the backlog buffer <span class="token keyword">to</span> <span class="token namespace">be</span> freed<span class="token punctuation">.</span>## <span class="token class-name">Note</span> that replicas never free the backlog <span class="token keyword">for</span> timeout<span class="token punctuation">,</span> since they may be# promoted <span class="token keyword">to</span> <span class="token namespace">masters</span> later<span class="token punctuation">,</span> and should be able <span class="token keyword">to</span> <span class="token namespace">correctly</span> "partially# resynchronize" <span class="token keyword">with</span> <span class="token namespace">the</span> replicas<span class="token operator">:</span> hence they should always accumulate backlog<span class="token punctuation">.</span>## <span class="token class-name">A</span> value of <span class="token number">0</span> means <span class="token keyword">to</span> <span class="token namespace">never</span> release the backlog<span class="token punctuation">.</span>## repl<span class="token operator">-</span>backlog<span class="token operator">-</span>ttl <span class="token number">3600</span># <span class="token class-name">The</span> replica priority is an integer number published by <span class="token class-name">Redis</span> in the INFO# output<span class="token punctuation">.</span> <span class="token class-name">It</span> is used by <span class="token class-name">Redis</span> <span class="token class-name">Sentinel</span> in order <span class="token keyword">to</span> <span class="token namespace">select</span> a replica <span class="token keyword">to</span> <span class="token namespace">promote</span># into a master <span class="token keyword">if</span> the master is no longer working correctly<span class="token punctuation">.</span>## <span class="token class-name">A</span> replica <span class="token keyword">with</span> <span class="token namespace">a</span> low priority number is considered better <span class="token keyword">for</span> promotion<span class="token punctuation">,</span> so# <span class="token keyword">for</span> instance <span class="token keyword">if</span> there are three replicas <span class="token keyword">with</span> <span class="token namespace">priority</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">25</span> <span class="token class-name">Sentinel</span># will pick the one <span class="token keyword">with</span> <span class="token namespace">priority</span> <span class="token number">10</span><span class="token punctuation">,</span> that is the lowest<span class="token punctuation">.</span>## <span class="token class-name">However</span> a special priority of <span class="token number">0</span> marks the replica as not able <span class="token keyword">to</span> <span class="token namespace">perform</span> the# role of master<span class="token punctuation">,</span> so a replica <span class="token keyword">with</span> <span class="token namespace">priority</span> of <span class="token number">0</span> will never be selected by# <span class="token class-name">Redis</span> <span class="token class-name">Sentinel</span> <span class="token keyword">for</span> promotion<span class="token punctuation">.</span>## <span class="token class-name">By</span> <span class="token keyword">default</span> the priority is <span class="token number">100.</span>replica<span class="token operator">-</span>priority <span class="token number">100</span># <span class="token class-name">It</span> is possible <span class="token keyword">for</span> a master <span class="token keyword">to</span> <span class="token namespace">stop</span> accepting writes <span class="token keyword">if</span> there are less than# <span class="token class-name">N</span> replicas connected<span class="token punctuation">,</span> having a lag less or equal than <span class="token class-name">M</span> seconds<span class="token punctuation">.</span>## <span class="token class-name">The</span> <span class="token class-name">N</span> replicas need <span class="token keyword">to</span> <span class="token namespace">be</span> in <span class="token string">"online"</span> state<span class="token punctuation">.</span>## <span class="token class-name">The</span> lag in seconds<span class="token punctuation">,</span> that must be <span class="token operator">&lt;=</span> the specified value<span class="token punctuation">,</span> is calculated from# the last ping received from the replica<span class="token punctuation">,</span> that is usually sent every second<span class="token punctuation">.</span>## <span class="token class-name">This</span> option does not GUARANTEE that <span class="token class-name">N</span> replicas will accept the write<span class="token punctuation">,</span> but# will limit the window of exposure <span class="token keyword">for</span> lost writes in <span class="token keyword">case</span> not enough replicas# are available<span class="token punctuation">,</span> <span class="token keyword">to</span> <span class="token namespace">the</span> specified number of seconds<span class="token punctuation">.</span>## <span class="token class-name">For</span> example <span class="token keyword">to</span> <span class="token namespace">require</span> at least <span class="token number">3</span> replicas <span class="token keyword">with</span> <span class="token namespace">a</span> lag <span class="token operator">&lt;=</span> <span class="token number">10</span> seconds use<span class="token operator">:</span>## min<span class="token operator">-</span>replicas<span class="token operator">-</span><span class="token keyword">to</span><span class="token operator">-</span>write <span class="token number">3</span># min<span class="token operator">-</span>replicas<span class="token operator">-</span>max<span class="token operator">-</span>lag <span class="token number">10</span>## <span class="token class-name">Setting</span> one or the other <span class="token keyword">to</span> <span class="token number">0</span> disables the feature<span class="token punctuation">.</span>## <span class="token class-name">By</span> <span class="token keyword">default</span> min<span class="token operator">-</span>replicas<span class="token operator">-</span><span class="token keyword">to</span><span class="token operator">-</span>write is set <span class="token keyword">to</span> <span class="token number">0</span> <span class="token punctuation">(</span>feature disabled<span class="token punctuation">)</span> and# min<span class="token operator">-</span>replicas<span class="token operator">-</span>max<span class="token operator">-</span>lag is set <span class="token keyword">to</span> <span class="token number">10.</span># <span class="token class-name">A</span> <span class="token class-name">Redis</span> master is able <span class="token keyword">to</span> <span class="token namespace">list</span> the address and port of the attached# replicas in different ways<span class="token punctuation">.</span> <span class="token class-name">For</span> example the <span class="token string">"INFO replication"</span> section# offers <span class="token keyword">this</span> information<span class="token punctuation">,</span> which is used<span class="token punctuation">,</span> among other tools<span class="token punctuation">,</span> by# <span class="token class-name">Redis</span> <span class="token class-name">Sentinel</span> in order <span class="token keyword">to</span> <span class="token namespace">discover</span> replica instances<span class="token punctuation">.</span># <span class="token class-name">Another</span> place where <span class="token keyword">this</span> info is available is in the output of the# <span class="token string">"ROLE"</span> command of a master<span class="token punctuation">.</span>## <span class="token class-name">The</span> listed IP and address normally reported by a replica is obtained# in the following way<span class="token operator">:</span>##   IP<span class="token operator">:</span> <span class="token class-name">The</span> address is auto detected by checking the peer address#   of the socket used by the replica <span class="token keyword">to</span> <span class="token namespace">connect</span> <span class="token keyword">with</span> <span class="token namespace">the</span> master<span class="token punctuation">.</span>##   <span class="token class-name">Port</span><span class="token operator">:</span> <span class="token class-name">The</span> port is communicated by the replica during the replication#   handshake<span class="token punctuation">,</span> and is normally the port that the replica is using <span class="token keyword">to</span>#   listen <span class="token keyword">for</span> connections<span class="token punctuation">.</span>## <span class="token class-name">However</span> when port forwarding or <span class="token class-name">Network</span> <span class="token class-name">Address</span> <span class="token class-name">Translation</span> <span class="token punctuation">(</span>NAT<span class="token punctuation">)</span> is# used<span class="token punctuation">,</span> the replica may be actually reachable via different IP and port# pairs<span class="token punctuation">.</span> <span class="token class-name">The</span> following two options can be used by a replica in order <span class="token keyword">to</span># report <span class="token keyword">to</span> <span class="token namespace">its</span> master a specific set of IP and port<span class="token punctuation">,</span> so that both INFO# and ROLE will report those values<span class="token punctuation">.</span>## <span class="token class-name">There</span> is no need <span class="token keyword">to</span> <span class="token namespace">use</span> both the options <span class="token keyword">if</span> you need <span class="token keyword">to</span> <span class="token namespace">override</span> just# the port or the IP address<span class="token punctuation">.</span>## replica<span class="token operator">-</span>announce<span class="token operator">-</span>ip <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span># replica<span class="token operator">-</span>announce<span class="token operator">-</span>port <span class="token number">1234</span>############################### KEYS TRACKING ################################## <span class="token class-name">Redis</span> <span class="token keyword">implements</span> server assisted support <span class="token keyword">for</span> client side caching of values<span class="token punctuation">.</span># <span class="token class-name">This</span> is implemented using an invalidation table that remembers<span class="token punctuation">,</span> using# <span class="token number">16</span> millions of slots<span class="token punctuation">,</span> what clients may have certain subsets of keys<span class="token punctuation">.</span> <span class="token class-name">In</span> turn# <span class="token keyword">this</span> is used in order <span class="token keyword">to</span> <span class="token namespace">send</span> invalidation messages <span class="token keyword">to</span> <span class="token namespace">clients<span class="token punctuation">.</span></span> <span class="token class-name">Please</span># <span class="token keyword">to</span> <span class="token namespace">understand</span> more about the feature check <span class="token keyword">this</span> page<span class="token operator">:</span>##   https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>redis<span class="token punctuation">.</span>io<span class="token operator">/</span>topics<span class="token operator">/</span>client<span class="token operator">-</span>side<span class="token operator">-</span>caching## <span class="token class-name">When</span> tracking is enabled <span class="token keyword">for</span> a client<span class="token punctuation">,</span> all the read only queries are assumed# <span class="token keyword">to</span> <span class="token namespace">be</span> cached<span class="token operator">:</span> <span class="token keyword">this</span> will force <span class="token class-name">Redis</span> <span class="token keyword">to</span> <span class="token namespace">store</span> information in the invalidation# table<span class="token punctuation">.</span> <span class="token class-name">When</span> keys are modified<span class="token punctuation">,</span> such information is flushed away<span class="token punctuation">,</span> and# invalidation messages are sent <span class="token keyword">to</span> <span class="token namespace">the</span> clients<span class="token punctuation">.</span> <span class="token class-name">However</span> <span class="token keyword">if</span> the workload is# heavily dominated by reads<span class="token punctuation">,</span> <span class="token class-name">Redis</span> could use more and more memory in order# <span class="token keyword">to</span> <span class="token namespace">track</span> the keys fetched by many clients<span class="token punctuation">.</span>## <span class="token class-name">For</span> <span class="token keyword">this</span> reason it is possible <span class="token keyword">to</span> <span class="token namespace">configure</span> a maximum fill value <span class="token keyword">for</span> the# invalidation table<span class="token punctuation">.</span> <span class="token class-name">By</span> <span class="token keyword">default</span> it is set <span class="token keyword">to</span> <span class="token number">1</span>M of keys<span class="token punctuation">,</span> and once <span class="token keyword">this</span> limit# is reached<span class="token punctuation">,</span> <span class="token class-name">Redis</span> will start <span class="token keyword">to</span> <span class="token namespace">evict</span> keys in the invalidation table# even <span class="token keyword">if</span> they were not modified<span class="token punctuation">,</span> just <span class="token keyword">to</span> <span class="token namespace">reclaim</span> memory<span class="token operator">:</span> <span class="token keyword">this</span> will in turn# force the clients <span class="token keyword">to</span> <span class="token namespace">invalidate</span> the cached values<span class="token punctuation">.</span> <span class="token class-name">Basically</span> the table# maximum size is a trade off between the memory you want <span class="token keyword">to</span> <span class="token namespace">spend</span> server# side <span class="token keyword">to</span> <span class="token namespace">track</span> information about who cached what<span class="token punctuation">,</span> and the ability of clients# <span class="token keyword">to</span> <span class="token namespace">retain</span> cached objects in memory<span class="token punctuation">.</span>## <span class="token class-name">If</span> you set the value <span class="token keyword">to</span> <span class="token number">0</span><span class="token punctuation">,</span> it means there are no limits<span class="token punctuation">,</span> and <span class="token class-name">Redis</span> will# retain as many keys as needed in the invalidation table<span class="token punctuation">.</span># <span class="token class-name">In</span> the <span class="token string">"stats"</span> <span class="token class-name">INFO</span> section<span class="token punctuation">,</span> you can find information about the number of# keys in the invalidation table at every given moment<span class="token punctuation">.</span>## <span class="token class-name">Note</span><span class="token operator">:</span> when key tracking is used in broadcasting mode<span class="token punctuation">,</span> no memory is used# in the server side so <span class="token keyword">this</span> setting is useless<span class="token punctuation">.</span>## tracking<span class="token operator">-</span>table<span class="token operator">-</span>max<span class="token operator">-</span>keys <span class="token number">1000000</span>################################## SECURITY #################################### <span class="token class-name">Warning</span><span class="token operator">:</span> since <span class="token class-name">Redis</span> is pretty fast an outside user can <span class="token keyword">try</span> up <span class="token keyword">to</span># <span class="token number">1</span> million passwords per second against a modern box<span class="token punctuation">.</span> <span class="token class-name">This</span> means that you# should use very strong passwords<span class="token punctuation">,</span> otherwise they will be very easy <span class="token keyword">to</span> <span class="token keyword">break</span><span class="token punctuation">.</span># <span class="token class-name">Note</span> that because the password is really a shared secret between the client# and the server<span class="token punctuation">,</span> and should not be memorized by any human<span class="token punctuation">,</span> the password# can be easily a <span class="token keyword">long</span> string from <span class="token operator">/</span>dev<span class="token operator">/</span>urandom or whatever<span class="token punctuation">,</span> so by using a# <span class="token keyword">long</span> and unguessable password no brute force attack will be possible<span class="token punctuation">.</span># <span class="token class-name">Redis</span> ACL users are defined in the following format<span class="token operator">:</span>##   user <span class="token generics"><span class="token punctuation">&lt;</span>username<span class="token punctuation">&gt;</span></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> acl rules <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>## <span class="token class-name">For</span> example<span class="token operator">:</span>##   user worker <span class="token operator">+</span><span class="token annotation punctuation">@list</span> <span class="token operator">+</span><span class="token annotation punctuation">@connection</span> <span class="token operator">~</span>jobs<span class="token operator">:</span><span class="token operator">*</span> on <span class="token operator">&gt;</span>ffa9203c493aa99## <span class="token class-name">The</span> special username <span class="token string">"default"</span> is used <span class="token keyword">for</span> <span class="token keyword">new</span> connections<span class="token punctuation">.</span> <span class="token class-name">If</span> <span class="token keyword">this</span> user# has the <span class="token string">"nopass"</span> rule<span class="token punctuation">,</span> then <span class="token keyword">new</span> connections will be immediately authenticated# as the <span class="token string">"default"</span> user without the need of any password provided via the# AUTH command<span class="token punctuation">.</span> <span class="token class-name">Otherwise</span> <span class="token keyword">if</span> the <span class="token string">"default"</span> user is not flagged <span class="token keyword">with</span> <span class="token string">"nopass"</span># the connections will start in not authenticated state<span class="token punctuation">,</span> and will require# AUTH <span class="token punctuation">(</span>or the HELLO command <span class="token class-name">AUTH</span> option<span class="token punctuation">)</span> in order <span class="token keyword">to</span> <span class="token namespace">be</span> authenticated and# start <span class="token keyword">to</span> <span class="token namespace">work<span class="token punctuation">.</span></span>## <span class="token class-name">The</span> ACL rules that describe what an user can <span class="token keyword">do</span> are the following<span class="token operator">:</span>##  on           <span class="token class-name">Enable</span> the user<span class="token operator">:</span> it is possible <span class="token keyword">to</span> <span class="token namespace">authenticate</span> as <span class="token keyword">this</span> user<span class="token punctuation">.</span>#  off          <span class="token class-name">Disable</span> the user<span class="token operator">:</span> it's no longer possible <span class="token keyword">to</span> <span class="token namespace">authenticate</span>#               <span class="token keyword">with</span> <span class="token keyword">this</span> user<span class="token punctuation">,</span> however the already authenticated connections#               will still work<span class="token punctuation">.</span>#  <span class="token operator">+</span><span class="token generics"><span class="token punctuation">&lt;</span>command<span class="token punctuation">&gt;</span></span>   <span class="token class-name">Allow</span> the execution of that command#  <span class="token operator">-</span><span class="token generics"><span class="token punctuation">&lt;</span>command<span class="token punctuation">&gt;</span></span>   <span class="token class-name">Disallow</span> the execution of that command#  <span class="token operator">+</span>@<span class="token generics"><span class="token punctuation">&lt;</span>category<span class="token punctuation">&gt;</span></span> <span class="token class-name">Allow</span> the execution of all the commands in such category#               <span class="token keyword">with</span> <span class="token namespace">valid</span> categories are like <span class="token annotation punctuation">@admin</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@set</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@sortedset</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>#               and so forth<span class="token punctuation">,</span> see the full list in the server<span class="token punctuation">.</span>c file where#               the <span class="token class-name">Redis</span> command table is described and defined<span class="token punctuation">.</span>#               <span class="token class-name">The</span> special category <span class="token annotation punctuation">@all</span> means all the commands<span class="token punctuation">,</span> but currently#               present in the server<span class="token punctuation">,</span> and that will be loaded in the future#               via modules<span class="token punctuation">.</span>#  <span class="token operator">+</span><span class="token generics"><span class="token punctuation">&lt;</span>command<span class="token punctuation">&gt;</span></span><span class="token operator">|</span>subcommand    <span class="token class-name">Allow</span> a specific subcommand of an otherwise#                           disabled command<span class="token punctuation">.</span> <span class="token class-name">Note</span> that <span class="token keyword">this</span> form is not#                           allowed as negative like <span class="token operator">-</span>DEBUG<span class="token operator">|</span>SEGFAULT<span class="token punctuation">,</span> but#                           only additive starting <span class="token keyword">with</span> <span class="token string">"+"</span><span class="token punctuation">.</span>#  allcommands  <span class="token class-name">Alias</span> <span class="token keyword">for</span> <span class="token operator">+</span><span class="token annotation punctuation">@all</span><span class="token punctuation">.</span> <span class="token class-name">Note</span> that it implies the ability <span class="token keyword">to</span> <span class="token namespace">execute</span>#               all the future commands loaded via the modules system<span class="token punctuation">.</span>#  nocommands   <span class="token class-name">Alias</span> <span class="token keyword">for</span> <span class="token operator">-</span><span class="token annotation punctuation">@all</span><span class="token punctuation">.</span>#  <span class="token operator">~</span><span class="token generics"><span class="token punctuation">&lt;</span>pattern<span class="token punctuation">&gt;</span></span>   <span class="token class-name">Add</span> a pattern of keys that can be mentioned as part of#               commands<span class="token punctuation">.</span> <span class="token class-name">For</span> instance <span class="token operator">~</span><span class="token operator">*</span> allows all the keys<span class="token punctuation">.</span> <span class="token class-name">The</span> pattern#               is a glob<span class="token operator">-</span>style pattern like the one of KEYS<span class="token punctuation">.</span>#               <span class="token class-name">It</span> is possible <span class="token keyword">to</span> <span class="token namespace">specify</span> multiple patterns<span class="token punctuation">.</span>#  allkeys      <span class="token class-name">Alias</span> <span class="token keyword">for</span> <span class="token operator">~</span><span class="token operator">*</span>#  resetkeys    <span class="token class-name">Flush</span> the list of allowed keys patterns<span class="token punctuation">.</span>#  <span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>password<span class="token punctuation">&gt;</span></span>  <span class="token class-name">Add</span> <span class="token keyword">this</span> passowrd <span class="token keyword">to</span> <span class="token namespace">the</span> list of valid password <span class="token keyword">for</span> the user<span class="token punctuation">.</span>#               <span class="token class-name">For</span> example <span class="token operator">&gt;</span>mypass will add <span class="token string">"mypass"</span> <span class="token keyword">to</span> <span class="token namespace">the</span> list<span class="token punctuation">.</span>#               <span class="token class-name">This</span> directive clears the <span class="token string">"nopass"</span> flag <span class="token punctuation">(</span>see later<span class="token punctuation">)</span><span class="token punctuation">.</span>#  <span class="token operator">&lt;</span><span class="token generics"><span class="token punctuation">&lt;</span>password<span class="token punctuation">&gt;</span></span>  <span class="token class-name">Remove</span> <span class="token keyword">this</span> password from the list of valid passwords<span class="token punctuation">.</span>#  nopass       <span class="token class-name">All</span> the set passwords of the user are removed<span class="token punctuation">,</span> and the user#               is flagged as requiring no password<span class="token operator">:</span> it means that every#               password will work against <span class="token keyword">this</span> user<span class="token punctuation">.</span> <span class="token class-name">If</span> <span class="token keyword">this</span> directive is#               used <span class="token keyword">for</span> the <span class="token keyword">default</span> user<span class="token punctuation">,</span> every <span class="token keyword">new</span> connection will be#               immediately authenticated <span class="token keyword">with</span> <span class="token namespace">the</span> <span class="token keyword">default</span> user without#               any explicit AUTH command required<span class="token punctuation">.</span> <span class="token class-name">Note</span> that the <span class="token string">"resetpass"</span>#               directive will clear <span class="token keyword">this</span> condition<span class="token punctuation">.</span>#  resetpass    <span class="token class-name">Flush</span> the list of allowed passwords<span class="token punctuation">.</span> <span class="token class-name">Moreover</span> removes the#               <span class="token string">"nopass"</span> status<span class="token punctuation">.</span> <span class="token class-name">After</span> <span class="token string">"resetpass"</span> the user has no associated#               passwords and there is no way <span class="token keyword">to</span> <span class="token namespace">authenticate</span> without adding#               some password <span class="token punctuation">(</span>or setting it as <span class="token string">"nopass"</span> later<span class="token punctuation">)</span><span class="token punctuation">.</span>#  reset        <span class="token class-name">Performs</span> the following actions<span class="token operator">:</span> resetpass<span class="token punctuation">,</span> resetkeys<span class="token punctuation">,</span> off<span class="token punctuation">,</span>#               <span class="token operator">-</span><span class="token annotation punctuation">@all</span><span class="token punctuation">.</span> <span class="token class-name">The</span> user returns <span class="token keyword">to</span> <span class="token namespace">the</span> same state it has immediately#               after its creation<span class="token punctuation">.</span>## ACL rules can be specified in any order<span class="token operator">:</span> <span class="token keyword">for</span> instance you can start <span class="token keyword">with</span># passwords<span class="token punctuation">,</span> then flags<span class="token punctuation">,</span> or key patterns<span class="token punctuation">.</span> <span class="token class-name">However</span> note that the additive# and subtractive rules will CHANGE MEANING depending on the ordering<span class="token punctuation">.</span># <span class="token class-name">For</span> instance see the following example<span class="token operator">:</span>##   user alice on <span class="token operator">+</span><span class="token annotation punctuation">@all</span> <span class="token operator">-</span>DEBUG <span class="token operator">~</span><span class="token operator">*</span> <span class="token operator">&gt;</span>somepassword## <span class="token class-name">This</span> will allow <span class="token string">"alice"</span> <span class="token keyword">to</span> <span class="token namespace">use</span> all the commands <span class="token keyword">with</span> <span class="token namespace">the</span> exception of the# <span class="token class-name">DEBUG</span> command<span class="token punctuation">,</span> since <span class="token operator">+</span><span class="token annotation punctuation">@all</span> added all the commands <span class="token keyword">to</span> <span class="token namespace">the</span> set of the commands# alice can use<span class="token punctuation">,</span> and later DEBUG was removed<span class="token punctuation">.</span> <span class="token class-name">However</span> <span class="token keyword">if</span> we invert the order# of two ACL rules the result will be different<span class="token operator">:</span>##   user alice on <span class="token operator">-</span>DEBUG <span class="token operator">+</span><span class="token annotation punctuation">@all</span> <span class="token operator">~</span><span class="token operator">*</span> <span class="token operator">&gt;</span>somepassword## <span class="token class-name">Now</span> DEBUG was removed when alice had yet no commands in the set of allowed# commands<span class="token punctuation">,</span> later all the commands are added<span class="token punctuation">,</span> so the user will be able <span class="token keyword">to</span># execute everything<span class="token punctuation">.</span>## <span class="token class-name">Basically</span> ACL rules are processed left<span class="token operator">-</span><span class="token keyword">to</span><span class="token operator">-</span>right<span class="token punctuation">.</span>## <span class="token class-name">For</span> more information about ACL configuration please refer <span class="token keyword">to</span># the <span class="token class-name">Redis</span> web site at https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>redis<span class="token punctuation">.</span>io<span class="token operator">/</span>topics<span class="token operator">/</span>acl# ACL LOG## <span class="token class-name">The</span> ACL <span class="token class-name">Log</span> tracks failed commands and authentication events associated# <span class="token keyword">with</span> <span class="token class-name">ACLs</span><span class="token punctuation">.</span> <span class="token class-name">The</span> ACL <span class="token class-name">Log</span> is useful <span class="token keyword">to</span> <span class="token namespace">troubleshoot</span> failed commands blocked # by <span class="token class-name">ACLs</span><span class="token punctuation">.</span> <span class="token class-name">The</span> ACL <span class="token class-name">Log</span> is stored in memory<span class="token punctuation">.</span> <span class="token class-name">You</span> can reclaim memory <span class="token keyword">with</span> # ACL LOG RESET<span class="token punctuation">.</span> <span class="token class-name">Define</span> the maximum entry length of the ACL <span class="token class-name">Log</span> below<span class="token punctuation">.</span>acllog<span class="token operator">-</span>max<span class="token operator">-</span>len <span class="token number">128</span># <span class="token class-name">Using</span> an external ACL file## <span class="token class-name">Instead</span> of configuring users here in <span class="token keyword">this</span> file<span class="token punctuation">,</span> it is possible <span class="token keyword">to</span> <span class="token namespace">use</span># a stand<span class="token operator">-</span>alone file just listing users<span class="token punctuation">.</span> <span class="token class-name">The</span> two methods cannot be mixed<span class="token operator">:</span># <span class="token keyword">if</span> you configure users here and at the same time you activate the exteranl# <span class="token class-name">ACL</span> file<span class="token punctuation">,</span> the server will refuse <span class="token keyword">to</span> <span class="token namespace">start<span class="token punctuation">.</span></span>## <span class="token class-name">The</span> format of the external ACL user file is exactly the same as the# format that is used inside redis<span class="token punctuation">.</span>conf <span class="token keyword">to</span> <span class="token namespace">describe</span> users<span class="token punctuation">.</span>## aclfile <span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token operator">/</span>users<span class="token punctuation">.</span>acl# IMPORTANT NOTE<span class="token operator">:</span> starting <span class="token keyword">with</span> <span class="token class-name">Redis</span> <span class="token number">6</span> <span class="token string">"requirepass"</span> is just a compatiblity# layer on top of the <span class="token keyword">new</span> ACL system<span class="token punctuation">.</span> <span class="token class-name">The</span> option effect will be just setting# the password <span class="token keyword">for</span> the <span class="token keyword">default</span> user<span class="token punctuation">.</span> <span class="token class-name">Clients</span> will still authenticate using# AUTH <span class="token generics"><span class="token punctuation">&lt;</span>password<span class="token punctuation">&gt;</span></span> as usually<span class="token punctuation">,</span> or more explicitly <span class="token keyword">with</span> AUTH <span class="token keyword">default</span> <span class="token generics"><span class="token punctuation">&lt;</span>password<span class="token punctuation">&gt;</span></span># <span class="token keyword">if</span> they follow the <span class="token keyword">new</span> protocol<span class="token operator">:</span> both will work<span class="token punctuation">.</span>## requirepass foobared# <span class="token class-name">Command</span> renaming <span class="token punctuation">(</span>DEPRECATED<span class="token punctuation">)</span><span class="token punctuation">.</span>## <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span># WARNING<span class="token operator">:</span> avoid using <span class="token keyword">this</span> option <span class="token keyword">if</span> possible<span class="token punctuation">.</span> <span class="token class-name">Instead</span> use <span class="token class-name">ACLs</span> <span class="token keyword">to</span> <span class="token namespace">remove</span># commands from the <span class="token keyword">default</span> user<span class="token punctuation">,</span> and put them only in some admin user you# create <span class="token keyword">for</span> administrative purposes<span class="token punctuation">.</span># <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>## <span class="token class-name">It</span> is possible <span class="token keyword">to</span> <span class="token namespace">change</span> the name of dangerous commands in a shared# environment<span class="token punctuation">.</span> <span class="token class-name">For</span> instance the CONFIG command may be renamed into something# hard <span class="token keyword">to</span> <span class="token namespace">guess</span> so that it will still be available <span class="token keyword">for</span> internal<span class="token operator">-</span>use tools# but not available <span class="token keyword">for</span> general clients<span class="token punctuation">.</span>## <span class="token class-name">Example</span><span class="token operator">:</span>## rename<span class="token operator">-</span>command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52## <span class="token class-name">It</span> is also possible <span class="token keyword">to</span> <span class="token namespace">completely</span> kill a command by renaming it into# an empty string<span class="token operator">:</span>## rename<span class="token operator">-</span>command CONFIG <span class="token string">""</span>## <span class="token class-name">Please</span> note that changing the name of commands that are logged into the# AOF file or transmitted <span class="token keyword">to</span> <span class="token namespace">replicas</span> may cause problems<span class="token punctuation">.</span>################################### CLIENTS ##################################### <span class="token class-name">Set</span> the max number of connected clients at the same time<span class="token punctuation">.</span> <span class="token class-name">By</span> <span class="token keyword">default</span># <span class="token keyword">this</span> limit is set <span class="token keyword">to</span> <span class="token number">10000</span> clients<span class="token punctuation">,</span> however <span class="token keyword">if</span> the <span class="token class-name">Redis</span> server is not# able <span class="token keyword">to</span> <span class="token namespace">configure</span> the process file limit <span class="token keyword">to</span> <span class="token namespace">allow</span> <span class="token keyword">for</span> the specified limit# the max number of allowed clients is set <span class="token keyword">to</span> <span class="token namespace">the</span> current file limit# minus <span class="token number">32</span> <span class="token punctuation">(</span>as <span class="token class-name">Redis</span> reserves a few file descriptors <span class="token keyword">for</span> internal <span class="token keyword">uses</span><span class="token punctuation">)</span><span class="token punctuation">.</span>## <span class="token class-name">Once</span> the limit is reached <span class="token class-name">Redis</span> will close all the <span class="token keyword">new</span> connections sending# an error <span class="token string">'max number of clients reached'</span><span class="token punctuation">.</span>## IMPORTANT<span class="token operator">:</span> <span class="token class-name">When</span> <span class="token class-name">Redis</span> <span class="token class-name">Cluster</span> is used<span class="token punctuation">,</span> the max number of connections is also# shared <span class="token keyword">with</span> <span class="token namespace">the</span> cluster bus<span class="token operator">:</span> every node in the cluster will use two# connections<span class="token punctuation">,</span> one incoming and another outgoing<span class="token punctuation">.</span> <span class="token class-name">It</span> is important <span class="token keyword">to</span> <span class="token namespace">size</span> the# limit accordingly in <span class="token keyword">case</span> of very large clusters<span class="token punctuation">.</span>## maxclients <span class="token number">10000</span>############################## MEMORY MANAGEMENT ################################# <span class="token class-name">Set</span> a memory usage limit <span class="token keyword">to</span> <span class="token namespace">the</span> specified amount of bytes<span class="token punctuation">.</span># <span class="token class-name">When</span> the memory limit is reached <span class="token class-name">Redis</span> will <span class="token keyword">try</span> <span class="token keyword">to</span> <span class="token namespace">remove</span> keys# according <span class="token keyword">to</span> <span class="token namespace">the</span> eviction policy selected <span class="token punctuation">(</span>see maxmemory<span class="token operator">-</span>policy<span class="token punctuation">)</span><span class="token punctuation">.</span>## <span class="token class-name">If</span> <span class="token class-name">Redis</span> can't remove keys according <span class="token keyword">to</span> <span class="token namespace">the</span> policy<span class="token punctuation">,</span> or <span class="token keyword">if</span> the policy is# set <span class="token keyword">to</span> <span class="token string">'noeviction'</span><span class="token punctuation">,</span> <span class="token class-name">Redis</span> will start <span class="token keyword">to</span> <span class="token namespace">reply</span> <span class="token keyword">with</span> <span class="token namespace">errors</span> <span class="token keyword">to</span> <span class="token namespace">commands</span># that would use more memory<span class="token punctuation">,</span> like SET<span class="token punctuation">,</span> LPUSH<span class="token punctuation">,</span> and so on<span class="token punctuation">,</span> and will <span class="token keyword">continue</span># <span class="token keyword">to</span> <span class="token namespace">reply</span> <span class="token keyword">to</span> <span class="token namespace">read</span><span class="token operator">-</span>only commands like GET<span class="token punctuation">.</span>## <span class="token class-name">This</span> option is usually useful when using <span class="token class-name">Redis</span> as an LRU or <span class="token class-name">LFU</span> cache<span class="token punctuation">,</span> or <span class="token keyword">to</span># set a hard memory limit <span class="token keyword">for</span> an instance <span class="token punctuation">(</span>using the <span class="token string">'noeviction'</span> policy<span class="token punctuation">)</span><span class="token punctuation">.</span>## WARNING<span class="token operator">:</span> <span class="token class-name">If</span> you have replicas attached <span class="token keyword">to</span> <span class="token namespace">an</span> instance <span class="token keyword">with</span> <span class="token namespace">maxmemory</span> on<span class="token punctuation">,</span># the size of the output buffers needed <span class="token keyword">to</span> <span class="token namespace">feed</span> the replicas are subtracted# from the used memory count<span class="token punctuation">,</span> so that network problems <span class="token operator">/</span> resyncs will# not trigger a loop where keys are evicted<span class="token punctuation">,</span> and in turn the output# buffer of replicas is full <span class="token keyword">with</span> <span class="token class-name">DELs</span> of keys evicted triggering the deletion# of more keys<span class="token punctuation">,</span> and so forth until the database is completely emptied<span class="token punctuation">.</span>## <span class="token class-name">In</span> <span class="token keyword">short</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">if</span> you have replicas attached it is suggested that you set a lower# limit <span class="token keyword">for</span> maxmemory so that there is some free RAM on the system <span class="token keyword">for</span> replica# output buffers <span class="token punctuation">(</span>but <span class="token keyword">this</span> is not needed <span class="token keyword">if</span> the policy is <span class="token string">'noeviction'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>## maxmemory <span class="token generics"><span class="token punctuation">&lt;</span>bytes<span class="token punctuation">&gt;</span></span># MAXMEMORY POLICY<span class="token operator">:</span> how <span class="token class-name">Redis</span> will select what <span class="token keyword">to</span> <span class="token namespace">remove</span> when maxmemory# is reached<span class="token punctuation">.</span> <span class="token class-name">You</span> can select one from the following behaviors<span class="token operator">:</span>## <span class="token keyword">volatile</span><span class="token operator">-</span>lru <span class="token operator">-&gt;</span> <span class="token class-name">Evict</span> using approximated LRU<span class="token punctuation">,</span> only keys <span class="token keyword">with</span> <span class="token namespace">an</span> expire set<span class="token punctuation">.</span># allkeys<span class="token operator">-</span>lru <span class="token operator">-&gt;</span> <span class="token class-name">Evict</span> any key using approximated LRU<span class="token punctuation">.</span># <span class="token keyword">volatile</span><span class="token operator">-</span>lfu <span class="token operator">-&gt;</span> <span class="token class-name">Evict</span> using approximated LFU<span class="token punctuation">,</span> only keys <span class="token keyword">with</span> <span class="token namespace">an</span> expire set<span class="token punctuation">.</span># allkeys<span class="token operator">-</span>lfu <span class="token operator">-&gt;</span> <span class="token class-name">Evict</span> any key using approximated LFU<span class="token punctuation">.</span># <span class="token keyword">volatile</span><span class="token operator">-</span>random <span class="token operator">-&gt;</span> <span class="token class-name">Remove</span> a random key having an expire set<span class="token punctuation">.</span># allkeys<span class="token operator">-</span>random <span class="token operator">-&gt;</span> <span class="token class-name">Remove</span> a random key<span class="token punctuation">,</span> any key<span class="token punctuation">.</span># <span class="token keyword">volatile</span><span class="token operator">-</span>ttl <span class="token operator">-&gt;</span> <span class="token class-name">Remove</span> the key <span class="token keyword">with</span> <span class="token namespace">the</span> nearest expire time <span class="token punctuation">(</span>minor TTL<span class="token punctuation">)</span># noeviction <span class="token operator">-&gt;</span> <span class="token class-name">Don</span>'t evict anything<span class="token punctuation">,</span> just <span class="token keyword">return</span> an error on write operations<span class="token punctuation">.</span>## LRU means <span class="token class-name">Least</span> <span class="token class-name">Recently</span> <span class="token class-name">Used</span># LFU means <span class="token class-name">Least</span> <span class="token class-name">Frequently</span> <span class="token class-name">Used</span>## <span class="token class-name">Both</span> LRU<span class="token punctuation">,</span> LFU and <span class="token keyword">volatile</span><span class="token operator">-</span>ttl are implemented using approximated# randomized algorithms<span class="token punctuation">.</span>## <span class="token class-name">Note</span><span class="token operator">:</span> <span class="token keyword">with</span> <span class="token namespace">any</span> of the above policies<span class="token punctuation">,</span> <span class="token class-name">Redis</span> will <span class="token keyword">return</span> an error on write#       operations<span class="token punctuation">,</span> when there are no suitable keys <span class="token keyword">for</span> eviction<span class="token punctuation">.</span>##       <span class="token class-name">At</span> the date of writing these commands are<span class="token operator">:</span> set setnx setex append#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby#       getset mset msetnx exec sort## <span class="token class-name">The</span> <span class="token keyword">default</span> is<span class="token operator">:</span>## maxmemory<span class="token operator">-</span>policy noeviction# LRU<span class="token punctuation">,</span> LFU and minimal TTL algorithms are not precise algorithms but approximated# algorithms <span class="token punctuation">(</span>in order <span class="token keyword">to</span> <span class="token namespace">save</span> memory<span class="token punctuation">)</span><span class="token punctuation">,</span> so you can tune it <span class="token keyword">for</span> speed or# accuracy<span class="token punctuation">.</span> <span class="token class-name">For</span> <span class="token keyword">default</span> <span class="token class-name">Redis</span> will check five keys and pick the one that was# used less recently<span class="token punctuation">,</span> you can change the sample size using the following# configuration directive<span class="token punctuation">.</span>## <span class="token class-name">The</span> <span class="token keyword">default</span> of <span class="token number">5</span> produces good enough results<span class="token punctuation">.</span> <span class="token number">10</span> <span class="token class-name">Approximates</span> very closely# <span class="token boolean">true</span> LRU but costs more CPU<span class="token punctuation">.</span> <span class="token number">3</span> is faster but not very accurate<span class="token punctuation">.</span>## maxmemory<span class="token operator">-</span>samples <span class="token number">5</span># <span class="token class-name">Starting</span> from <span class="token class-name">Redis</span> <span class="token number">5</span><span class="token punctuation">,</span> by <span class="token keyword">default</span> a replica will ignore its maxmemory setting# <span class="token punctuation">(</span>unless it is promoted <span class="token keyword">to</span> <span class="token namespace">master</span> after a failover or manually<span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token class-name">It</span> means# that the eviction of keys will be just handled by the master<span class="token punctuation">,</span> sending the# DEL commands <span class="token keyword">to</span> <span class="token namespace">the</span> replica as keys evict in the master side<span class="token punctuation">.</span>## <span class="token class-name">This</span> behavior ensures that masters and replicas stay consistent<span class="token punctuation">,</span> and is usually# what you want<span class="token punctuation">,</span> however <span class="token keyword">if</span> your replica is writable<span class="token punctuation">,</span> or you want the replica# <span class="token keyword">to</span> <span class="token namespace">have</span> a different memory setting<span class="token punctuation">,</span> and you are sure all the writes performed# <span class="token keyword">to</span> <span class="token namespace">the</span> replica are idempotent<span class="token punctuation">,</span> then you may change <span class="token keyword">this</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>but be sure# <span class="token keyword">to</span> <span class="token namespace">understand</span> what you are doing<span class="token punctuation">)</span><span class="token punctuation">.</span>## <span class="token class-name">Note</span> that since the replica by <span class="token keyword">default</span> does not evict<span class="token punctuation">,</span> it may end using more# memory than the one set via maxmemory <span class="token punctuation">(</span>there are certain buffers that may# be larger on the replica<span class="token punctuation">,</span> or data structures may sometimes take more memory# and so forth<span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token class-name">So</span> make sure you monitor your replicas and make sure they# have enough memory <span class="token keyword">to</span> <span class="token namespace">never</span> hit a real out<span class="token operator">-</span>of<span class="token operator">-</span>memory condition before the# master hits the configured maxmemory setting<span class="token punctuation">.</span>## replica<span class="token operator">-</span>ignore<span class="token operator">-</span>maxmemory yes# <span class="token class-name">Redis</span> reclaims expired keys in two ways<span class="token operator">:</span> upon access when those keys are# found <span class="token keyword">to</span> <span class="token namespace">be</span> expired<span class="token punctuation">,</span> and also in background<span class="token punctuation">,</span> in what is called the# <span class="token string">"active expire key"</span><span class="token punctuation">.</span> <span class="token class-name">The</span> key space is slowly and interactively scanned# looking <span class="token keyword">for</span> expired keys <span class="token keyword">to</span> <span class="token namespace">reclaim</span><span class="token punctuation">,</span> so that it is possible <span class="token keyword">to</span> <span class="token namespace">free</span> memory# of keys that are expired and will never be accessed again in a <span class="token keyword">short</span> time<span class="token punctuation">.</span>## <span class="token class-name">The</span> <span class="token keyword">default</span> effort of the expire cycle will <span class="token keyword">try</span> <span class="token keyword">to</span> <span class="token namespace">avoid</span> having more than# ten percent of expired keys still in memory<span class="token punctuation">,</span> and will <span class="token keyword">try</span> <span class="token keyword">to</span> <span class="token namespace">avoid</span> consuming# more than <span class="token number">25</span><span class="token operator">%</span> of total memory and <span class="token keyword">to</span> <span class="token namespace">add</span> latency <span class="token keyword">to</span> <span class="token namespace">the</span> system<span class="token punctuation">.</span> <span class="token class-name">However</span># it is possible <span class="token keyword">to</span> <span class="token namespace">increase</span> the expire <span class="token string">"effort"</span> that is normally set <span class="token keyword">to</span># <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token keyword">to</span> <span class="token namespace">a</span> greater value<span class="token punctuation">,</span> up <span class="token keyword">to</span> <span class="token namespace">the</span> value <span class="token string">"10"</span><span class="token punctuation">.</span> <span class="token class-name">At</span> its maximum value the# system will use more CPU<span class="token punctuation">,</span> longer cycles <span class="token punctuation">(</span>and technically may introduce# more latency<span class="token punctuation">)</span><span class="token punctuation">,</span> and will tollerate less already expired keys still present# in the system<span class="token punctuation">.</span> <span class="token class-name">It</span>'s a tradeoff betweeen memory<span class="token punctuation">,</span> CPU and latecy<span class="token punctuation">.</span>## active<span class="token operator">-</span>expire<span class="token operator">-</span>effort <span class="token number">1</span>############################# LAZY FREEING ##################################### <span class="token class-name">Redis</span> has two primitives <span class="token keyword">to</span> <span class="token namespace">delete</span> keys<span class="token punctuation">.</span> <span class="token class-name">One</span> is called DEL and is a blocking# deletion of the object<span class="token punctuation">.</span> <span class="token class-name">It</span> means that the server stops processing <span class="token keyword">new</span> commands# in order <span class="token keyword">to</span> <span class="token namespace">reclaim</span> all the memory associated <span class="token keyword">with</span> <span class="token namespace">an</span> object in a synchronous# way<span class="token punctuation">.</span> <span class="token class-name">If</span> the key deleted is associated <span class="token keyword">with</span> <span class="token namespace">a</span> small object<span class="token punctuation">,</span> the time needed# in order <span class="token keyword">to</span> <span class="token namespace">execute</span> the DEL command is very small and comparable <span class="token keyword">to</span> <span class="token namespace">most</span> other# <span class="token class-name">O</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> or <span class="token class-name">O</span><span class="token punctuation">(</span>log_N<span class="token punctuation">)</span> commands in <span class="token class-name">Redis</span><span class="token punctuation">.</span> <span class="token class-name">However</span> <span class="token keyword">if</span> the key is associated <span class="token keyword">with</span> <span class="token namespace">an</span># aggregated value containing millions of elements<span class="token punctuation">,</span> the server can block <span class="token keyword">for</span># a <span class="token keyword">long</span> time <span class="token punctuation">(</span>even seconds<span class="token punctuation">)</span> in order <span class="token keyword">to</span> <span class="token namespace">complete</span> the operation<span class="token punctuation">.</span>## <span class="token class-name">For</span> the above reasons <span class="token class-name">Redis</span> also offers non blocking deletion primitives# such as UNLINK <span class="token punctuation">(</span>non blocking DEL<span class="token punctuation">)</span> and the ASYNC option of FLUSHALL and# <span class="token class-name">FLUSHDB</span> commands<span class="token punctuation">,</span> in order <span class="token keyword">to</span> <span class="token namespace">reclaim</span> memory in background<span class="token punctuation">.</span> <span class="token class-name">Those</span> commands# are executed in constant time<span class="token punctuation">.</span> <span class="token class-name">Another</span> thread will incrementally free the# object in the background as fast as possible<span class="token punctuation">.</span>## DEL<span class="token punctuation">,</span> UNLINK and ASYNC option of FLUSHALL and FLUSHDB are user<span class="token operator">-</span>controlled<span class="token punctuation">.</span># <span class="token class-name">It</span>'s up <span class="token keyword">to</span> <span class="token namespace">the</span> design of the application <span class="token keyword">to</span> <span class="token namespace">understand</span> when it is a good# idea <span class="token keyword">to</span> <span class="token namespace">use</span> one or the other<span class="token punctuation">.</span> <span class="token class-name">However</span> the <span class="token class-name">Redis</span> server sometimes has <span class="token keyword">to</span># delete keys or flush the whole database as a side effect of other operations<span class="token punctuation">.</span># <span class="token class-name">Specifically</span> <span class="token class-name">Redis</span> deletes objects independently of a user call in the# following scenarios<span class="token operator">:</span>## <span class="token number">1</span><span class="token punctuation">)</span> <span class="token class-name">On</span> eviction<span class="token punctuation">,</span> because of the maxmemory and maxmemory policy configurations<span class="token punctuation">,</span>#    in order <span class="token keyword">to</span> <span class="token namespace">make</span> room <span class="token keyword">for</span> <span class="token keyword">new</span> data<span class="token punctuation">,</span> without going over the specified#    memory limit<span class="token punctuation">.</span># <span class="token number">2</span><span class="token punctuation">)</span> <span class="token class-name">Because</span> of expire<span class="token operator">:</span> when a key <span class="token keyword">with</span> <span class="token namespace">an</span> associated time <span class="token keyword">to</span> <span class="token namespace">live</span> <span class="token punctuation">(</span>see the#    <span class="token class-name">EXPIRE</span> command<span class="token punctuation">)</span> must be deleted from memory<span class="token punctuation">.</span># <span class="token number">3</span><span class="token punctuation">)</span> <span class="token class-name">Because</span> of a side effect of a command that stores data on a key that may#    already exist<span class="token punctuation">.</span> <span class="token class-name">For</span> example the RENAME command may delete the old key#    content when it is replaced <span class="token keyword">with</span> <span class="token namespace">another</span> one<span class="token punctuation">.</span> <span class="token class-name">Similarly</span> SUNIONSTORE#    or SORT <span class="token keyword">with</span> STORE option may delete existing keys<span class="token punctuation">.</span> <span class="token class-name">The</span> SET command#    itself removes any old content of the specified key in order <span class="token keyword">to</span> <span class="token namespace">replace</span>#    it <span class="token keyword">with</span> <span class="token namespace">the</span> specified string<span class="token punctuation">.</span># <span class="token number">4</span><span class="token punctuation">)</span> <span class="token class-name">During</span> replication<span class="token punctuation">,</span> when a replica performs a full resynchronization <span class="token keyword">with</span>#    its master<span class="token punctuation">,</span> the content of the whole database is removed in order <span class="token keyword">to</span>#    load the RDB file just transferred<span class="token punctuation">.</span>## <span class="token class-name">In</span> all the above cases the <span class="token keyword">default</span> is <span class="token keyword">to</span> <span class="token namespace">delete</span> objects in a blocking way<span class="token punctuation">,</span># like <span class="token keyword">if</span> DEL was called<span class="token punctuation">.</span> <span class="token class-name">However</span> you can configure each <span class="token keyword">case</span> specifically# in order <span class="token keyword">to</span> <span class="token namespace">instead</span> release memory in a non<span class="token operator">-</span>blocking way like <span class="token keyword">if</span> UNLINK# was called<span class="token punctuation">,</span> using the following configuration directives<span class="token punctuation">.</span>lazyfree<span class="token operator">-</span>lazy<span class="token operator">-</span>eviction nolazyfree<span class="token operator">-</span>lazy<span class="token operator">-</span>expire nolazyfree<span class="token operator">-</span>lazy<span class="token operator">-</span>server<span class="token operator">-</span>del noreplica<span class="token operator">-</span>lazy<span class="token operator">-</span>flush no# <span class="token class-name">It</span> is also possible<span class="token punctuation">,</span> <span class="token keyword">for</span> the <span class="token keyword">case</span> when <span class="token keyword">to</span> <span class="token namespace">replace</span> the user code DEL calls# <span class="token keyword">with</span> UNLINK calls is not easy<span class="token punctuation">,</span> <span class="token keyword">to</span> <span class="token namespace">modify</span> the <span class="token keyword">default</span> behavior of the DEL# command <span class="token keyword">to</span> <span class="token namespace">act</span> exactly like UNLINK<span class="token punctuation">,</span> using the following configuration# directive<span class="token operator">:</span>lazyfree<span class="token operator">-</span>lazy<span class="token operator">-</span>user<span class="token operator">-</span>del no################################ THREADED <span class="token class-name">I</span><span class="token operator">/</span><span class="token class-name">O</span> ################################## <span class="token class-name">Redis</span> is mostly single threaded<span class="token punctuation">,</span> however there are certain threaded# operations such as UNLINK<span class="token punctuation">,</span> slow <span class="token class-name">I</span><span class="token operator">/</span><span class="token class-name">O</span> accesses and other things that are# performed on side threads<span class="token punctuation">.</span>## <span class="token class-name">Now</span> it is also possible <span class="token keyword">to</span> <span class="token namespace">handle</span> <span class="token class-name">Redis</span> clients socket reads and writes# in different <span class="token class-name">I</span><span class="token operator">/</span><span class="token class-name">O</span> threads<span class="token punctuation">.</span> <span class="token class-name">Since</span> especially writing is so slow<span class="token punctuation">,</span> normally# <span class="token class-name">Redis</span> users use pipelining in order <span class="token keyword">to</span> <span class="token namespace">speedup</span> the <span class="token class-name">Redis</span> performances per# core<span class="token punctuation">,</span> and spawn multiple instances in order <span class="token keyword">to</span> <span class="token namespace">scale</span> more<span class="token punctuation">.</span> <span class="token class-name">Using</span> <span class="token class-name">I</span><span class="token operator">/</span><span class="token class-name">O</span># threads it is possible <span class="token keyword">to</span> <span class="token namespace">easily</span> speedup two times <span class="token class-name">Redis</span> without resorting# <span class="token keyword">to</span> <span class="token namespace">pipelining</span> nor sharding of the instance<span class="token punctuation">.</span>## <span class="token class-name">By</span> <span class="token keyword">default</span> threading is disabled<span class="token punctuation">,</span> we suggest enabling it only in machines# that have at least <span class="token number">4</span> or more cores<span class="token punctuation">,</span> leaving at least one spare core<span class="token punctuation">.</span># <span class="token class-name">Using</span> more than <span class="token number">8</span> threads is unlikely <span class="token keyword">to</span> <span class="token namespace">help</span> much<span class="token punctuation">.</span> <span class="token class-name">We</span> also recommend using# threaded <span class="token class-name">I</span><span class="token operator">/</span><span class="token class-name">O</span> only <span class="token keyword">if</span> you actually have performance problems<span class="token punctuation">,</span> <span class="token keyword">with</span> <span class="token class-name">Redis</span># instances being able <span class="token keyword">to</span> <span class="token namespace">use</span> a quite big percentage of <span class="token class-name">CPU</span> time<span class="token punctuation">,</span> otherwise# there is no point in using <span class="token keyword">this</span> feature<span class="token punctuation">.</span>## <span class="token class-name">So</span> <span class="token keyword">for</span> instance <span class="token keyword">if</span> you have a four cores boxes<span class="token punctuation">,</span> <span class="token keyword">try</span> <span class="token keyword">to</span> <span class="token namespace">use</span> <span class="token number">2</span> or <span class="token number">3</span> <span class="token class-name">I</span><span class="token operator">/</span><span class="token class-name">O</span># threads<span class="token punctuation">,</span> <span class="token keyword">if</span> you have a <span class="token number">8</span> cores<span class="token punctuation">,</span> <span class="token keyword">try</span> <span class="token keyword">to</span> <span class="token namespace">use</span> <span class="token number">6</span> threads<span class="token punctuation">.</span> <span class="token class-name">In</span> order <span class="token keyword">to</span># enable <span class="token class-name">I</span><span class="token operator">/</span><span class="token class-name">O</span> threads use the following configuration directive<span class="token operator">:</span>## io<span class="token operator">-</span>threads <span class="token number">4</span>## <span class="token class-name">Setting</span> io<span class="token operator">-</span>threads <span class="token keyword">to</span> <span class="token number">1</span> will just use the main thread as usually<span class="token punctuation">.</span># <span class="token class-name">When</span> <span class="token class-name">I</span><span class="token operator">/</span><span class="token class-name">O</span> threads are enabled<span class="token punctuation">,</span> we only use threads <span class="token keyword">for</span> writes<span class="token punctuation">,</span> that is# <span class="token keyword">to</span> <span class="token namespace">thread</span> the <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> syscall and transfer the client buffers <span class="token keyword">to</span> <span class="token namespace">the</span># socket<span class="token punctuation">.</span> <span class="token class-name">However</span> it is also possible <span class="token keyword">to</span> <span class="token namespace">enable</span> threading of reads and# protocol parsing using the following configuration directive<span class="token punctuation">,</span> by setting# it <span class="token keyword">to</span> <span class="token namespace">yes</span><span class="token operator">:</span>## io<span class="token operator">-</span>threads<span class="token operator">-</span><span class="token keyword">do</span><span class="token operator">-</span>reads no## <span class="token class-name">Usually</span> threading reads doesn't help much<span class="token punctuation">.</span>## NOTE <span class="token number">1</span><span class="token operator">:</span> <span class="token class-name">This</span> configuration directive cannot be changed at runtime via# CONFIG SET<span class="token punctuation">.</span> <span class="token class-name">Aso</span> <span class="token keyword">this</span> feature currently does not work when SSL is# enabled<span class="token punctuation">.</span>## NOTE <span class="token number">2</span><span class="token operator">:</span> <span class="token class-name">If</span> you want <span class="token keyword">to</span> <span class="token namespace">test</span> the <span class="token class-name">Redis</span> speedup using redis<span class="token operator">-</span>benchmark<span class="token punctuation">,</span> make# sure you also run the benchmark itself in threaded mode<span class="token punctuation">,</span> using the# <span class="token operator">--</span>threads option <span class="token keyword">to</span> <span class="token namespace">match</span> the number of <span class="token class-name">Redis</span> theads<span class="token punctuation">,</span> otherwise you'll not# be able <span class="token keyword">to</span> <span class="token namespace">notice</span> the improvements<span class="token punctuation">.</span>############################ KERNEL OOM CONTROL ############################### <span class="token class-name">On</span> <span class="token class-name">Linux</span><span class="token punctuation">,</span> it is possible <span class="token keyword">to</span> <span class="token namespace">hint</span> the kernel OOM killer on what processes# should be killed first when out of memory<span class="token punctuation">.</span>## <span class="token class-name">Enabling</span> <span class="token keyword">this</span> feature makes <span class="token class-name">Redis</span> actively control the oom_score_adj value# <span class="token keyword">for</span> all its processes<span class="token punctuation">,</span> depending on their role<span class="token punctuation">.</span> <span class="token class-name">The</span> <span class="token keyword">default</span> scores will# attempt <span class="token keyword">to</span> <span class="token namespace">have</span> background child processes killed before all others<span class="token punctuation">,</span> and# replicas killed before masters<span class="token punctuation">.</span>oom<span class="token operator">-</span>score<span class="token operator">-</span>adj no# <span class="token class-name">When</span> oom<span class="token operator">-</span>score<span class="token operator">-</span>adj is used<span class="token punctuation">,</span> <span class="token keyword">this</span> directive controls the specific values used# <span class="token keyword">for</span> master<span class="token punctuation">,</span> replica and background child processes<span class="token punctuation">.</span> <span class="token class-name">Values</span> range <span class="token operator">-</span><span class="token number">1000</span> <span class="token keyword">to</span># <span class="token number">1000</span> <span class="token punctuation">(</span>higher means more likely <span class="token keyword">to</span> <span class="token namespace">be</span> killed<span class="token punctuation">)</span><span class="token punctuation">.</span>## <span class="token class-name">Unprivileged</span> processes <span class="token punctuation">(</span>not root<span class="token punctuation">,</span> and without <span class="token class-name">CAP_SYS_RESOURCE</span> capabilities<span class="token punctuation">)</span># can freely increase their value<span class="token punctuation">,</span> but not decrease it below its initial# settings<span class="token punctuation">.</span>## <span class="token class-name">Values</span> are used relative <span class="token keyword">to</span> <span class="token namespace">the</span> initial value of oom_score_adj when the server# starts<span class="token punctuation">.</span> <span class="token class-name">Because</span> typically the initial value is <span class="token number">0</span><span class="token punctuation">,</span> they will often match the# absolute values<span class="token punctuation">.</span>oom<span class="token operator">-</span>score<span class="token operator">-</span>adj<span class="token operator">-</span>values <span class="token number">0</span> <span class="token number">200</span> <span class="token number">800</span>############################## APPEND ONLY MODE ################################ <span class="token class-name">By</span> <span class="token keyword">default</span> <span class="token class-name">Redis</span> asynchronously dumps the dataset on disk<span class="token punctuation">.</span> <span class="token class-name">This</span> mode is# good enough in many applications<span class="token punctuation">,</span> but an issue <span class="token keyword">with</span> <span class="token namespace">the</span> <span class="token class-name">Redis</span> process or# a power outage may result into a few minutes of writes lost <span class="token punctuation">(</span>depending on# the configured save points<span class="token punctuation">)</span><span class="token punctuation">.</span>## <span class="token class-name">The</span> <span class="token class-name">Append</span> <span class="token class-name">Only</span> <span class="token class-name">File</span> is an alternative persistence mode that <span class="token keyword">provides</span># much better durability<span class="token punctuation">.</span> <span class="token class-name">For</span> instance using the <span class="token keyword">default</span> data fsync policy# <span class="token punctuation">(</span>see later in the config file<span class="token punctuation">)</span> <span class="token class-name">Redis</span> can lose just one second of writes in a# dramatic event like a server power outage<span class="token punctuation">,</span> or a single write <span class="token keyword">if</span> something# wrong <span class="token keyword">with</span> <span class="token namespace">the</span> <span class="token class-name">Redis</span> process itself happens<span class="token punctuation">,</span> but the operating system is# still running correctly<span class="token punctuation">.</span>## AOF and RDB persistence can be enabled at the same time without problems<span class="token punctuation">.</span># <span class="token class-name">If</span> the AOF is enabled on startup <span class="token class-name">Redis</span> will load the AOF<span class="token punctuation">,</span> that is the file# <span class="token keyword">with</span> <span class="token namespace">the</span> better durability guarantees<span class="token punctuation">.</span>## <span class="token class-name">Please</span> check http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>redis<span class="token punctuation">.</span>io<span class="token operator">/</span>topics<span class="token operator">/</span>persistence <span class="token keyword">for</span> more information<span class="token punctuation">.</span>appendonly no# <span class="token class-name">The</span> name of the append only file <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">"appendonly.aof"</span><span class="token punctuation">)</span>appendfilename <span class="token string">"appendonly.aof"</span># <span class="token class-name">The</span> <span class="token function">fsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> call tells the <span class="token class-name">Operating</span> <span class="token class-name">System</span> <span class="token keyword">to</span> <span class="token namespace">actually</span> write data on disk# instead of waiting <span class="token keyword">for</span> more data in the output buffer<span class="token punctuation">.</span> <span class="token class-name">Some</span> OS will really flush# data on disk<span class="token punctuation">,</span> some other OS will just <span class="token keyword">try</span> <span class="token keyword">to</span> <span class="token keyword">do</span> it ASAP<span class="token punctuation">.</span>## <span class="token class-name">Redis</span> supports three different modes<span class="token operator">:</span>## no<span class="token operator">:</span> don't fsync<span class="token punctuation">,</span> just let the OS flush the data when it wants<span class="token punctuation">.</span> <span class="token class-name">Faster</span><span class="token punctuation">.</span># always<span class="token operator">:</span> fsync after every write <span class="token keyword">to</span> <span class="token namespace">the</span> append only log<span class="token punctuation">.</span> <span class="token class-name">Slow</span><span class="token punctuation">,</span> <span class="token class-name">Safest</span><span class="token punctuation">.</span># everysec<span class="token operator">:</span> fsync only one time every second<span class="token punctuation">.</span> <span class="token class-name">Compromise</span><span class="token punctuation">.</span>## <span class="token class-name">The</span> <span class="token keyword">default</span> is <span class="token string">"everysec"</span><span class="token punctuation">,</span> as that's usually the right compromise between# speed and data safety<span class="token punctuation">.</span> <span class="token class-name">It</span>'s up <span class="token keyword">to</span> <span class="token namespace">you</span> <span class="token keyword">to</span> <span class="token namespace">understand</span> <span class="token keyword">if</span> you can relax <span class="token keyword">this</span> <span class="token keyword">to</span># <span class="token string">"no"</span> that will let the operating system flush the output buffer when# it wants<span class="token punctuation">,</span> <span class="token keyword">for</span> better performances <span class="token punctuation">(</span>but <span class="token keyword">if</span> you can live <span class="token keyword">with</span> <span class="token namespace">the</span> idea of# some data loss consider the <span class="token keyword">default</span> persistence mode that's snapshotting<span class="token punctuation">)</span><span class="token punctuation">,</span># or on the contrary<span class="token punctuation">,</span> use <span class="token string">"always"</span> that's very slow but a bit safer than# everysec<span class="token punctuation">.</span>## <span class="token class-name">More</span> details please check the following article<span class="token operator">:</span># http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>antirez<span class="token punctuation">.</span>com<span class="token operator">/</span>post<span class="token operator">/</span>redis<span class="token operator">-</span>persistence<span class="token operator">-</span>demystified<span class="token punctuation">.</span>html## <span class="token class-name">If</span> unsure<span class="token punctuation">,</span> use <span class="token string">"everysec"</span><span class="token punctuation">.</span># appendfsync alwaysappendfsync everysec# appendfsync no# <span class="token class-name">When</span> the AOF fsync policy is set <span class="token keyword">to</span> <span class="token namespace">always</span> or everysec<span class="token punctuation">,</span> and a background# saving process <span class="token punctuation">(</span>a background save or AOF log background rewriting<span class="token punctuation">)</span> is# performing a lot of <span class="token class-name">I</span><span class="token operator">/</span><span class="token class-name">O</span> against the disk<span class="token punctuation">,</span> in some <span class="token class-name">Linux</span> configurations# <span class="token class-name">Redis</span> may block too <span class="token keyword">long</span> on the <span class="token function">fsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> call<span class="token punctuation">.</span> <span class="token class-name">Note</span> that there is no fix <span class="token keyword">for</span># <span class="token keyword">this</span> currently<span class="token punctuation">,</span> as even performing fsync in a different thread will block# our synchronous <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> call<span class="token punctuation">.</span>## <span class="token class-name">In</span> order <span class="token keyword">to</span> <span class="token namespace">mitigate</span> <span class="token keyword">this</span> problem it's possible <span class="token keyword">to</span> <span class="token namespace">use</span> the following option# that will prevent <span class="token function">fsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> from being called in the main process <span class="token keyword">while</span> a# BGSAVE or BGREWRITEAOF is in progress<span class="token punctuation">.</span>## <span class="token class-name">This</span> means that <span class="token keyword">while</span> another child is saving<span class="token punctuation">,</span> the durability of <span class="token class-name">Redis</span> is# the same as <span class="token string">"appendfsync none"</span><span class="token punctuation">.</span> <span class="token class-name">In</span> practical terms<span class="token punctuation">,</span> <span class="token keyword">this</span> means that it is# possible <span class="token keyword">to</span> <span class="token namespace">lose</span> up <span class="token keyword">to</span> <span class="token number">30</span> seconds of log in the worst scenario <span class="token punctuation">(</span><span class="token keyword">with</span> <span class="token namespace">the</span># <span class="token keyword">default</span> <span class="token class-name">Linux</span> settings<span class="token punctuation">)</span><span class="token punctuation">.</span>## <span class="token class-name">If</span> you have latency problems turn <span class="token keyword">this</span> <span class="token keyword">to</span> <span class="token string">"yes"</span><span class="token punctuation">.</span> <span class="token class-name">Otherwise</span> leave it as# <span class="token string">"no"</span> that is the safest pick from the point of view of durability<span class="token punctuation">.</span>no<span class="token operator">-</span>appendfsync<span class="token operator">-</span>on<span class="token operator">-</span>rewrite no# <span class="token class-name">Automatic</span> rewrite of the append only file<span class="token punctuation">.</span># <span class="token class-name">Redis</span> is able <span class="token keyword">to</span> <span class="token namespace">automatically</span> rewrite the log file implicitly calling# BGREWRITEAOF when the AOF log size grows by the specified percentage<span class="token punctuation">.</span>## <span class="token class-name">This</span> is how it works<span class="token operator">:</span> <span class="token class-name">Redis</span> remembers the size of the AOF file after the# latest rewrite <span class="token punctuation">(</span><span class="token keyword">if</span> no rewrite has happened since the restart<span class="token punctuation">,</span> the size of# the AOF at startup is used<span class="token punctuation">)</span><span class="token punctuation">.</span>## <span class="token class-name">This</span> base size is compared <span class="token keyword">to</span> <span class="token namespace">the</span> current size<span class="token punctuation">.</span> <span class="token class-name">If</span> the current size is# bigger than the specified percentage<span class="token punctuation">,</span> the rewrite is triggered<span class="token punctuation">.</span> <span class="token class-name">Also</span># you need <span class="token keyword">to</span> <span class="token namespace">specify</span> a minimal size <span class="token keyword">for</span> the AOF file <span class="token keyword">to</span> <span class="token namespace">be</span> rewritten<span class="token punctuation">,</span> <span class="token keyword">this</span># is useful <span class="token keyword">to</span> <span class="token namespace">avoid</span> rewriting the AOF file even <span class="token keyword">if</span> the percentage increase# is reached but it is still pretty small<span class="token punctuation">.</span>## <span class="token class-name">Specify</span> a percentage of zero in order <span class="token keyword">to</span> <span class="token namespace">disable</span> the automatic AOF# rewrite feature<span class="token punctuation">.</span>auto<span class="token operator">-</span>aof<span class="token operator">-</span>rewrite<span class="token operator">-</span>percentage <span class="token number">100</span>auto<span class="token operator">-</span>aof<span class="token operator">-</span>rewrite<span class="token operator">-</span>min<span class="token operator">-</span>size <span class="token number">64</span>mb# <span class="token class-name">An</span> AOF file may be found <span class="token keyword">to</span> <span class="token namespace">be</span> truncated at the end during the <span class="token class-name">Redis</span># startup process<span class="token punctuation">,</span> when the AOF data gets loaded back into memory<span class="token punctuation">.</span># <span class="token class-name">This</span> may happen when the system where <span class="token class-name">Redis</span> is running# crashes<span class="token punctuation">,</span> especially when an ext4 filesystem is mounted without the# data<span class="token operator">=</span>ordered option <span class="token punctuation">(</span>however <span class="token keyword">this</span> can't happen when <span class="token class-name">Redis</span> itself# crashes or aborts but the operating system still works correctly<span class="token punctuation">)</span><span class="token punctuation">.</span>## <span class="token class-name">Redis</span> can either exit <span class="token keyword">with</span> <span class="token namespace">an</span> error when <span class="token keyword">this</span> happens<span class="token punctuation">,</span> or load as much# data as possible <span class="token punctuation">(</span>the <span class="token keyword">default</span> now<span class="token punctuation">)</span> and start <span class="token keyword">if</span> the AOF file is found# <span class="token keyword">to</span> <span class="token namespace">be</span> truncated at the end<span class="token punctuation">.</span> <span class="token class-name">The</span> following option controls <span class="token keyword">this</span> behavior<span class="token punctuation">.</span>## <span class="token class-name">If</span> aof<span class="token operator">-</span>load<span class="token operator">-</span>truncated is set <span class="token keyword">to</span> <span class="token namespace">yes</span><span class="token punctuation">,</span> a truncated AOF file is loaded and# the <span class="token class-name">Redis</span> server starts emitting a log <span class="token keyword">to</span> <span class="token namespace">inform</span> the user of the event<span class="token punctuation">.</span># <span class="token class-name">Otherwise</span> <span class="token keyword">if</span> the option is set <span class="token keyword">to</span> <span class="token namespace">no</span><span class="token punctuation">,</span> the server aborts <span class="token keyword">with</span> <span class="token namespace">an</span> error# and refuses <span class="token keyword">to</span> <span class="token namespace">start<span class="token punctuation">.</span></span> <span class="token class-name">When</span> the option is set <span class="token keyword">to</span> <span class="token namespace">no</span><span class="token punctuation">,</span> the user <span class="token keyword">requires</span># <span class="token keyword">to</span> <span class="token namespace">fix</span> the AOF file using the <span class="token string">"redis-check-aof"</span> utility before <span class="token keyword">to</span> <span class="token namespace">restart</span># the server<span class="token punctuation">.</span>## <span class="token class-name">Note</span> that <span class="token keyword">if</span> the AOF file will be found <span class="token keyword">to</span> <span class="token namespace">be</span> corrupted in the middle# the server will still exit <span class="token keyword">with</span> <span class="token namespace">an</span> error<span class="token punctuation">.</span> <span class="token class-name">This</span> option only applies when# <span class="token class-name">Redis</span> will <span class="token keyword">try</span> <span class="token keyword">to</span> <span class="token namespace">read</span> more data from the AOF file but not enough bytes# will be found<span class="token punctuation">.</span>aof<span class="token operator">-</span>load<span class="token operator">-</span>truncated yes# <span class="token class-name">When</span> rewriting the <span class="token class-name">AOF</span> file<span class="token punctuation">,</span> <span class="token class-name">Redis</span> is able <span class="token keyword">to</span> <span class="token namespace">use</span> an RDB preamble in the# AOF file <span class="token keyword">for</span> faster rewrites and recoveries<span class="token punctuation">.</span> <span class="token class-name">When</span> <span class="token keyword">this</span> option is turned# on the rewritten AOF file is composed of two different stanzas<span class="token operator">:</span>##   <span class="token punctuation">[</span>RDB file<span class="token punctuation">]</span><span class="token punctuation">[</span>AOF tail<span class="token punctuation">]</span>## <span class="token class-name">When</span> loading <span class="token class-name">Redis</span> recognizes that the AOF file starts <span class="token keyword">with</span> <span class="token namespace">the</span> <span class="token string">"REDIS"</span># string and loads the prefixed <span class="token class-name">RDB</span> file<span class="token punctuation">,</span> and continues loading the AOF# tail<span class="token punctuation">.</span>aof<span class="token operator">-</span>use<span class="token operator">-</span>rdb<span class="token operator">-</span>preamble yes################################ LUA SCRIPTING  ################################ <span class="token class-name">Max</span> execution time of a <span class="token class-name">Lua</span> script in milliseconds<span class="token punctuation">.</span>## <span class="token class-name">If</span> the maximum execution time is reached <span class="token class-name">Redis</span> will log that a script is# still in execution after the maximum allowed time and will start <span class="token keyword">to</span># reply <span class="token keyword">to</span> <span class="token namespace">queries</span> <span class="token keyword">with</span> <span class="token namespace">an</span> error<span class="token punctuation">.</span>## <span class="token class-name">When</span> a <span class="token keyword">long</span> running script exceeds the maximum execution time only the# SCRIPT KILL and SHUTDOWN NOSAVE commands are available<span class="token punctuation">.</span> <span class="token class-name">The</span> first can be# used <span class="token keyword">to</span> <span class="token namespace">stop</span> a script that did not yet called write commands<span class="token punctuation">.</span> <span class="token class-name">The</span> second# is the only way <span class="token keyword">to</span> <span class="token namespace">shut</span> down the server in the <span class="token keyword">case</span> a write command was# already issued by the script but the user doesn't want <span class="token keyword">to</span> <span class="token namespace">wait</span> <span class="token keyword">for</span> the natural# termination of the script<span class="token punctuation">.</span>## <span class="token class-name">Set</span> it <span class="token keyword">to</span> <span class="token number">0</span> or a negative value <span class="token keyword">for</span> unlimited execution without warnings<span class="token punctuation">.</span>lua<span class="token operator">-</span>time<span class="token operator">-</span>limit <span class="token number">5000</span>################################ REDIS CLUSTER  ################################ <span class="token class-name">Normal</span> <span class="token class-name">Redis</span> instances can't be part of a <span class="token class-name">Redis</span> <span class="token class-name">Cluster</span><span class="token punctuation">;</span> only nodes that are# started as cluster nodes can<span class="token punctuation">.</span> <span class="token class-name">In</span> order <span class="token keyword">to</span> <span class="token namespace">start</span> a <span class="token class-name">Redis</span> instance as a# cluster node enable the cluster support uncommenting the following<span class="token operator">:</span>## cluster<span class="token operator">-</span>enabled yes# <span class="token class-name">Every</span> cluster node has a cluster configuration file<span class="token punctuation">.</span> <span class="token class-name">This</span> file is not# intended <span class="token keyword">to</span> <span class="token namespace">be</span> edited by hand<span class="token punctuation">.</span> <span class="token class-name">It</span> is created and updated by <span class="token class-name">Redis</span> nodes<span class="token punctuation">.</span># <span class="token class-name">Every</span> <span class="token class-name">Redis</span> <span class="token class-name">Cluster</span> node <span class="token keyword">requires</span> <span class="token namespace">a</span> different cluster configuration file<span class="token punctuation">.</span># <span class="token class-name">Make</span> sure that instances running in the same system <span class="token keyword">do</span> not have# overlapping cluster configuration file names<span class="token punctuation">.</span>## cluster<span class="token operator">-</span>config<span class="token operator">-</span>file nodes<span class="token operator">-</span><span class="token number">6379.</span>conf# <span class="token class-name">Cluster</span> node timeout is the amount of milliseconds a node must be unreachable# <span class="token keyword">for</span> it <span class="token keyword">to</span> <span class="token namespace">be</span> considered in failure state<span class="token punctuation">.</span># <span class="token class-name">Most</span> other internal time limits are multiple of the node timeout<span class="token punctuation">.</span>## cluster<span class="token operator">-</span>node<span class="token operator">-</span>timeout <span class="token number">15000</span># <span class="token class-name">A</span> replica of a failing master will avoid <span class="token keyword">to</span> <span class="token namespace">start</span> a failover <span class="token keyword">if</span> its data# looks too old<span class="token punctuation">.</span>## <span class="token class-name">There</span> is no simple way <span class="token keyword">for</span> a replica <span class="token keyword">to</span> <span class="token namespace">actually</span> have an exact measure of# its <span class="token string">"data age"</span><span class="token punctuation">,</span> so the following two checks are performed<span class="token operator">:</span>## <span class="token number">1</span><span class="token punctuation">)</span> <span class="token class-name">If</span> there are multiple replicas able <span class="token keyword">to</span> <span class="token namespace">failover</span><span class="token punctuation">,</span> they exchange messages#    in order <span class="token keyword">to</span> <span class="token keyword">try</span> <span class="token keyword">to</span> <span class="token namespace">give</span> an advantage <span class="token keyword">to</span> <span class="token namespace">the</span> replica <span class="token keyword">with</span> <span class="token namespace">the</span> best#    replication offset <span class="token punctuation">(</span>more data from the master processed<span class="token punctuation">)</span><span class="token punctuation">.</span>#    <span class="token class-name">Replicas</span> will <span class="token keyword">try</span> <span class="token keyword">to</span> <span class="token namespace">get</span> their rank by offset<span class="token punctuation">,</span> and apply <span class="token keyword">to</span> <span class="token namespace">the</span> start#    of the failover a delay proportional <span class="token keyword">to</span> <span class="token namespace">their</span> rank<span class="token punctuation">.</span>## <span class="token number">2</span><span class="token punctuation">)</span> <span class="token class-name">Every</span> single replica computes the time of the last interaction <span class="token keyword">with</span>#    its master<span class="token punctuation">.</span> <span class="token class-name">This</span> can be the last ping or command received <span class="token punctuation">(</span><span class="token keyword">if</span> the master#    is still in the <span class="token string">"connected"</span> state<span class="token punctuation">)</span><span class="token punctuation">,</span> or the time that elapsed since the#    disconnection <span class="token keyword">with</span> <span class="token namespace">the</span> master <span class="token punctuation">(</span><span class="token keyword">if</span> the replication link is currently down<span class="token punctuation">)</span><span class="token punctuation">.</span>#    <span class="token class-name">If</span> the last interaction is too old<span class="token punctuation">,</span> the replica will not <span class="token keyword">try</span> <span class="token keyword">to</span> <span class="token namespace">failover</span>#    at all<span class="token punctuation">.</span>## <span class="token class-name">The</span> point <span class="token string">"2"</span> can be tuned by user<span class="token punctuation">.</span> <span class="token class-name">Specifically</span> a replica will not perform# the failover <span class="token keyword">if</span><span class="token punctuation">,</span> since the last interaction <span class="token keyword">with</span> <span class="token namespace">the</span> master<span class="token punctuation">,</span> the time# elapsed is greater than<span class="token operator">:</span>##   <span class="token punctuation">(</span>node<span class="token operator">-</span>timeout <span class="token operator">*</span> replica<span class="token operator">-</span>validity<span class="token operator">-</span>factor<span class="token punctuation">)</span> <span class="token operator">+</span> repl<span class="token operator">-</span>ping<span class="token operator">-</span>replica<span class="token operator">-</span>period## <span class="token class-name">So</span> <span class="token keyword">for</span> example <span class="token keyword">if</span> node<span class="token operator">-</span>timeout is <span class="token number">30</span> seconds<span class="token punctuation">,</span> and the replica<span class="token operator">-</span>validity<span class="token operator">-</span>factor# is <span class="token number">10</span><span class="token punctuation">,</span> and assuming a <span class="token keyword">default</span> repl<span class="token operator">-</span>ping<span class="token operator">-</span>replica<span class="token operator">-</span>period of <span class="token number">10</span> seconds<span class="token punctuation">,</span> the# replica will not <span class="token keyword">try</span> <span class="token keyword">to</span> <span class="token namespace">failover</span> <span class="token keyword">if</span> it was not able <span class="token keyword">to</span> <span class="token namespace">talk</span> <span class="token keyword">with</span> <span class="token namespace">the</span> master# <span class="token keyword">for</span> longer than <span class="token number">310</span> seconds<span class="token punctuation">.</span>## <span class="token class-name">A</span> large replica<span class="token operator">-</span>validity<span class="token operator">-</span>factor may allow replicas <span class="token keyword">with</span> <span class="token namespace">too</span> old data <span class="token keyword">to</span> <span class="token namespace">failover</span># a master<span class="token punctuation">,</span> <span class="token keyword">while</span> a too small value may prevent the cluster from being able <span class="token keyword">to</span># elect a replica at all<span class="token punctuation">.</span>## <span class="token class-name">For</span> maximum availability<span class="token punctuation">,</span> it is possible <span class="token keyword">to</span> <span class="token namespace">set</span> the replica<span class="token operator">-</span>validity<span class="token operator">-</span>factor# <span class="token keyword">to</span> <span class="token namespace">a</span> value of <span class="token number">0</span><span class="token punctuation">,</span> which means<span class="token punctuation">,</span> that replicas will always <span class="token keyword">try</span> <span class="token keyword">to</span> <span class="token namespace">failover</span> the# master regardless of the last time they interacted <span class="token keyword">with</span> <span class="token namespace">the</span> master<span class="token punctuation">.</span># <span class="token punctuation">(</span><span class="token class-name">However</span> they'll always <span class="token keyword">try</span> <span class="token keyword">to</span> <span class="token namespace">apply</span> a delay proportional <span class="token keyword">to</span> <span class="token namespace">their</span># offset rank<span class="token punctuation">)</span><span class="token punctuation">.</span>## <span class="token class-name">Zero</span> is the only value able <span class="token keyword">to</span> <span class="token namespace">guarantee</span> that when all the partitions heal# the cluster will always be able <span class="token keyword">to</span> <span class="token keyword">continue</span><span class="token punctuation">.</span>## cluster<span class="token operator">-</span>replica<span class="token operator">-</span>validity<span class="token operator">-</span>factor <span class="token number">10</span># <span class="token class-name">Cluster</span> replicas are able <span class="token keyword">to</span> <span class="token namespace">migrate</span> <span class="token keyword">to</span> <span class="token namespace">orphaned</span> masters<span class="token punctuation">,</span> that are masters# that are left without working replicas<span class="token punctuation">.</span> <span class="token class-name">This</span> improves the cluster ability# <span class="token keyword">to</span> <span class="token namespace">resist</span> <span class="token keyword">to</span> <span class="token namespace">failures</span> as otherwise an orphaned master can't be failed over# in <span class="token keyword">case</span> of failure <span class="token keyword">if</span> it has no working replicas<span class="token punctuation">.</span>## <span class="token class-name">Replicas</span> migrate <span class="token keyword">to</span> <span class="token namespace">orphaned</span> masters only <span class="token keyword">if</span> there are still at least a# given number of other working replicas <span class="token keyword">for</span> their old master<span class="token punctuation">.</span> <span class="token class-name">This</span> number# is the <span class="token string">"migration barrier"</span><span class="token punctuation">.</span> <span class="token class-name">A</span> migration barrier of <span class="token number">1</span> means that a replica# will migrate only <span class="token keyword">if</span> there is at least <span class="token number">1</span> other working replica <span class="token keyword">for</span> its master# and so forth<span class="token punctuation">.</span> <span class="token class-name">It</span> usually reflects the number of replicas you want <span class="token keyword">for</span> every# master in your cluster<span class="token punctuation">.</span>## <span class="token class-name">Default</span> is <span class="token number">1</span> <span class="token punctuation">(</span>replicas migrate only <span class="token keyword">if</span> their masters remain <span class="token keyword">with</span> <span class="token namespace">at</span> least# one replica<span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token class-name">To</span> disable migration just set it <span class="token keyword">to</span> <span class="token namespace">a</span> very large value<span class="token punctuation">.</span># <span class="token class-name">A</span> value of <span class="token number">0</span> can be set but is useful only <span class="token keyword">for</span> debugging and dangerous# in production<span class="token punctuation">.</span>## cluster<span class="token operator">-</span>migration<span class="token operator">-</span>barrier <span class="token number">1</span># <span class="token class-name">By</span> <span class="token keyword">default</span> <span class="token class-name">Redis</span> <span class="token class-name">Cluster</span> nodes stop accepting queries <span class="token keyword">if</span> they detect there# is at least an hash slot uncovered <span class="token punctuation">(</span>no available node is serving it<span class="token punctuation">)</span><span class="token punctuation">.</span># <span class="token class-name">This</span> way <span class="token keyword">if</span> the cluster is partially down <span class="token punctuation">(</span><span class="token keyword">for</span> example a range of hash slots# are no longer covered<span class="token punctuation">)</span> all the cluster becomes<span class="token punctuation">,</span> eventually<span class="token punctuation">,</span> unavailable<span class="token punctuation">.</span># <span class="token class-name">It</span> automatically returns available as soon as all the slots are covered again<span class="token punctuation">.</span>## <span class="token class-name">However</span> sometimes you want the subset of the cluster which is working<span class="token punctuation">,</span># <span class="token keyword">to</span> <span class="token keyword">continue</span> <span class="token keyword">to</span> <span class="token namespace">accept</span> queries <span class="token keyword">for</span> the part of the key space that is still# covered<span class="token punctuation">.</span> <span class="token class-name">In</span> order <span class="token keyword">to</span> <span class="token keyword">do</span> so<span class="token punctuation">,</span> just set the cluster<span class="token operator">-</span>require<span class="token operator">-</span>full<span class="token operator">-</span>coverage# option <span class="token keyword">to</span> <span class="token namespace">no<span class="token punctuation">.</span></span>## cluster<span class="token operator">-</span>require<span class="token operator">-</span>full<span class="token operator">-</span>coverage yes# <span class="token class-name">This</span> option<span class="token punctuation">,</span> when set <span class="token keyword">to</span> <span class="token namespace">yes</span><span class="token punctuation">,</span> prevents replicas from trying <span class="token keyword">to</span> <span class="token namespace">failover</span> its# master during master failures<span class="token punctuation">.</span> <span class="token class-name">However</span> the master can still perform a# manual failover<span class="token punctuation">,</span> <span class="token keyword">if</span> forced <span class="token keyword">to</span> <span class="token keyword">do</span> so<span class="token punctuation">.</span>## <span class="token class-name">This</span> is useful in different scenarios<span class="token punctuation">,</span> especially in the <span class="token keyword">case</span> of multiple# data center operations<span class="token punctuation">,</span> where we want one side <span class="token keyword">to</span> <span class="token namespace">never</span> be promoted <span class="token keyword">if</span> not# in the <span class="token keyword">case</span> of a total DC failure<span class="token punctuation">.</span>## cluster<span class="token operator">-</span>replica<span class="token operator">-</span>no<span class="token operator">-</span>failover no# <span class="token class-name">This</span> option<span class="token punctuation">,</span> when set <span class="token keyword">to</span> <span class="token namespace">yes</span><span class="token punctuation">,</span> allows nodes <span class="token keyword">to</span> <span class="token namespace">serve</span> read traffic <span class="token keyword">while</span> the# the cluster is in a down state<span class="token punctuation">,</span> as <span class="token keyword">long</span> as it believes it owns the slots<span class="token punctuation">.</span> ## <span class="token class-name">This</span> is useful <span class="token keyword">for</span> two cases<span class="token punctuation">.</span>  <span class="token class-name">The</span> first <span class="token keyword">case</span> is <span class="token keyword">for</span> when an application # doesn't require consistency of data during node failures or network partitions<span class="token punctuation">.</span># <span class="token class-name">One</span> example of <span class="token keyword">this</span> is a cache<span class="token punctuation">,</span> where as <span class="token keyword">long</span> as the node has the data it# should be able <span class="token keyword">to</span> <span class="token namespace">serve</span> it<span class="token punctuation">.</span> ## <span class="token class-name">The</span> second use <span class="token keyword">case</span> is <span class="token keyword">for</span> configurations that don't meet the recommended  # three shards but want <span class="token keyword">to</span> <span class="token namespace">enable</span> cluster mode and scale later<span class="token punctuation">.</span> <span class="token class-name">A</span> # master outage in a <span class="token number">1</span> or <span class="token number">2</span> shard configuration causes a read<span class="token operator">/</span>write outage <span class="token keyword">to</span> <span class="token namespace">the</span># entire cluster without <span class="token keyword">this</span> option set<span class="token punctuation">,</span> <span class="token keyword">with</span> <span class="token namespace">it</span> set there is only a write outage<span class="token punctuation">.</span># <span class="token class-name">Without</span> a quorum of masters<span class="token punctuation">,</span> slot ownership will not change automatically<span class="token punctuation">.</span> ## cluster<span class="token operator">-</span>allow<span class="token operator">-</span>reads<span class="token operator">-</span>when<span class="token operator">-</span>down no# <span class="token class-name">In</span> order <span class="token keyword">to</span> <span class="token namespace">setup</span> your cluster make sure <span class="token keyword">to</span> <span class="token namespace">read</span> the documentation# available at http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>redis<span class="token punctuation">.</span>io web site<span class="token punctuation">.</span>########################## CLUSTER DOCKER<span class="token operator">/</span>NAT support  ######################### <span class="token class-name">In</span> certain deployments<span class="token punctuation">,</span> <span class="token class-name">Redis</span> <span class="token class-name">Cluster</span> nodes address discovery fails<span class="token punctuation">,</span> because# addresses are NAT<span class="token operator">-</span>ted or because ports are forwarded <span class="token punctuation">(</span>the typical <span class="token keyword">case</span> is# <span class="token class-name">Docker</span> and other containers<span class="token punctuation">)</span><span class="token punctuation">.</span>## <span class="token class-name">In</span> order <span class="token keyword">to</span> <span class="token namespace">make</span> <span class="token class-name">Redis</span> <span class="token class-name">Cluster</span> working in such environments<span class="token punctuation">,</span> a <span class="token keyword">static</span># configuration where each node knows its <span class="token keyword">public</span> address is needed<span class="token punctuation">.</span> <span class="token class-name">The</span># following two options are used <span class="token keyword">for</span> <span class="token keyword">this</span> scope<span class="token punctuation">,</span> and are<span class="token operator">:</span>## <span class="token operator">*</span> cluster<span class="token operator">-</span>announce<span class="token operator">-</span>ip# <span class="token operator">*</span> cluster<span class="token operator">-</span>announce<span class="token operator">-</span>port# <span class="token operator">*</span> cluster<span class="token operator">-</span>announce<span class="token operator">-</span>bus<span class="token operator">-</span>port## <span class="token class-name">Each</span> instruct the node about its address<span class="token punctuation">,</span> client port<span class="token punctuation">,</span> and cluster message# bus port<span class="token punctuation">.</span> <span class="token class-name">The</span> information is then published in the header of the bus packets# so that other nodes will be able <span class="token keyword">to</span> <span class="token namespace">correctly</span> map the address of the node# publishing the information<span class="token punctuation">.</span>## <span class="token class-name">If</span> the above options are not used<span class="token punctuation">,</span> the normal <span class="token class-name">Redis</span> <span class="token class-name">Cluster</span> auto<span class="token operator">-</span>detection# will be used instead<span class="token punctuation">.</span>## <span class="token class-name">Note</span> that when remapped<span class="token punctuation">,</span> the bus port may not be at the fixed offset of# clients port <span class="token operator">+</span> <span class="token number">10000</span><span class="token punctuation">,</span> so you can specify any port and bus<span class="token operator">-</span>port depending# on how they get remapped<span class="token punctuation">.</span> <span class="token class-name">If</span> the bus<span class="token operator">-</span>port is not set<span class="token punctuation">,</span> a fixed offset of# <span class="token number">10000</span> will be used as usually<span class="token punctuation">.</span>## <span class="token class-name">Example</span><span class="token operator">:</span>## cluster<span class="token operator">-</span>announce<span class="token operator">-</span>ip <span class="token number">10.1</span><span class="token number">.1</span><span class="token number">.5</span># cluster<span class="token operator">-</span>announce<span class="token operator">-</span>port <span class="token number">6379</span># cluster<span class="token operator">-</span>announce<span class="token operator">-</span>bus<span class="token operator">-</span>port <span class="token number">6380</span>################################## SLOW LOG #################################### <span class="token class-name">The</span> <span class="token class-name">Redis</span> <span class="token class-name">Slow</span> <span class="token class-name">Log</span> is a system <span class="token keyword">to</span> <span class="token namespace">log</span> queries that exceeded a specified# execution time<span class="token punctuation">.</span> <span class="token class-name">The</span> execution time does not include the <span class="token class-name">I</span><span class="token operator">/</span><span class="token class-name">O</span> operations# like talking <span class="token keyword">with</span> <span class="token namespace">the</span> client<span class="token punctuation">,</span> sending the reply and so forth<span class="token punctuation">,</span># but just the time needed <span class="token keyword">to</span> <span class="token namespace">actually</span> execute the command <span class="token punctuation">(</span><span class="token keyword">this</span> is the only# stage of command execution where the thread is blocked and can not serve# other requests in the meantime<span class="token punctuation">)</span><span class="token punctuation">.</span>## <span class="token class-name">You</span> can configure the slow log <span class="token keyword">with</span> <span class="token namespace">two</span> parameters<span class="token operator">:</span> one tells <span class="token class-name">Redis</span># what is the execution time<span class="token punctuation">,</span> in microseconds<span class="token punctuation">,</span> <span class="token keyword">to</span> <span class="token namespace">exceed</span> in order <span class="token keyword">for</span> the# command <span class="token keyword">to</span> <span class="token namespace">get</span> logged<span class="token punctuation">,</span> and the other parameter is the length of the# slow log<span class="token punctuation">.</span> <span class="token class-name">When</span> a <span class="token keyword">new</span> command is logged the oldest one is removed from the# queue of logged commands<span class="token punctuation">.</span># <span class="token class-name">The</span> following time is expressed in microseconds<span class="token punctuation">,</span> so <span class="token number">1000000</span> is equivalent# <span class="token keyword">to</span> <span class="token namespace">one</span> second<span class="token punctuation">.</span> <span class="token class-name">Note</span> that a negative number disables the slow log<span class="token punctuation">,</span> <span class="token keyword">while</span># a value of zero forces the logging of every command<span class="token punctuation">.</span>slowlog<span class="token operator">-</span>log<span class="token operator">-</span>slower<span class="token operator">-</span>than <span class="token number">10000</span># <span class="token class-name">There</span> is no limit <span class="token keyword">to</span> <span class="token keyword">this</span> length<span class="token punctuation">.</span> <span class="token class-name">Just</span> be aware that it will consume memory<span class="token punctuation">.</span># <span class="token class-name">You</span> can reclaim memory used by the slow log <span class="token keyword">with</span> SLOWLOG RESET<span class="token punctuation">.</span>slowlog<span class="token operator">-</span>max<span class="token operator">-</span>len <span class="token number">128</span>################################ LATENCY MONITOR ############################### <span class="token class-name">The</span> <span class="token class-name">Redis</span> latency monitoring subsystem samples different operations# at runtime in order <span class="token keyword">to</span> <span class="token namespace">collect</span> data related <span class="token keyword">to</span> <span class="token namespace">possible</span> sources of# latency of a <span class="token class-name">Redis</span> instance<span class="token punctuation">.</span>## <span class="token class-name">Via</span> the LATENCY command <span class="token keyword">this</span> information is available <span class="token keyword">to</span> <span class="token namespace">the</span> user that can# print graphs and obtain reports<span class="token punctuation">.</span>## <span class="token class-name">The</span> system only logs operations that were performed in a time equal or# greater than the amount of milliseconds specified via the# latency<span class="token operator">-</span>monitor<span class="token operator">-</span>threshold configuration directive<span class="token punctuation">.</span> <span class="token class-name">When</span> its value is set# <span class="token keyword">to</span> <span class="token namespace">zero</span><span class="token punctuation">,</span> the latency monitor is turned off<span class="token punctuation">.</span>## <span class="token class-name">By</span> <span class="token keyword">default</span> latency monitoring is disabled since it is mostly not needed# <span class="token keyword">if</span> you don't have latency issues<span class="token punctuation">,</span> and collecting data has a performance# impact<span class="token punctuation">,</span> that <span class="token keyword">while</span> very small<span class="token punctuation">,</span> can be measured under big load<span class="token punctuation">.</span> <span class="token class-name">Latency</span># monitoring can easily be enabled at runtime using the command# <span class="token string">"CONFIG SET latency-monitor-threshold &lt;milliseconds&gt;"</span> <span class="token keyword">if</span> needed<span class="token punctuation">.</span>latency<span class="token operator">-</span>monitor<span class="token operator">-</span>threshold <span class="token number">0</span>############################# EVENT NOTIFICATION ############################### <span class="token class-name">Redis</span> can notify <span class="token class-name">Pub</span><span class="token operator">/</span><span class="token class-name">Sub</span> clients about events happening in the key space<span class="token punctuation">.</span># <span class="token class-name">This</span> feature is documented at http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>redis<span class="token punctuation">.</span>io<span class="token operator">/</span>topics<span class="token operator">/</span>notifications## <span class="token class-name">For</span> instance <span class="token keyword">if</span> keyspace events notification is enabled<span class="token punctuation">,</span> and a client# performs a DEL operation on key <span class="token string">"foo"</span> stored in the <span class="token class-name">Database</span> <span class="token number">0</span><span class="token punctuation">,</span> two# messages will be published via <span class="token class-name">Pub</span><span class="token operator">/</span><span class="token class-name">Sub</span><span class="token operator">:</span>## PUBLISH __keyspace<span class="token annotation punctuation">@0__</span><span class="token operator">:</span>foo del# PUBLISH __keyevent<span class="token annotation punctuation">@0__</span><span class="token operator">:</span>del foo## <span class="token class-name">It</span> is possible <span class="token keyword">to</span> <span class="token namespace">select</span> the events that <span class="token class-name">Redis</span> will notify among a set# of classes<span class="token punctuation">.</span> <span class="token class-name">Every</span> <span class="token keyword">class</span> is identified by a single character<span class="token operator">:</span>##  <span class="token class-name">K</span>     <span class="token class-name">Keyspace</span> events<span class="token punctuation">,</span> published <span class="token keyword">with</span> __keyspace@<span class="token generics"><span class="token punctuation">&lt;</span>db<span class="token punctuation">&gt;</span></span>__ prefix<span class="token punctuation">.</span>#  <span class="token class-name">E</span>     <span class="token class-name">Keyevent</span> events<span class="token punctuation">,</span> published <span class="token keyword">with</span> __keyevent@<span class="token generics"><span class="token punctuation">&lt;</span>db<span class="token punctuation">&gt;</span></span>__ prefix<span class="token punctuation">.</span>#  g     <span class="token class-name">Generic</span> commands <span class="token punctuation">(</span>non<span class="token operator">-</span>type specific<span class="token punctuation">)</span> like DEL<span class="token punctuation">,</span> EXPIRE<span class="token punctuation">,</span> RENAME<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>#  $     <span class="token class-name">String</span> commands#  l     <span class="token class-name">List</span> commands#  s     <span class="token class-name">Set</span> commands#  h     <span class="token class-name">Hash</span> commands#  z     <span class="token class-name">Sorted</span> set commands#  x     <span class="token class-name">Expired</span> events <span class="token punctuation">(</span>events generated every time a key expires<span class="token punctuation">)</span>#  e     <span class="token class-name">Evicted</span> events <span class="token punctuation">(</span>events generated when a key is evicted <span class="token keyword">for</span> maxmemory<span class="token punctuation">)</span>#  t     <span class="token class-name">Stream</span> commands#  m     <span class="token class-name">Key</span><span class="token operator">-</span>miss events <span class="token punctuation">(</span><span class="token class-name">Note</span><span class="token operator">:</span> <span class="token class-name">It</span> is not included in the <span class="token string">'A'</span> <span class="token keyword">class</span><span class="token punctuation">)</span>#  <span class="token class-name">A</span>     <span class="token class-name">Alias</span> <span class="token keyword">for</span> g$lshzxet<span class="token punctuation">,</span> so that the <span class="token string">"AKE"</span> string means all the events#        <span class="token punctuation">(</span><span class="token class-name">Except</span> key<span class="token operator">-</span>miss events which are excluded from <span class="token string">'A'</span> due <span class="token keyword">to</span> <span class="token namespace">their</span>#         unique nature<span class="token punctuation">)</span><span class="token punctuation">.</span>##  <span class="token class-name">The</span> <span class="token string">"notify-keyspace-events"</span> takes as argument a string that is composed#  of zero or multiple characters<span class="token punctuation">.</span> <span class="token class-name">The</span> empty string means that notifications#  are disabled<span class="token punctuation">.</span>##  <span class="token class-name">Example</span><span class="token operator">:</span> <span class="token keyword">to</span> <span class="token namespace">enable</span> list and generic events<span class="token punctuation">,</span> from the point of view of the#           event name<span class="token punctuation">,</span> use<span class="token operator">:</span>##  notify<span class="token operator">-</span>keyspace<span class="token operator">-</span>events <span class="token class-name">Elg</span>##  <span class="token class-name">Example</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token keyword">to</span> <span class="token namespace">get</span> the stream of the expired keys subscribing <span class="token keyword">to</span> <span class="token namespace">channel</span>#             name __keyevent<span class="token annotation punctuation">@0__</span><span class="token operator">:</span>expired use<span class="token operator">:</span>##  notify<span class="token operator">-</span>keyspace<span class="token operator">-</span>events <span class="token class-name">Ex</span>##  <span class="token class-name">By</span> <span class="token keyword">default</span> all notifications are disabled because most users don't need#  <span class="token keyword">this</span> feature and the feature has some overhead<span class="token punctuation">.</span> <span class="token class-name">Note</span> that <span class="token keyword">if</span> you don't#  specify at least one of <span class="token class-name">K</span> or <span class="token class-name">E</span><span class="token punctuation">,</span> no events will be delivered<span class="token punctuation">.</span>notify<span class="token operator">-</span>keyspace<span class="token operator">-</span>events <span class="token string">""</span>############################### GOPHER SERVER ################################## <span class="token class-name">Redis</span> contains an implementation of the <span class="token class-name">Gopher</span> protocol<span class="token punctuation">,</span> as specified in# the <span class="token class-name">RFC</span> <span class="token number">1436</span> <span class="token punctuation">(</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>ietf<span class="token punctuation">.</span>org<span class="token operator">/</span>rfc<span class="token operator">/</span>rfc1436<span class="token punctuation">.</span>txt<span class="token punctuation">)</span><span class="token punctuation">.</span>## <span class="token class-name">The</span> <span class="token class-name">Gopher</span> protocol was very popular in the late '<span class="token number">90</span>s<span class="token punctuation">.</span> <span class="token class-name">It</span> is an alternative# <span class="token keyword">to</span> <span class="token namespace">the</span> web<span class="token punctuation">,</span> and the implementation both server and client side is so simple# that the <span class="token class-name">Redis</span> server has just <span class="token number">100</span> lines of code in order <span class="token keyword">to</span> <span class="token namespace">implement</span> <span class="token keyword">this</span># support<span class="token punctuation">.</span>## <span class="token class-name">What</span> <span class="token keyword">do</span> you <span class="token keyword">do</span> <span class="token keyword">with</span> <span class="token class-name">Gopher</span> nowadays<span class="token operator">?</span> <span class="token class-name">Well</span> <span class="token class-name">Gopher</span> never <span class="token operator">*</span>really<span class="token operator">*</span> died<span class="token punctuation">,</span> and# lately there is a movement in order <span class="token keyword">for</span> the <span class="token class-name">Gopher</span> more hierarchical content# composed of just plain text documents <span class="token keyword">to</span> <span class="token namespace">be</span> resurrected<span class="token punctuation">.</span> <span class="token class-name">Some</span> want a simpler# internet<span class="token punctuation">,</span> others believe that the mainstream internet became too much# controlled<span class="token punctuation">,</span> and it's cool <span class="token keyword">to</span> <span class="token namespace">create</span> an alternative space <span class="token keyword">for</span> people that# want a bit of fresh air<span class="token punctuation">.</span>## <span class="token class-name">Anyway</span> <span class="token keyword">for</span> the <span class="token number">10</span>nth birthday of the <span class="token class-name">Redis</span><span class="token punctuation">,</span> we gave it the <span class="token class-name">Gopher</span> protocol# as a gift<span class="token punctuation">.</span>## <span class="token operator">--</span><span class="token operator">-</span> HOW IT WORKS<span class="token operator">?</span> <span class="token operator">--</span><span class="token operator">-</span>## <span class="token class-name">The</span> <span class="token class-name">Redis</span> <span class="token class-name">Gopher</span> support <span class="token keyword">uses</span> <span class="token namespace">the</span> inline protocol of <span class="token class-name">Redis</span><span class="token punctuation">,</span> and specifically# two kind of inline requests that were anyway illegal<span class="token operator">:</span> an empty request# or any request that starts <span class="token keyword">with</span> <span class="token string">"/"</span> <span class="token punctuation">(</span>there are no <span class="token class-name">Redis</span> commands starting# <span class="token keyword">with</span> <span class="token namespace">such</span> a slash<span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token class-name">Normal</span> RESP2<span class="token operator">/</span>RESP3 requests are completely out of the# path of the <span class="token class-name">Gopher</span> protocol implementation and are served as usually as well<span class="token punctuation">.</span>## <span class="token class-name">If</span> you <span class="token keyword">open</span> <span class="token namespace">a</span> connection <span class="token keyword">to</span> <span class="token class-name">Redis</span> when <span class="token class-name">Gopher</span> is enabled and send it# a string like <span class="token string">"/foo"</span><span class="token punctuation">,</span> <span class="token keyword">if</span> there is a key named <span class="token string">"/foo"</span> it is served via the# <span class="token class-name">Gopher</span> protocol<span class="token punctuation">.</span>## <span class="token class-name">In</span> order <span class="token keyword">to</span> <span class="token namespace">create</span> a real <span class="token class-name">Gopher</span> <span class="token string">"hole"</span> <span class="token punctuation">(</span>the name of a <span class="token class-name">Gopher</span> site in <span class="token class-name">Gopher</span># talking<span class="token punctuation">)</span><span class="token punctuation">,</span> you likely need a script like the following<span class="token operator">:</span>##   https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>antirez<span class="token operator">/</span>gopher2redis## <span class="token operator">--</span><span class="token operator">-</span> SECURITY WARNING <span class="token operator">--</span><span class="token operator">-</span>## <span class="token class-name">If</span> you plan <span class="token keyword">to</span> <span class="token namespace">put</span> <span class="token class-name">Redis</span> on the internet in a publicly accessible address# <span class="token keyword">to</span> <span class="token namespace">server</span> <span class="token class-name">Gopher</span> pages MAKE SURE TO SET <span class="token class-name">A</span> PASSWORD <span class="token keyword">to</span> <span class="token namespace">the</span> instance<span class="token punctuation">.</span># <span class="token class-name">Once</span> a password is set<span class="token operator">:</span>##   <span class="token number">1.</span> <span class="token class-name">The</span> <span class="token class-name">Gopher</span> server <span class="token punctuation">(</span>when enabled<span class="token punctuation">,</span> not by <span class="token keyword">default</span><span class="token punctuation">)</span> will still serve#      content via <span class="token class-name">Gopher</span><span class="token punctuation">.</span>#   <span class="token number">2.</span> <span class="token class-name">However</span> other commands cannot be called before the client will#      authenticate<span class="token punctuation">.</span>## <span class="token class-name">So</span> use the <span class="token string">'requirepass'</span> option <span class="token keyword">to</span> <span class="token namespace">protect</span> your instance<span class="token punctuation">.</span>## <span class="token class-name">To</span> enable <span class="token class-name">Gopher</span> support uncomment the following line and set# the option from no <span class="token punctuation">(</span>the <span class="token keyword">default</span><span class="token punctuation">)</span> <span class="token keyword">to</span> <span class="token namespace">yes<span class="token punctuation">.</span></span>## gopher<span class="token operator">-</span>enabled no############################### ADVANCED CONFIG ################################ <span class="token class-name">Hashes</span> are encoded using a memory efficient data structure when they have a# small number of entries<span class="token punctuation">,</span> and the biggest entry does not exceed a given# threshold<span class="token punctuation">.</span> <span class="token class-name">These</span> thresholds can be configured using the following directives<span class="token punctuation">.</span>hash<span class="token operator">-</span>max<span class="token operator">-</span>ziplist<span class="token operator">-</span>entries <span class="token number">512</span>hash<span class="token operator">-</span>max<span class="token operator">-</span>ziplist<span class="token operator">-</span>value <span class="token number">64</span># <span class="token class-name">Lists</span> are also encoded in a special way <span class="token keyword">to</span> <span class="token namespace">save</span> a lot of space<span class="token punctuation">.</span># <span class="token class-name">The</span> number of entries allowed per internal list node can be specified# as a fixed maximum size or a maximum number of elements<span class="token punctuation">.</span># <span class="token class-name">For</span> a fixed maximum size<span class="token punctuation">,</span> use <span class="token operator">-</span><span class="token number">5</span> through <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> meaning<span class="token operator">:</span># <span class="token operator">-</span><span class="token number">5</span><span class="token operator">:</span> max size<span class="token operator">:</span> <span class="token number">64</span> <span class="token class-name">Kb</span>  <span class="token operator">&lt;</span><span class="token operator">--</span> not recommended <span class="token keyword">for</span> normal workloads# <span class="token operator">-</span><span class="token number">4</span><span class="token operator">:</span> max size<span class="token operator">:</span> <span class="token number">32</span> <span class="token class-name">Kb</span>  <span class="token operator">&lt;</span><span class="token operator">--</span> not recommended# <span class="token operator">-</span><span class="token number">3</span><span class="token operator">:</span> max size<span class="token operator">:</span> <span class="token number">16</span> <span class="token class-name">Kb</span>  <span class="token operator">&lt;</span><span class="token operator">--</span> probably not recommended# <span class="token operator">-</span><span class="token number">2</span><span class="token operator">:</span> max size<span class="token operator">:</span> <span class="token number">8</span> <span class="token class-name">Kb</span>   <span class="token operator">&lt;</span><span class="token operator">--</span> good# <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> max size<span class="token operator">:</span> <span class="token number">4</span> <span class="token class-name">Kb</span>   <span class="token operator">&lt;</span><span class="token operator">--</span> good# <span class="token class-name">Positive</span> numbers mean store up <span class="token keyword">to</span> _exactly_ that number of elements# per list node<span class="token punctuation">.</span># <span class="token class-name">The</span> highest performing option is usually <span class="token operator">-</span><span class="token number">2</span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token class-name">Kb</span> size<span class="token punctuation">)</span> or <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token class-name">Kb</span> size<span class="token punctuation">)</span><span class="token punctuation">,</span># but <span class="token keyword">if</span> your use <span class="token keyword">case</span> is unique<span class="token punctuation">,</span> adjust the settings as necessary<span class="token punctuation">.</span>list<span class="token operator">-</span>max<span class="token operator">-</span>ziplist<span class="token operator">-</span>size <span class="token operator">-</span><span class="token number">2</span># <span class="token class-name">Lists</span> may also be compressed<span class="token punctuation">.</span># <span class="token class-name">Compress</span> depth is the number of quicklist ziplist nodes from <span class="token operator">*</span>each<span class="token operator">*</span> side of# the list <span class="token keyword">to</span> <span class="token operator">*</span>exclude<span class="token operator">*</span> from compression<span class="token punctuation">.</span>  <span class="token class-name">The</span> head and tail of the list# are always uncompressed <span class="token keyword">for</span> fast push<span class="token operator">/</span>pop operations<span class="token punctuation">.</span>  <span class="token class-name">Settings</span> are<span class="token operator">:</span># <span class="token number">0</span><span class="token operator">:</span> disable all list compression# <span class="token number">1</span><span class="token operator">:</span> depth <span class="token number">1</span> means "don't start compressing until after <span class="token number">1</span> node into the list<span class="token punctuation">,</span>#    going from either the head or tail"#    <span class="token class-name">So</span><span class="token operator">:</span> <span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token operator">-&gt;</span>node<span class="token operator">-&gt;</span>node<span class="token operator">-&gt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>-<span class="token operator">&gt;</span>node<span class="token operator">-&gt;</span><span class="token punctuation">[</span>tail<span class="token punctuation">]</span>#    <span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>tail<span class="token punctuation">]</span> will always be uncompressed<span class="token punctuation">;</span> inner nodes will compress<span class="token punctuation">.</span># <span class="token number">2</span><span class="token operator">:</span> <span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token operator">-&gt;</span>node<span class="token operator">-&gt;</span>node<span class="token operator">-&gt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>-<span class="token operator">&gt;</span>node<span class="token operator">-&gt;</span><span class="token punctuation">[</span>prev<span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">[</span>tail<span class="token punctuation">]</span>#    <span class="token number">2</span> here means<span class="token operator">:</span> don't compress head or head<span class="token operator">-&gt;</span>next or tail<span class="token operator">-&gt;</span>prev or tail<span class="token punctuation">,</span>#    but compress all nodes between them<span class="token punctuation">.</span># <span class="token number">3</span><span class="token operator">:</span> <span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token operator">-&gt;</span>node<span class="token operator">-&gt;</span>node<span class="token operator">-&gt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>-<span class="token operator">&gt;</span>node<span class="token operator">-&gt;</span><span class="token punctuation">[</span>prev<span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">[</span>prev<span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token punctuation">[</span>tail<span class="token punctuation">]</span># etc<span class="token punctuation">.</span>list<span class="token operator">-</span>compress<span class="token operator">-</span>depth <span class="token number">0</span># <span class="token class-name">Sets</span> have a special encoding in just one <span class="token keyword">case</span><span class="token operator">:</span> when a set is composed# of just strings that happen <span class="token keyword">to</span> <span class="token namespace">be</span> integers in radix <span class="token number">10</span> in the range# of <span class="token number">64</span> bit signed integers<span class="token punctuation">.</span># <span class="token class-name">The</span> following configuration setting sets the limit in the size of the# set in order <span class="token keyword">to</span> <span class="token namespace">use</span> <span class="token keyword">this</span> special memory saving encoding<span class="token punctuation">.</span>set<span class="token operator">-</span>max<span class="token operator">-</span>intset<span class="token operator">-</span>entries <span class="token number">512</span># <span class="token class-name">Similarly</span> <span class="token keyword">to</span> <span class="token namespace">hashes</span> and lists<span class="token punctuation">,</span> sorted sets are also specially encoded in# order <span class="token keyword">to</span> <span class="token namespace">save</span> a lot of space<span class="token punctuation">.</span> <span class="token class-name">This</span> encoding is only used when the length and# elements of a sorted set are below the following limits<span class="token operator">:</span>zset<span class="token operator">-</span>max<span class="token operator">-</span>ziplist<span class="token operator">-</span>entries <span class="token number">128</span>zset<span class="token operator">-</span>max<span class="token operator">-</span>ziplist<span class="token operator">-</span>value <span class="token number">64</span># <span class="token class-name">HyperLogLog</span> sparse representation bytes limit<span class="token punctuation">.</span> <span class="token class-name">The</span> limit includes the# <span class="token number">16</span> bytes header<span class="token punctuation">.</span> <span class="token class-name">When</span> an <span class="token class-name">HyperLogLog</span> using the sparse representation crosses# <span class="token keyword">this</span> limit<span class="token punctuation">,</span> it is converted into the dense representation<span class="token punctuation">.</span>## <span class="token class-name">A</span> value greater than <span class="token number">16000</span> is totally useless<span class="token punctuation">,</span> since at that point the# dense representation is more memory efficient<span class="token punctuation">.</span>## <span class="token class-name">The</span> suggested value is <span class="token operator">~</span> <span class="token number">3000</span> in order <span class="token keyword">to</span> <span class="token namespace">have</span> the benefits of# the space efficient encoding without slowing down too much PFADD<span class="token punctuation">,</span># which is <span class="token class-name">O</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token keyword">with</span> <span class="token namespace">the</span> sparse encoding<span class="token punctuation">.</span> <span class="token class-name">The</span> value can be raised <span class="token keyword">to</span># <span class="token operator">~</span> <span class="token number">10000</span> when CPU is not a concern<span class="token punctuation">,</span> but space is<span class="token punctuation">,</span> and the data set is# composed of many <span class="token class-name">HyperLogLogs</span> <span class="token keyword">with</span> <span class="token namespace">cardinality</span> in the <span class="token number">0</span> <span class="token operator">-</span> <span class="token number">15000</span> range<span class="token punctuation">.</span>hll<span class="token operator">-</span>sparse<span class="token operator">-</span>max<span class="token operator">-</span>bytes <span class="token number">3000</span># <span class="token class-name">Streams</span> macro node max size <span class="token operator">/</span> items<span class="token punctuation">.</span> <span class="token class-name">The</span> stream data structure is a radix# tree of big nodes that encode multiple items inside<span class="token punctuation">.</span> <span class="token class-name">Using</span> <span class="token keyword">this</span> configuration# it is possible <span class="token keyword">to</span> <span class="token namespace">configure</span> how big a single node can be in bytes<span class="token punctuation">,</span> and the# maximum number of items it may contain before switching <span class="token keyword">to</span> <span class="token namespace">a</span> <span class="token keyword">new</span> node when# appending <span class="token keyword">new</span> stream entries<span class="token punctuation">.</span> <span class="token class-name">If</span> any of the following settings are set <span class="token keyword">to</span># zero<span class="token punctuation">,</span> the limit is ignored<span class="token punctuation">,</span> so <span class="token keyword">for</span> instance it is possible <span class="token keyword">to</span> <span class="token namespace">set</span> just a# max entires limit by setting max<span class="token operator">-</span>bytes <span class="token keyword">to</span> <span class="token number">0</span> and max<span class="token operator">-</span>entries <span class="token keyword">to</span> <span class="token namespace">the</span> desired# value<span class="token punctuation">.</span>stream<span class="token operator">-</span>node<span class="token operator">-</span>max<span class="token operator">-</span>bytes <span class="token number">4096</span>stream<span class="token operator">-</span>node<span class="token operator">-</span>max<span class="token operator">-</span>entries <span class="token number">100</span># <span class="token class-name">Active</span> rehashing <span class="token keyword">uses</span> <span class="token number">1</span> millisecond every <span class="token number">100</span> milliseconds of CPU time in# order <span class="token keyword">to</span> <span class="token namespace">help</span> rehashing the main <span class="token class-name">Redis</span> hash table <span class="token punctuation">(</span>the one mapping top<span class="token operator">-</span>level# keys <span class="token keyword">to</span> <span class="token namespace">values</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token class-name">The</span> hash table implementation <span class="token class-name">Redis</span> <span class="token keyword">uses</span> <span class="token punctuation">(</span>see dict<span class="token punctuation">.</span>c<span class="token punctuation">)</span># performs a lazy rehashing<span class="token operator">:</span> the more operation you run into a hash table# that is rehashing<span class="token punctuation">,</span> the more rehashing <span class="token string">"steps"</span> are performed<span class="token punctuation">,</span> so <span class="token keyword">if</span> the# server is idle the rehashing is never complete and some more memory is used# by the hash table<span class="token punctuation">.</span>## <span class="token class-name">The</span> <span class="token keyword">default</span> is <span class="token keyword">to</span> <span class="token namespace">use</span> <span class="token keyword">this</span> millisecond <span class="token number">10</span> times every second in order <span class="token keyword">to</span># actively rehash the main dictionaries<span class="token punctuation">,</span> freeing memory when possible<span class="token punctuation">.</span>## <span class="token class-name">If</span> unsure<span class="token operator">:</span># use <span class="token string">"activerehashing no"</span> <span class="token keyword">if</span> you have hard latency requirements and it is# not a good thing in your environment that <span class="token class-name">Redis</span> can reply from time <span class="token keyword">to</span> <span class="token namespace">time</span># <span class="token keyword">to</span> <span class="token namespace">queries</span> <span class="token keyword">with</span> <span class="token number">2</span> milliseconds delay<span class="token punctuation">.</span>## use <span class="token string">"activerehashing yes"</span> <span class="token keyword">if</span> you don't have such hard requirements but# want <span class="token keyword">to</span> <span class="token namespace">free</span> memory asap when possible<span class="token punctuation">.</span>activerehashing yes# <span class="token class-name">The</span> client output buffer limits can be used <span class="token keyword">to</span> <span class="token namespace">force</span> disconnection of clients# that are not reading data from the server fast enough <span class="token keyword">for</span> some reason <span class="token punctuation">(</span>a# common reason is that a <span class="token class-name">Pub</span><span class="token operator">/</span><span class="token class-name">Sub</span> client can't consume messages as fast as the# publisher can produce them<span class="token punctuation">)</span><span class="token punctuation">.</span>## <span class="token class-name">The</span> limit can be set differently <span class="token keyword">for</span> the three different classes of clients<span class="token operator">:</span>## normal <span class="token operator">-&gt;</span> normal clients including MONITOR clients# replica  <span class="token operator">-&gt;</span> replica clients# pubsub <span class="token operator">-&gt;</span> clients subscribed <span class="token keyword">to</span> <span class="token namespace">at</span> least one pubsub channel or pattern## <span class="token class-name">The</span> syntax of every client<span class="token operator">-</span>output<span class="token operator">-</span>buffer<span class="token operator">-</span>limit directive is the following<span class="token operator">:</span>## client<span class="token operator">-</span>output<span class="token operator">-</span>buffer<span class="token operator">-</span>limit <span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">class</span><span class="token punctuation">&gt;</span></span> <span class="token generics"><span class="token punctuation">&lt;</span>hard limit<span class="token punctuation">&gt;</span></span> <span class="token generics"><span class="token punctuation">&lt;</span>soft limit<span class="token punctuation">&gt;</span></span> <span class="token generics"><span class="token punctuation">&lt;</span>soft seconds<span class="token punctuation">&gt;</span></span>## <span class="token class-name">A</span> client is immediately disconnected once the hard limit is reached<span class="token punctuation">,</span> or <span class="token keyword">if</span># the soft limit is reached and remains reached <span class="token keyword">for</span> the specified number of# seconds <span class="token punctuation">(</span>continuously<span class="token punctuation">)</span><span class="token punctuation">.</span># <span class="token class-name">So</span> <span class="token keyword">for</span> instance <span class="token keyword">if</span> the hard limit is <span class="token number">32</span> megabytes and the soft limit is# <span class="token number">16</span> megabytes <span class="token operator">/</span> <span class="token number">10</span> seconds<span class="token punctuation">,</span> the client will get disconnected immediately# <span class="token keyword">if</span> the size of the output buffers reach <span class="token number">32</span> megabytes<span class="token punctuation">,</span> but will also get# disconnected <span class="token keyword">if</span> the client reaches <span class="token number">16</span> megabytes and continuously overcomes# the limit <span class="token keyword">for</span> <span class="token number">10</span> seconds<span class="token punctuation">.</span>## <span class="token class-name">By</span> <span class="token keyword">default</span> normal clients are not limited because they don't receive data# without asking <span class="token punctuation">(</span>in a push way<span class="token punctuation">)</span><span class="token punctuation">,</span> but just after a request<span class="token punctuation">,</span> so only# asynchronous clients may create a scenario where data is requested faster# than it can read<span class="token punctuation">.</span>## <span class="token class-name">Instead</span> there is a <span class="token keyword">default</span> limit <span class="token keyword">for</span> pubsub and replica clients<span class="token punctuation">,</span> since# subscribers and replicas receive data in a push fashion<span class="token punctuation">.</span>## <span class="token class-name">Both</span> the hard or the soft limit can be disabled by setting them <span class="token keyword">to</span> <span class="token namespace">zero<span class="token punctuation">.</span></span>client<span class="token operator">-</span>output<span class="token operator">-</span>buffer<span class="token operator">-</span>limit normal <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span>client<span class="token operator">-</span>output<span class="token operator">-</span>buffer<span class="token operator">-</span>limit replica <span class="token number">256</span>mb <span class="token number">64</span>mb <span class="token number">60</span>client<span class="token operator">-</span>output<span class="token operator">-</span>buffer<span class="token operator">-</span>limit pubsub <span class="token number">32</span>mb <span class="token number">8</span>mb <span class="token number">60</span># <span class="token class-name">Client</span> query buffers accumulate <span class="token keyword">new</span> commands<span class="token punctuation">.</span> <span class="token class-name">They</span> are limited <span class="token keyword">to</span> <span class="token namespace">a</span> fixed# amount by <span class="token keyword">default</span> in order <span class="token keyword">to</span> <span class="token namespace">avoid</span> that a protocol desynchronization <span class="token punctuation">(</span><span class="token keyword">for</span># instance due <span class="token keyword">to</span> <span class="token namespace">a</span> bug in the client<span class="token punctuation">)</span> will lead <span class="token keyword">to</span> <span class="token namespace">unbound</span> memory usage in# the query buffer<span class="token punctuation">.</span> <span class="token class-name">However</span> you can configure it here <span class="token keyword">if</span> you have very special# needs<span class="token punctuation">,</span> such us huge multi<span class="token operator">/</span>exec requests or alike<span class="token punctuation">.</span>## client<span class="token operator">-</span>query<span class="token operator">-</span>buffer<span class="token operator">-</span>limit <span class="token number">1</span>gb# <span class="token class-name">In</span> the <span class="token class-name">Redis</span> protocol<span class="token punctuation">,</span> bulk requests<span class="token punctuation">,</span> that are<span class="token punctuation">,</span> elements representing single# strings<span class="token punctuation">,</span> are normally limited ot <span class="token number">512</span> mb<span class="token punctuation">.</span> <span class="token class-name">However</span> you can change <span class="token keyword">this</span> limit# here<span class="token punctuation">,</span> but must be <span class="token number">1</span>mb or greater## proto<span class="token operator">-</span>max<span class="token operator">-</span>bulk<span class="token operator">-</span>len <span class="token number">512</span>mb# <span class="token class-name">Redis</span> calls an internal function <span class="token keyword">to</span> <span class="token namespace">perform</span> many background tasks<span class="token punctuation">,</span> like# closing connections of clients in timeout<span class="token punctuation">,</span> purging expired keys that are# never requested<span class="token punctuation">,</span> and so forth<span class="token punctuation">.</span>## <span class="token class-name">Not</span> all tasks are performed <span class="token keyword">with</span> <span class="token namespace">the</span> same frequency<span class="token punctuation">,</span> but <span class="token class-name">Redis</span> checks <span class="token keyword">for</span># tasks <span class="token keyword">to</span> <span class="token namespace">perform</span> according <span class="token keyword">to</span> <span class="token namespace">the</span> specified <span class="token string">"hz"</span> value<span class="token punctuation">.</span>## <span class="token class-name">By</span> <span class="token keyword">default</span> <span class="token string">"hz"</span> is set <span class="token keyword">to</span> <span class="token number">10.</span> <span class="token class-name">Raising</span> the value will use more CPU when# <span class="token class-name">Redis</span> is idle<span class="token punctuation">,</span> but at the same time will make <span class="token class-name">Redis</span> more responsive when# there are many keys expiring at the same time<span class="token punctuation">,</span> and timeouts may be# handled <span class="token keyword">with</span> <span class="token namespace">more</span> precision<span class="token punctuation">.</span>## <span class="token class-name">The</span> range is between <span class="token number">1</span> and <span class="token number">500</span><span class="token punctuation">,</span> however a value over <span class="token number">100</span> is usually not# a good idea<span class="token punctuation">.</span> <span class="token class-name">Most</span> users should use the <span class="token keyword">default</span> of <span class="token number">10</span> and raise <span class="token keyword">this</span> up <span class="token keyword">to</span># <span class="token number">100</span> only in environments where very low latency is required<span class="token punctuation">.</span>hz <span class="token number">10</span># <span class="token class-name">Normally</span> it is useful <span class="token keyword">to</span> <span class="token namespace">have</span> an HZ value which is proportional <span class="token keyword">to</span> <span class="token namespace">the</span># number of clients connected<span class="token punctuation">.</span> <span class="token class-name">This</span> is useful in order<span class="token punctuation">,</span> <span class="token keyword">for</span> instance<span class="token punctuation">,</span> <span class="token keyword">to</span># avoid too many clients are processed <span class="token keyword">for</span> each background task invocation# in order <span class="token keyword">to</span> <span class="token namespace">avoid</span> latency spikes<span class="token punctuation">.</span>## <span class="token class-name">Since</span> the <span class="token keyword">default</span> HZ value by <span class="token keyword">default</span> is conservatively set <span class="token keyword">to</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">Redis</span># offers<span class="token punctuation">,</span> and enables by <span class="token keyword">default</span><span class="token punctuation">,</span> the ability <span class="token keyword">to</span> <span class="token namespace">use</span> an adaptive HZ value# which will temporary raise when there are many connected clients<span class="token punctuation">.</span>## <span class="token class-name">When</span> dynamic HZ is enabled<span class="token punctuation">,</span> the actual configured HZ will be used# as a baseline<span class="token punctuation">,</span> but multiples of the configured HZ value will be actually# used as needed once more clients are connected<span class="token punctuation">.</span> <span class="token class-name">In</span> <span class="token keyword">this</span> way an idle# instance will use very little CPU time <span class="token keyword">while</span> a busy instance will be# more responsive<span class="token punctuation">.</span>dynamic<span class="token operator">-</span>hz yes# <span class="token class-name">When</span> a child rewrites the <span class="token class-name">AOF</span> file<span class="token punctuation">,</span> <span class="token keyword">if</span> the following option is enabled# the file will be fsync<span class="token operator">-</span>ed every <span class="token number">32</span> MB of data generated<span class="token punctuation">.</span> <span class="token class-name">This</span> is useful# in order <span class="token keyword">to</span> <span class="token namespace">commit</span> the file <span class="token keyword">to</span> <span class="token namespace">the</span> disk more incrementally and avoid# big latency spikes<span class="token punctuation">.</span>aof<span class="token operator">-</span>rewrite<span class="token operator">-</span>incremental<span class="token operator">-</span>fsync yes# <span class="token class-name">When</span> redis saves <span class="token class-name">RDB</span> file<span class="token punctuation">,</span> <span class="token keyword">if</span> the following option is enabled# the file will be fsync<span class="token operator">-</span>ed every <span class="token number">32</span> MB of data generated<span class="token punctuation">.</span> <span class="token class-name">This</span> is useful# in order <span class="token keyword">to</span> <span class="token namespace">commit</span> the file <span class="token keyword">to</span> <span class="token namespace">the</span> disk more incrementally and avoid# big latency spikes<span class="token punctuation">.</span>rdb<span class="token operator">-</span>save<span class="token operator">-</span>incremental<span class="token operator">-</span>fsync yes# <span class="token class-name">Redis</span> <span class="token class-name">LFU</span> eviction <span class="token punctuation">(</span>see maxmemory setting<span class="token punctuation">)</span> can be tuned<span class="token punctuation">.</span> <span class="token class-name">However</span> it is a good# idea <span class="token keyword">to</span> <span class="token namespace">start</span> <span class="token keyword">with</span> <span class="token namespace">the</span> <span class="token keyword">default</span> settings and only change them after investigating# how <span class="token keyword">to</span> <span class="token namespace">improve</span> the performances and how the keys LFU change over time<span class="token punctuation">,</span> which# is possible <span class="token keyword">to</span> <span class="token namespace">inspect</span> via the OBJECT FREQ command<span class="token punctuation">.</span>## <span class="token class-name">There</span> are two tunable parameters in the <span class="token class-name">Redis</span> LFU implementation<span class="token operator">:</span> the# counter logarithm factor and the counter decay time<span class="token punctuation">.</span> <span class="token class-name">It</span> is important <span class="token keyword">to</span># understand what the two parameters mean before changing them<span class="token punctuation">.</span>## <span class="token class-name">The</span> LFU counter is just <span class="token number">8</span> bits per key<span class="token punctuation">,</span> it's maximum value is <span class="token number">255</span><span class="token punctuation">,</span> so <span class="token class-name">Redis</span># <span class="token keyword">uses</span> <span class="token namespace">a</span> probabilistic increment <span class="token keyword">with</span> <span class="token namespace">logarithmic</span> behavior<span class="token punctuation">.</span> <span class="token class-name">Given</span> the value# of the old counter<span class="token punctuation">,</span> when a key is accessed<span class="token punctuation">,</span> the counter is incremented in# <span class="token keyword">this</span> way<span class="token operator">:</span>## <span class="token number">1.</span> <span class="token class-name">A</span> random number <span class="token class-name">R</span> between <span class="token number">0</span> and <span class="token number">1</span> is extracted<span class="token punctuation">.</span># <span class="token number">2.</span> <span class="token class-name">A</span> probability <span class="token class-name">P</span> is calculated as <span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span>old_value<span class="token operator">*</span>lfu_log_factor<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span># <span class="token number">3.</span> <span class="token class-name">The</span> counter is incremented only <span class="token keyword">if</span> <span class="token class-name">R</span> <span class="token operator">&lt;</span> <span class="token class-name">P</span><span class="token punctuation">.</span>## <span class="token class-name">The</span> <span class="token keyword">default</span> lfu<span class="token operator">-</span>log<span class="token operator">-</span>factor is <span class="token number">10.</span> <span class="token class-name">This</span> is a table of how the frequency# counter changes <span class="token keyword">with</span> <span class="token namespace">a</span> different number of accesses <span class="token keyword">with</span> <span class="token namespace">different</span># logarithmic factors<span class="token operator">:</span>## <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span># <span class="token operator">|</span> factor <span class="token operator">|</span> <span class="token number">100</span> hits   <span class="token operator">|</span> <span class="token number">1000</span> hits  <span class="token operator">|</span> <span class="token number">100</span>K hits  <span class="token operator">|</span> <span class="token number">1</span>M hits    <span class="token operator">|</span> <span class="token number">10</span>M hits   <span class="token operator">|</span># <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span># <span class="token operator">|</span> <span class="token number">0</span>      <span class="token operator">|</span> <span class="token number">104</span>        <span class="token operator">|</span> <span class="token number">255</span>        <span class="token operator">|</span> <span class="token number">255</span>        <span class="token operator">|</span> <span class="token number">255</span>        <span class="token operator">|</span> <span class="token number">255</span>        <span class="token operator">|</span># <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span># <span class="token operator">|</span> <span class="token number">1</span>      <span class="token operator">|</span> <span class="token number">18</span>         <span class="token operator">|</span> <span class="token number">49</span>         <span class="token operator">|</span> <span class="token number">255</span>        <span class="token operator">|</span> <span class="token number">255</span>        <span class="token operator">|</span> <span class="token number">255</span>        <span class="token operator">|</span># <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span># <span class="token operator">|</span> <span class="token number">10</span>     <span class="token operator">|</span> <span class="token number">10</span>         <span class="token operator">|</span> <span class="token number">18</span>         <span class="token operator">|</span> <span class="token number">142</span>        <span class="token operator">|</span> <span class="token number">255</span>        <span class="token operator">|</span> <span class="token number">255</span>        <span class="token operator">|</span># <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span># <span class="token operator">|</span> <span class="token number">100</span>    <span class="token operator">|</span> <span class="token number">8</span>          <span class="token operator">|</span> <span class="token number">11</span>         <span class="token operator">|</span> <span class="token number">49</span>         <span class="token operator">|</span> <span class="token number">143</span>        <span class="token operator">|</span> <span class="token number">255</span>        <span class="token operator">|</span># <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>## NOTE<span class="token operator">:</span> <span class="token class-name">The</span> above table was obtained by running the following commands<span class="token operator">:</span>##   redis<span class="token operator">-</span>benchmark <span class="token operator">-</span>n <span class="token number">1000000</span> incr foo#   redis<span class="token operator">-</span>cli object freq foo## NOTE <span class="token number">2</span><span class="token operator">:</span> <span class="token class-name">The</span> counter initial value is <span class="token number">5</span> in order <span class="token keyword">to</span> <span class="token namespace">give</span> <span class="token keyword">new</span> objects a chance# <span class="token keyword">to</span> <span class="token namespace">accumulate</span> hits<span class="token punctuation">.</span>## <span class="token class-name">The</span> counter decay time is the time<span class="token punctuation">,</span> in minutes<span class="token punctuation">,</span> that must elapse in order# <span class="token keyword">for</span> the key counter <span class="token keyword">to</span> <span class="token namespace">be</span> divided by two <span class="token punctuation">(</span>or decremented <span class="token keyword">if</span> it has a value# less <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>## <span class="token class-name">The</span> <span class="token keyword">default</span> value <span class="token keyword">for</span> the lfu<span class="token operator">-</span>decay<span class="token operator">-</span>time is <span class="token number">1.</span> <span class="token class-name">A</span> <span class="token class-name">Special</span> value of <span class="token number">0</span> means <span class="token keyword">to</span># decay the counter every time it happens <span class="token keyword">to</span> <span class="token namespace">be</span> scanned<span class="token punctuation">.</span>## lfu<span class="token operator">-</span>log<span class="token operator">-</span>factor <span class="token number">10</span># lfu<span class="token operator">-</span>decay<span class="token operator">-</span>time <span class="token number">1</span>########################### ACTIVE DEFRAGMENTATION ######################### <span class="token class-name">What</span> is active defragmentation<span class="token operator">?</span># <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>## <span class="token class-name">Active</span> <span class="token punctuation">(</span>online<span class="token punctuation">)</span> defragmentation allows a <span class="token class-name">Redis</span> server <span class="token keyword">to</span> <span class="token namespace">compact</span> the# spaces left between small allocations and deallocations of data in memory<span class="token punctuation">,</span># thus allowing <span class="token keyword">to</span> <span class="token namespace">reclaim</span> back memory<span class="token punctuation">.</span>## <span class="token class-name">Fragmentation</span> is a natural process that happens <span class="token keyword">with</span> <span class="token namespace">every</span> allocator <span class="token punctuation">(</span>but# less so <span class="token keyword">with</span> <span class="token class-name">Jemalloc</span><span class="token punctuation">,</span> fortunately<span class="token punctuation">)</span> and certain workloads<span class="token punctuation">.</span> <span class="token class-name">Normally</span> a server# restart is needed in order <span class="token keyword">to</span> <span class="token namespace">lower</span> the fragmentation<span class="token punctuation">,</span> or at least <span class="token keyword">to</span> <span class="token namespace">flush</span># away all the data and create it again<span class="token punctuation">.</span> <span class="token class-name">However</span> thanks <span class="token keyword">to</span> <span class="token keyword">this</span> feature# implemented by <span class="token class-name">Oran</span> <span class="token class-name">Agra</span> <span class="token keyword">for</span> <span class="token class-name">Redis</span> <span class="token number">4.0</span> <span class="token keyword">this</span> process can happen at runtime# in an <span class="token string">"hot"</span> way<span class="token punctuation">,</span> <span class="token keyword">while</span> the server is running<span class="token punctuation">.</span>## <span class="token class-name">Basically</span> when the fragmentation is over a certain level <span class="token punctuation">(</span>see the# configuration options below<span class="token punctuation">)</span> <span class="token class-name">Redis</span> will start <span class="token keyword">to</span> <span class="token namespace">create</span> <span class="token keyword">new</span> copies of the# values in contiguous memory regions by exploiting certain specific <span class="token class-name">Jemalloc</span># features <span class="token punctuation">(</span>in order <span class="token keyword">to</span> <span class="token namespace">understand</span> <span class="token keyword">if</span> an allocation is causing fragmentation# and <span class="token keyword">to</span> <span class="token namespace">allocate</span> it in a better place<span class="token punctuation">)</span><span class="token punctuation">,</span> and at the same time<span class="token punctuation">,</span> will release the# old copies of the data<span class="token punctuation">.</span> <span class="token class-name">This</span> process<span class="token punctuation">,</span> repeated incrementally <span class="token keyword">for</span> all the keys# will cause the fragmentation <span class="token keyword">to</span> <span class="token namespace">drop</span> back <span class="token keyword">to</span> <span class="token namespace">normal</span> values<span class="token punctuation">.</span>## <span class="token class-name">Important</span> things <span class="token keyword">to</span> <span class="token namespace">understand</span><span class="token operator">:</span>## <span class="token number">1.</span> <span class="token class-name">This</span> feature is disabled by <span class="token keyword">default</span><span class="token punctuation">,</span> and only works <span class="token keyword">if</span> you compiled <span class="token class-name">Redis</span>#    <span class="token keyword">to</span> <span class="token namespace">use</span> the copy of <span class="token class-name">Jemalloc</span> we ship <span class="token keyword">with</span> <span class="token namespace">the</span> source code of <span class="token class-name">Redis</span><span class="token punctuation">.</span>#    <span class="token class-name">This</span> is the <span class="token keyword">default</span> <span class="token keyword">with</span> <span class="token class-name">Linux</span> builds<span class="token punctuation">.</span>## <span class="token number">2.</span> <span class="token class-name">You</span> never need <span class="token keyword">to</span> <span class="token namespace">enable</span> <span class="token keyword">this</span> feature <span class="token keyword">if</span> you don't have fragmentation#    issues<span class="token punctuation">.</span>## <span class="token number">3.</span> <span class="token class-name">Once</span> you experience fragmentation<span class="token punctuation">,</span> you can enable <span class="token keyword">this</span> feature when#    needed <span class="token keyword">with</span> <span class="token namespace">the</span> command <span class="token string">"CONFIG SET activedefrag yes"</span><span class="token punctuation">.</span>## <span class="token class-name">The</span> configuration parameters are able <span class="token keyword">to</span> <span class="token namespace">fine</span> tune the behavior of the# defragmentation process<span class="token punctuation">.</span> <span class="token class-name">If</span> you are not sure about what they mean it is# a good idea <span class="token keyword">to</span> <span class="token namespace">leave</span> the defaults untouched<span class="token punctuation">.</span># <span class="token class-name">Enabled</span> active defragmentation# activedefrag no# <span class="token class-name">Minimum</span> amount of fragmentation waste <span class="token keyword">to</span> <span class="token namespace">start</span> active defrag# active<span class="token operator">-</span>defrag<span class="token operator">-</span>ignore<span class="token operator">-</span>bytes <span class="token number">100</span>mb# <span class="token class-name">Minimum</span> percentage of fragmentation <span class="token keyword">to</span> <span class="token namespace">start</span> active defrag# active<span class="token operator">-</span>defrag<span class="token operator">-</span>threshold<span class="token operator">-</span>lower <span class="token number">10</span># <span class="token class-name">Maximum</span> percentage of fragmentation at which we use maximum effort# active<span class="token operator">-</span>defrag<span class="token operator">-</span>threshold<span class="token operator">-</span>upper <span class="token number">100</span># <span class="token class-name">Minimal</span> effort <span class="token keyword">for</span> defrag in <span class="token class-name">CPU</span> percentage<span class="token punctuation">,</span> <span class="token keyword">to</span> <span class="token namespace">be</span> used when the lower# threshold is reached# active<span class="token operator">-</span>defrag<span class="token operator">-</span>cycle<span class="token operator">-</span>min <span class="token number">1</span># <span class="token class-name">Maximal</span> effort <span class="token keyword">for</span> defrag in <span class="token class-name">CPU</span> percentage<span class="token punctuation">,</span> <span class="token keyword">to</span> <span class="token namespace">be</span> used when the upper# threshold is reached# active<span class="token operator">-</span>defrag<span class="token operator">-</span>cycle<span class="token operator">-</span>max <span class="token number">25</span># <span class="token class-name">Maximum</span> number of set<span class="token operator">/</span>hash<span class="token operator">/</span>zset<span class="token operator">/</span>list fields that will be processed from# the main dictionary scan# active<span class="token operator">-</span>defrag<span class="token operator">-</span>max<span class="token operator">-</span>scan<span class="token operator">-</span>fields <span class="token number">1000</span># <span class="token class-name">Jemalloc</span> background thread <span class="token keyword">for</span> purging will be enabled by <span class="token keyword">default</span>jemalloc<span class="token operator">-</span>bg<span class="token operator">-</span>thread yes# <span class="token class-name">It</span> is possible <span class="token keyword">to</span> <span class="token namespace">pin</span> different threads and processes of <span class="token class-name">Redis</span> <span class="token keyword">to</span> <span class="token namespace">specific</span># <span class="token class-name">CPUs</span> in your system<span class="token punctuation">,</span> in order <span class="token keyword">to</span> <span class="token namespace">maximize</span> the performances of the server<span class="token punctuation">.</span># <span class="token class-name">This</span> is useful both in order <span class="token keyword">to</span> <span class="token namespace">pin</span> different <span class="token class-name">Redis</span> threads in different# <span class="token class-name">CPUs</span><span class="token punctuation">,</span> but also in order <span class="token keyword">to</span> <span class="token namespace">make</span> sure that multiple <span class="token class-name">Redis</span> instances running# in the same host will be pinned <span class="token keyword">to</span> <span class="token namespace">different</span> <span class="token class-name">CPUs</span><span class="token punctuation">.</span>## <span class="token class-name">Normally</span> you can <span class="token keyword">do</span> <span class="token keyword">this</span> using the <span class="token string">"taskset"</span> command<span class="token punctuation">,</span> however it is also# possible <span class="token keyword">to</span> <span class="token keyword">this</span> via <span class="token class-name">Redis</span> configuration directly<span class="token punctuation">,</span> both in <span class="token class-name">Linux</span> and <span class="token class-name">FreeBSD</span><span class="token punctuation">.</span>## <span class="token class-name">You</span> can pin the server<span class="token operator">/</span><span class="token class-name">IO</span> threads<span class="token punctuation">,</span> bio threads<span class="token punctuation">,</span> aof rewrite child process<span class="token punctuation">,</span> and# the bgsave child process<span class="token punctuation">.</span> <span class="token class-name">The</span> syntax <span class="token keyword">to</span> <span class="token namespace">specify</span> the cpu list is the same as# the taskset command<span class="token operator">:</span>## <span class="token class-name">Set</span> redis server<span class="token operator">/</span>io threads <span class="token keyword">to</span> <span class="token namespace">cpu</span> affinity <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token operator">:</span># server_cpulist <span class="token number">0</span><span class="token operator">-</span><span class="token number">7</span><span class="token operator">:</span><span class="token number">2</span>## <span class="token class-name">Set</span> bio threads <span class="token keyword">to</span> <span class="token namespace">cpu</span> affinity <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">:</span># bio_cpulist <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span>## <span class="token class-name">Set</span> aof rewrite child process <span class="token keyword">to</span> <span class="token namespace">cpu</span> affinity <span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token operator">:</span># aof_rewrite_cpulist <span class="token number">8</span><span class="token operator">-</span><span class="token number">11</span>## <span class="token class-name">Set</span> bgsave child process <span class="token keyword">to</span> <span class="token namespace">cpu</span> affinity <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span># bgsave_cpulist <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="测试-redis-cli连接上来"><a href="#测试-redis-cli连接上来" class="headerlink" title="测试 redis-cli连接上来"></a>测试 redis-cli连接上来</h4><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">docker exec -it 运行着redis服务容器的ID redis-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-04_12-28-49.png"></p><h4 id="测试持久化文件生成"><a href="#测试持久化文件生成" class="headerlink" title="测试持久化文件生成"></a>测试持久化文件生成</h4><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-04_12-29-12.png"></p><h1 id="第-8-章-将镜像推送到阿里云"><a href="#第-8-章-将镜像推送到阿里云" class="headerlink" title="第 8 章 将镜像推送到阿里云"></a>第 8 章 将镜像推送到阿里云</h1><h3 id="本地镜像发布到阿里云流程"><a href="#本地镜像发布到阿里云流程" class="headerlink" title="本地镜像发布到阿里云流程"></a>本地镜像发布到阿里云流程</h3><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-04_12-49-17.png"></p><h3 id="镜像生成方法"><a href="#镜像生成方法" class="headerlink" title="镜像生成方法"></a>镜像生成方法</h3><p>1、前面的Dockerfile</p><p>2、从容器中创建一个新的镜像 </p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">docker commit [OPTIONS] 容器ID [REPOSITORY[:TAG]]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-04_12-50-48.png"></p><h3 id="将本地镜像推送到阿里云"><a href="#将本地镜像推送到阿里云" class="headerlink" title="将本地镜像推送到阿里云"></a>将本地镜像推送到阿里云</h3><h4 id="1、本地镜像素材原型"><a href="#1、本地镜像素材原型" class="headerlink" title="1、本地镜像素材原型"></a>1、本地镜像素材原型</h4><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-04_12-51-52.png"></p><p>2、阿里云开发者平台</p><p><a href="https://promotion.aliyun.com/ntms/act/kubernetes.html">https://promotion.aliyun.com/ntms/act/kubernetes.html</a></p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-04_12-53-02.png"></p><h4 id="3、创建镜像仓库"><a href="#3、创建镜像仓库" class="headerlink" title="3、创建镜像仓库"></a>3、创建镜像仓库</h4><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-04_12-54-07.png"></p><p>命名空间</p><p>仓库名称</p><h4 id="4、将镜像推送到registry"><a href="#4、将镜像推送到registry" class="headerlink" title="4、将镜像推送到registry"></a>4、将镜像推送到registry</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ sudo docker login <span class="token operator">--</span>username<span class="token operator">=</span>white3e registry<span class="token punctuation">.</span>cn<span class="token operator">-</span>shenzhen<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>com$ sudo docker tag <span class="token punctuation">[</span><span class="token class-name">ImageId</span><span class="token punctuation">]</span> registry<span class="token punctuation">.</span>cn<span class="token operator">-</span>shenzhen<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>com<span class="token operator">/</span>ggccqq<span class="token operator">/</span>mycentos<span class="token operator">:</span><span class="token punctuation">[</span>镜像版本号<span class="token punctuation">]</span>$ sudo docker push registry<span class="token punctuation">.</span>cn<span class="token operator">-</span>shenzhen<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>com<span class="token operator">/</span>ggccqq<span class="token operator">/</span>mycentos<span class="token operator">:</span><span class="token punctuation">[</span>镜像版本号<span class="token punctuation">]</span>其中<span class="token punctuation">[</span><span class="token class-name">ImageId</span><span class="token punctuation">]</span><span class="token punctuation">[</span>镜像版本<span class="token punctuation">]</span>自己填写<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-04_12-56-10.png"></p><h4 id="5、公有云可以查询得到"><a href="#5、公有云可以查询得到" class="headerlink" title="5、公有云可以查询得到"></a>5、公有云可以查询得到</h4><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-04_12-56-53.png"></p><h4 id="6、查看详情"><a href="#6、查看详情" class="headerlink" title="6、查看详情"></a>6、查看详情</h4><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-04_12-57-23.png"></p><h3 id="将阿里云上的镜像下载到本地"><a href="#将阿里云上的镜像下载到本地" class="headerlink" title="将阿里云上的镜像下载到本地"></a>将阿里云上的镜像下载到本地</h3><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/Snipaste_2020-10-04_12-59-00.png"></p><p>至此Docker基础篇完结</p><p>​    2020-10-4</p>]]></content>
    
    
    <summary type="html">Docker基础篇之快速上手</summary>
    
    
    
    <category term="docker" scheme="https://13592491893.github.io/categories/docker/"/>
    
    
    <category term="linux" scheme="https://13592491893.github.io/tags/linux/"/>
    
    <category term="docker" scheme="https://13592491893.github.io/tags/docker/"/>
    
    <category term="容器" scheme="https://13592491893.github.io/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>ObjectTools</title>
    <link href="https://13592491893.github.io/posts/6d9732ac.html"/>
    <id>https://13592491893.github.io/posts/6d9732ac.html</id>
    <published>2021-12-15T16:00:00.000Z</published>
    <updated>2021-12-29T03:19:25.627Z</updated>
    
    <content type="html"><![CDATA[<p>ObjectTools</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>shys<span class="token punctuation">.</span>industrialinternet<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>esotericsoftware<span class="token punctuation">.</span>reflectasm<span class="token punctuation">.</span></span><span class="token class-name">FieldAccess</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>esotericsoftware<span class="token punctuation">.</span>reflectasm<span class="token punctuation">.</span></span><span class="token class-name">MethodAccess</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span></span><span class="token class-name">ArrayUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ConcurrentHashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ConcurrentMap</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObjectTools</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">,</span> <span class="token class-name">MethodAccess</span><span class="token punctuation">&gt;</span></span> methodLocalCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentMap</span><span class="token operator">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">,</span> <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> fieldLocalCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">MethodAccess</span> <span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token class-name">Class</span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>methodLocalCache<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> methodLocalCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">MethodAccess</span> methodAccess <span class="token operator">=</span> <span class="token class-name">MethodAccess</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        methodLocalCache<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> methodAccess<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> methodAccess<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getFields</span><span class="token punctuation">(</span><span class="token class-name">Class</span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fieldLocalCache<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> fieldLocalCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span> nextClass <span class="token operator">=</span> clazz<span class="token punctuation">;</span> nextClass <span class="token operator">!=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span> nextClass <span class="token operator">=</span> nextClass<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> nextClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fields<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> <span class="token class-name">ArrayUtils</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> fields<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        fieldLocalCache<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">F</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">copyProperties</span><span class="token punctuation">(</span><span class="token class-name">F</span> from<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">to</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">T</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token keyword">to</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">MethodAccess</span> fromMethodAccess <span class="token operator">=</span> <span class="token function">getMethods</span><span class="token punctuation">(</span>from<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MethodAccess</span> toMethodAccess <span class="token operator">=</span> <span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fromDeclaredFields <span class="token operator">=</span> <span class="token function">getFields</span><span class="token punctuation">(</span>from<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> fromDeclaredFields<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Object</span> value <span class="token operator">=</span> fromMethodAccess<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> <span class="token string">"get"</span> <span class="token operator">+</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">capitalize</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                toMethodAccess<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token string">"set"</span> <span class="token operator">+</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">capitalize</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 设置异常，可能会没有对应字段，忽略</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">ObjectTools</summary>
    
    
    
    <category term="java" scheme="https://13592491893.github.io/categories/java/"/>
    
    
    <category term="utils" scheme="https://13592491893.github.io/tags/utils/"/>
    
    <category term="object" scheme="https://13592491893.github.io/tags/object/"/>
    
    <category term="tool" scheme="https://13592491893.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>Linux学习</title>
    <link href="https://13592491893.github.io/posts/deb5175a.html"/>
    <id>https://13592491893.github.io/posts/deb5175a.html</id>
    <published>2021-12-06T17:00:00.000Z</published>
    <updated>2021-12-29T03:19:25.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux学习"><a href="#Linux学习" class="headerlink" title="Linux学习"></a>Linux学习</h1><h2 id="1-虚拟机"><a href="#1-虚拟机" class="headerlink" title="1.虚拟机"></a>1.虚拟机</h2><ul><li>虚拟机的网络连接三种形式说明<ul><li>桥连接：Linux可以和其他的系统通信。但是可能造成IP冲突。</li><li>NAT：网络地址转换方式：Linux可以访问外网，不会造成IP冲突。</li><li>主机模式：你的Linux是一个独立的主机，不能访问外网。</li></ul></li><li>vmtools:<ul><li>共享文件夹</li><li>共享剪贴板</li></ul></li></ul><h2 id="2-Linux目录结构"><a href="#2-Linux目录结构" class="headerlink" title="2.Linux目录结构"></a>2.Linux目录结构</h2><p><strong>Linux世界里，一切皆文件。</strong></p><ul><li>/bin：是Binary的缩写，这个目录存放着最经常使用的命令。</li><li>/sbin：s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</li><li>/home：存放普通用户的主目录，在Linux中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</li><li>/root：该目录为系统管理员，也称作超级权限者的用户主目录。</li><li>/lib：系统开机所需要最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</li><li>/lost+found：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</li><li>/etc：所有的系统管理所需要的配置文件和子目录my.conf。</li><li>/usr：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与windows下的program files目录。</li><li>/boot：存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。</li><li>/proc：这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息。</li><li>/srv：service的缩写，该目录存放一些服务启动之后需要提供的数据。</li><li>/sys：这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统sysfs。</li><li>/tmp：这个目录是用来存放一些临时文件的。</li><li>/dev：类似windows的设备管理器，把所有的硬件用文件的形式存储。</li><li>/media：linux系统会自动识别一些设备，例如U盘光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</li><li>/mnt：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在/mnt/上，然后进入该目录就可以查看里面的内容了。</li><li>/opt：这是给主机额外安装软件所摆放的目录，如安装ORACLE数据库就可放到该目录下。默认为空。</li><li>/usr/local：这是另一个给主机额外安装软件所安装的目录，一般是通过编译源码的方式安装的程序。</li><li>/var：这个目录中存放着在不断扩充着的东西，习惯将经常被修改的目录放在这个目录下，包括各种日志文件。</li><li>/selinux：SELinux是一种安全子系统，它能控制程序只能访问特定文件。</li></ul><p>总结：</p><ol><li>Linux的目录中有且只有一个根目录。</li><li>Linux的各个目录存放的内容是规划好，不用乱放文件。</li><li>Linux是以文件的形式管理我们的设备，因此linux系统，一切皆为文件。</li><li>Linux的各个文件目录下存放什么内容，必须有一个认识。</li></ol><h2 id="3-远程登录Linux系统"><a href="#3-远程登录Linux系统" class="headerlink" title="3.远程登录Linux系统"></a>3.远程登录Linux系统</h2><ul><li>远程登录：XShell5</li><li>远程上传下载文件：Xftp5</li></ul><h2 id="4-vi和vim编辑器"><a href="#4-vi和vim编辑器" class="headerlink" title="4.vi和vim编辑器"></a>4.vi和vim编辑器</h2><ul><li><p>三种常见模式：</p><ul><li><p>正常模式</p><p>在正常模式下，我们可以使用快捷键。</p></li><li><p>插入模式/编辑模式</p><p>在这个模式下，程序猿可以输入内容。</p></li><li><p>命令行模式</p><p>在这个模式中，可以提供相关指令。</p></li></ul></li><li><p>快捷键使用练习：</p><ul><li>yy：拷贝当前行</li><li>5yy：拷贝当前5行</li><li>dd：删除当前行</li><li>5dd：删除当前行向下的5行</li><li>在文件中查找某个单词：命令行输入 /（查找内容），按n查找下一个</li><li>设置文件行号：set nu，取消文件行号：set nonu</li><li>编辑文件，正常模式下使用快捷键到达文档最末行：G，最首行：gg</li><li>撤销输入：在正常模式下输入u</li><li>编辑文件，光标移动到某行：shift+g<ul><li>显示行号：set nu</li><li>输入行号这个数</li><li>输入shift+g</li></ul></li></ul></li></ul><h2 id="5-关机、重启和用户登录注销"><a href="#5-关机、重启和用户登录注销" class="headerlink" title="5.关机、重启和用户登录注销"></a>5.关机、重启和用户登录注销</h2><ul><li>shutdown -h now：表示立即关机</li><li>shutdown -h 1：表示1分钟后关机</li><li>shutdown -r now：立即重启</li><li>halt：直接使用，关机</li><li>reboot：重启</li><li>sync：把内存的数据同步到磁盘上，<strong>当我们关机或者重启时，都应该先执行一下sync，防止数据丢失</strong>。</li><li>logout：注销用户，<strong>在图形运行级别无效，在运行级别3有效</strong>。</li></ul><h2 id="6-用户管理"><a href="#6-用户管理" class="headerlink" title="6.用户管理"></a>6.用户管理</h2><p>用户，组，家目录。</p><ol><li>Linux系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</li><li>Linux的用户需要至少要属于一个组。</li></ol><ul><li>添加用户：useradd [选项] 用户名。</li><li>cd：表示change directory，切换目录。</li><li>当创建用户成功后，会自动的创建和用户同名的家目录。</li><li>也可以通过useradd -d 指定目录 新的用户名。</li><li>指定/修改密码：passwd 用户名</li><li>删除用户，保留家目录：userdel 用户名，<strong>一般保留家目录，因为干过的活要留着</strong>。</li><li>删除用户以及家目录：userdel -r 用户名</li><li>查询用户信息：id 用户名</li><li>切换用户：su - 切换用户名，<strong>从权限高切换到权限低的用户不需要输密码</strong>。</li><li>返回切换前的用户：exit</li><li>查看当前用户/登录用户：who am i</li><li>用户组：类似于角色，系统可以对有共性的多个用户进行统一的管理。</li><li>增加组：groupadd 组名</li><li>删除组：groupdel 组名</li><li>增加用户时直接加上组：useradd -g 用户组 用户名</li><li>修改用户组：usermod -g 用户组 用户名</li></ul><ol><li>/etc/passwd 文件</li></ol><ul><li>用户（user）的配置文件，记录用户的各种信息。</li><li>每行的含义：用户名：口令：用户标识号：注释性描述：主目录：登录shell</li></ul><ol><li>/etc/shadow 文件</li></ol><ul><li>口令配置文件</li><li>每行的含义：登录名：加密口令：最后一次修改时间：最小时间间隔：最大时间间隔：警告时间：不活动时间：失效时间：标志</li></ul><ol><li>/etc/group 文件</li></ol><ul><li>组（group）的配置文件，记录Linux包含的组的信息。</li><li>每行含义：组名：口令：组标识号：组内用户列表</li></ul><h2 id="7-实用指令"><a href="#7-实用指令" class="headerlink" title="7.实用指令"></a>7.实用指令</h2><ul><li><p>指定运行级别（7个级别）</p><ol><li>关机</li><li>单用户【找回丢失密码】</li><li>多用户状态没有网络服务</li><li>多用户状态有网络服务</li><li>系统未使用保留给用户</li><li>图形界面</li><li>系统重启</li></ol></li><li><p>系统的运行级别配置文件：/etc/inittab</p></li><li><p>切换到指定运行级别的指令：init [012356]</p></li><li><p><strong>面试题：如何找回丢失的root密码？</strong>：进入到单用户模式，然后修改root密码。因为进入单用户模式，root不需要密码就可以登录。【开机-&gt;在引导时输入 回车键-&gt;看到一个界面输入 e-&gt;看到一个新的界面，选中第二行（编辑内核），再输入 e-&gt;在这行最后输入 1，再输入 回车键-&gt;再输入b，这时就会进入到单用户模式，使用passed来修改root密码。】</p></li><li><p>帮助指令：</p><ul><li>man [命令或配置文件]</li><li>help</li></ul></li><li><p>文件目录类</p><ul><li><p>pwd：Print Working Directory，显示当前工作目录的绝对路径。</p></li><li><p>ls：-a：显示当前目录所有的文件和目录，包括隐藏的；-l：以列表的方式显示信息。</p></li><li><p>cd：cd ~：回到自己的家目录；cd ..：回到当前目录的上一级目录。</p></li><li><p>mkdir：创建目录；-p：创建多级目录。</p></li><li><p>rmdir：删除空目录。rmdir不能删除非空的目录。如果需要删除非空的目录，需要使用rm -rf。</p></li><li><p>touch：创建空文件。可以一次性创建多个文件</p></li><li><p>cp：拷贝文件到指定目录；-r：递归复制整个文件夹。强制覆盖不提示的方法：cp命令改为\cp</p></li><li><p>rm：移除文件或目录；-r：递归删除整个文件夹；-f：强制删除不提示。</p></li><li><p>mv：移动文件与目录或重命名，两种功能！</p></li><li><p>cat：查看文件内容。只能浏览文件，而不能修改文件。-n：显示行号。结尾加上 | more：分页显示，不会全部一下显示完。</p></li><li><p>more：是一个基于VI编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。more还内置了很多快捷键：</p><table><thead><tr><th>操作</th><th>功能说明</th></tr></thead><tbody><tr><td>空白键（Space）</td><td>向下翻一页</td></tr><tr><td>Enter</td><td>向下翻一行</td></tr><tr><td>q</td><td>立刻离开more，不再显示该文件内容</td></tr><tr><td>Ctrl + F</td><td>向下滚动一屏</td></tr><tr><td>Ctrl + B</td><td>返回上一屏</td></tr><tr><td>=</td><td>输出当前行的行号</td></tr><tr><td>：f</td><td>输出文件名和当前行的行号</td></tr></tbody></table></li><li><p>less：用来分屏查看文件内容，与more相似，但是更强大，支持各种显示终端。less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容。<strong>对于显示大型文件具有较高的效率。</strong></p></li><li><p><code>&gt;</code>指令：输出重定向。如果不存在会创建文件，否则会将原来的文件内容覆盖。</p></li><li><p><code>&gt;&gt;</code>指令：追加。如果不存在会创建文件，否则不会覆盖原来的文件内容，而是追加到文件的尾部。</p></li><li><p>cat是查看，echo是写入，echo （内容） &gt;&gt; 文件</p></li><li><p>cal：显示当前月日历。</p></li><li><p>echo：输出内容到控制台。</p></li><li><p>head：显示文件的开头部分。-n 5：看前面5行内容。</p></li><li><p>tail：输出文件中尾部的内容。-n 5：看后面5行内容。-f：时事追踪该文档的所有更新</p></li></ul></li><li><p>时间日期类</p><ul><li>date：显示当前日期和时间</li><li>date “+%Y”：显示当前年份</li><li>date “+%d”：显示当前月份</li><li>date “+%Y-%m-%d %H:%M:%S”：显示年-月-日 时：分：秒</li><li>设置日期：date -s 字符串时间</li><li>cal：查看日历指令；cal 年份：显示某一年一整年的日历</li></ul></li><li><p>搜索查找类</p><ul><li>find：从指定目录向下递归的遍历其各个子目录，将满足条件的文件或者目录显示在终端。<ul><li>find (搜索范围) -name (文件名)：按照指定的文件名查找模式查找文件。</li><li>find (搜索范围) -user (用户名)：按照指定的用户名查找模式查找文件。</li><li>find (搜索范围) -size (+多少/-多少/多少)：按照指定的文件大小查找模式查找文件（大于多少/小于多少/等于多少）</li><li><strong>查询 /目录下所有.txt的文件</strong>：find / -name *.txt</li></ul></li><li>locate：locate (搜索文件)<ul><li>可以快速定位文件路径。locate指令利用事先建立的系统中所有文件名称及路径的locate数据库实现快速定位给定的文件。locate指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新locate时刻。</li><li>在第一次运行之前，必须使用updatedb指令创建locate数据库。</li></ul></li><li>grep：过滤查找，表示将前一个命令的处理结果输出传递给后面的命令处理。经常跟管道一起使用。<ul><li>grep [选项] 查找内容 源文件</li><li>-n：显示匹配行及行号。</li><li>-i：忽略大小写字母。</li><li><code>cat hello.txt | grep yes</code></li></ul></li></ul></li><li><p>压缩和解压类</p><ul><li>gzip/gunzip：压缩文件/解压<ul><li>gzip (文件)：压缩为.gz文件，原来文件不保留。</li><li>gunzip (文件)：解压缩，同样也不保留源文件。</li></ul></li><li>zip/unzip：压缩文件/解压<ul><li>zip [选项] (压缩后文件xxx.zip) (将要压缩的文件)</li><li>unzip [选项] (要解压的文件xxx.zip)</li><li>zip -r：递归压缩，即压缩目录</li><li>unzip -d (目录)：指定解压后的文件的存放目录</li></ul></li><li>tar：打包指令，最后打包后的文件是.tar.gz的文件<ul><li>tar [选项] xxx.tar.gz (打包的内容)</li><li>-c：产生.tar打包文件</li><li>-v：显示详细信息</li><li>-f：指定压缩后的文件名</li><li>-z：打包同时压缩</li><li>-x：解压.tar文件</li><li>压缩：tar -zcvf (压缩后文件名) (要压缩的文件)</li><li>解压：tar -zxvf (要解压的文件)</li><li>解压到指定目录：tar -zxvf (要解压的文件) -C (指定目录)，指定解压到的目录要存在。</li></ul></li></ul></li></ul><h2 id="8-组管理和权限管理"><a href="#8-组管理和权限管理" class="headerlink" title="8.组管理和权限管理"></a>8.组管理和权限管理</h2><ul><li><p>文件：</p><ol><li>所有者</li><li>所在组</li><li>其他组</li><li>改变用户所在组</li></ol></li><li><p>文件/目录所有者：</p><ul><li>一般为文件的创建者，谁创建了该文件，就自然的称为该文件的所有者。</li><li>查看文件所有者：ls -ahl</li><li>修改文件所有者：chown (用户名) (文件名)</li><li>文件所在组不一定是文件所有者。</li></ul></li><li><p>组的创建</p><ul><li>groupadd (组名)</li></ul></li><li><p>文件/目录所在组</p><ul><li>修改文件所在组：chgrp (组名) (文件名)</li></ul></li><li><p>其他组</p><ul><li>除文件的所有者和所在组的用户外，系统的其他用户都是文件的其他组</li></ul></li><li><p>改变用户所在组</p><ul><li>在添加用户时，可以指定将该用户添加到哪个组中，同样的用root的管理权限可以改变某个用户所在的组</li><li>改变用户所在组：usermod -g 组名 用户名</li><li>改变用户登录的初始目录：usermod -d 目录名 用户名</li></ul></li><li><p>权限的基本介绍</p><ul><li><p>文件类型：</p><ul><li>-：普通类型</li><li>d：目录</li><li>l：软连接</li><li>c：字符设备【键盘、鼠标等】</li><li>b：块文件【硬盘】</li></ul></li><li><p>ls -l 显示内容说明：</p><ul><li>rw-：表示文件所有者权限（rw，读写）</li><li>r–：表示文件所在组的用户的权限（r，只有读的权限）</li><li>r–：表示文件其他组的用户的权限（r，只有读的权限）</li><li>1：如果是文件，表示硬连接的数；如果是目录则表示该目录的子目录个数</li><li>tom：文件所有者</li><li>bandit：文件所在组</li><li>0：文件的大小，0个字节；如果是目录，则统一为4096</li><li>July 1 13：40：文件最后的修改时间</li><li>ok.txt：文件名</li></ul><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/20190701154715856.png" alt="img"></p></li></ul></li><li><p>rwx权限详解</p><ul><li>rwx作用到文件：<ul><li>r：read，可读。读取查看。</li><li>w：write，可以修改。但不代表可以删除该文件。删除一个文件的前提条件是对该文件所在的目录有写权限，才能删除该文件。</li><li>x：execute，可执行。可以被执行。</li></ul></li><li>rwx作用到目录：<ul><li>r：可以读取，ls查看目录内容。</li><li>w：可以修改，目录内创建+删除+重命名目录。</li><li>x：可执行，可以进入该目录。</li></ul></li></ul></li><li><p>修改权限 chmod</p><ul><li>修改文件或者目录的权限</li><li>u：所有者；g：所在组；o：其他人；a：所有人（u、g、o的总和）</li><li>chmod u=rwx，g=rx，o=x 文件目录名：分别权限</li><li>chmod o+w 文件目录名：给其他人都增加写的权限</li><li>chmod a-x 文件目录名：给所有的用户都减掉执行权限</li></ul></li><li><p>通过数字变更权限</p><ul><li>规则：r=4 w=2 x=1 rwx=4+2+1=7</li><li>chmod u=rwx，g=rx，o=x 文件目录名 <strong>等价于</strong> chmod 751 文件目录名</li></ul></li><li><p>修改文件所有者 chown</p><ul><li>chown newowner file：改变文件的所有者</li><li>chown newowner：newgroup file：改变用户的所有者和所在组</li><li>-R：如果是目录，则使其下所有子文件或目录递归生效</li></ul></li><li><p>修改文件所在组 chgrp</p><ul><li>chgrp newgroup file：改变文件的所有组</li><li>-R：如果是目录，则使其下所有子文件或目录递归生效</li></ul></li></ul><h2 id="9-定时任务调度"><a href="#9-定时任务调度" class="headerlink" title="9.定时任务调度"></a>9.定时任务调度</h2><ul><li><p>crond任务调度：crontab进行定时任务调度</p><ul><li>crontab [选项]</li><li>-e：编辑crontab定时任务</li><li>-i：查询crontab任务</li><li>-r：删除当前用户所有的crontab任务</li><li>-l：列出当前有哪些任务调度</li><li>service crond restart：重启任务调度</li><li>当保存退出后就生效了</li><li>参数细节说明</li></ul><table><thead><tr><th>项目</th><th>含义</th><th>范围</th></tr></thead><tbody><tr><td>第一个“*”</td><td>一小时当中的第几分钟</td><td>0-59</td></tr><tr><td>第二个“*”</td><td>一天当中的第几小时</td><td>0-23</td></tr><tr><td>第三个“*”</td><td>一个月当中的第几天</td><td>1-31</td></tr><tr><td>第四个“*”</td><td>一年当中的第几月</td><td>1-12</td></tr><tr><td>第五个“*”</td><td>一周当中的星期几</td><td>0-7（0和7都代表星期日）</td></tr></tbody></table></li><li><p>特殊符号说明</p><ul><li><code>*</code>：代表任何时间。比如第一个<code>*</code>就代表一小时中每分钟都执行一次的意思。</li><li><code>,</code>：代表不连续的时间。比如“0 8,12,16 * * *命令”，就代表在每天的8点0分，12点0分，16点0分都执行一次命令。</li><li><code>-</code>：代表连续的时间范围。比如“0 5 * * 1-6命令”，代表在周一到周六的凌晨5点0分执行命令。</li><li><code>/n</code>：代表每隔多久执行一次。比如“*/10 * * * * 命令”，代表每隔10分钟就执行一遍命令。</li></ul></li></ul><h2 id="10-Linux磁盘分区、挂载"><a href="#10-Linux磁盘分区、挂载" class="headerlink" title="10.Linux磁盘分区、挂载"></a>10.Linux磁盘分区、挂载</h2><ul><li><p>分区的方式</p><ul><li>mbr分区<ul><li>最多支持四个主分区</li><li>系统只能安装在主分区</li><li>扩展分区要占一个主分区</li><li>MBR最大只支持2TB，但拥有最好的兼容性</li></ul></li><li>gpt分区<ul><li>支持无限多个主分区（但操作系统可能限制，比如windows下最多128个分区）</li><li>最大支持18EB的大容量（1EB=1024PB，PB=1024TB）</li><li>windows7 64位以后支持gpt</li></ul></li></ul></li><li><p>Linux分区</p><ul><li>Linux来说无论有几个分区，分给哪一个目录使用，它归根结底就只有一个根目录，一个独立且唯一的文件结构，Linux中每个分区都是用来组成整个文件系统的一部分。</li><li>Linux采用了一种叫做“载入”的处理方法，它的整个文件系统中包含了一整套的文件和目录，且将一个分区和一个目录联系起来。这时要载入的一个分区将使它的存储空间在一个目录下获得。</li></ul></li><li><p>硬盘说明</p><ul><li>Linux硬盘分IDE硬盘和SCSI硬盘，目前基本上是SCSI硬盘</li><li>lsblk -f：查看当前系统的分区和挂载情况。（list block）</li></ul></li><li><p>挂载的经典案例</p><ul><li>需求是给我们的Linux系统增加一个新的硬盘，并且挂载到/home/newdisk</li></ul><ol><li>虚拟机添加硬盘</li><li>分区：fdsk /dev/sdb</li><li>格式化：mkfs -t ext4 /dev/sdb1</li><li>挂载：新建目录：mkdir /home/newdisk；挂载：mount /dev/sdb1 /home/newdisk</li><li>设置可以自动挂载（永久挂载）：重启系统后，仍然可以挂载。vim etc/fstab 增加挂载信息。mount -a：生效</li></ol><ul><li>取消挂载：unmount /dev/sdb1</li></ul></li><li><p>磁盘情况查询：df -h / df -l</p></li><li><p>查询指定目录的磁盘占用情况：du -h /目录，默认为当前目录</p><ul><li>-s：指定目录占用大小汇总</li><li>-h：带计量单位</li><li>-a：含文件</li><li>–max-depth=1：子目录深度</li><li>-c：列出明细的同时，增加汇总值</li></ul></li><li><p>磁盘情况-工作实用指令</p><ol><li>统计/home文件夹下文件的个数：<code>ls -l /home | grep "^-" | wc -l</code></li><li>统计/home文件夹下目录的个数：<code>ls -l /home | grep "^d" | wc -l</code></li><li>统计/home文件夹下文件的个数，包括子文件夹里的：<code>ls -lR /home | grep "^-" | wc -l</code></li><li>统计文件夹下目录的个数，包括子文件夹里的：<code>ls -lR /home | grep "^d" | wc -l</code></li><li>以树状显示目录结构：首先安装tree指令：yum install tree，tree</li></ol></li></ul><h2 id="11-网络配置"><a href="#11-网络配置" class="headerlink" title="11.网络配置"></a>11.网络配置</h2><ul><li>指定固定IP：直接修改配置文件来指定IP，并可以连接到外网，编辑：vim /etc/sysconfig/network-scripts/ifcfg-eth0</li><li>重启网络服务：service network restart</li></ul><h2 id="12-进程管理"><a href="#12-进程管理" class="headerlink" title="12.进程管理"></a>12.进程管理</h2><ul><li><p>在Linux中，每个执行的<strong>程序（代码）</strong>都称为一个进程。每个进程都分配一个ID号</p></li><li><p>每一个进程，都会对应一个父进程，而这个父进程可以复制多个子进程。例如www服务器。</p></li><li><p>每个进程都可能以两种方式存在。</p><p>前台和后台</p><p>。</p><ul><li>前台进程：用户目前的屏幕上可以进行操作的。</li><li>后台进程：实际在操作，但由于屏幕上无法看到的进程，通常使用后台方式执行。</li></ul></li><li><p>一般系统的服务都是以后台进程的方式存在，而且都会常驻在系统中，直到关机才结束。</p></li><li><p>显示系统执行的进程</p><ul><li>ps：查看目前系统中，有哪些正在执行，以及它们执行的状况。可以不加任何参数。PID：进程识别号；TTY：终端机号；TIME：此进程所消耗的CPU时间；CMD：正在执行的命令或进程名</li><li>ps -a：显示当前终端的所有进程信息。</li><li>ps -u：以用户的格式显示进程信息。</li><li>ps -x：显示后台进程运行的参数。</li><li>ps -axu | grep xxx：过滤得到xxx的信息。</li><li>ps -ef：以全格式显示当前所有的进程，查看进程的父进程。</li><li>-e：显示所有进程。</li><li>-f：全格式。</li></ul></li><li><p>终止进程</p><ul><li>kill [选项] 进程号：通过进程号杀死进程</li><li>killall 进程名称：通过进程名称杀死进程，也支持通配符，这在系统因负载过大而变得很慢时很有用</li><li>-9：表示强迫进程立刻停止</li><li>案例1：踢掉非法用户：kill 进程号</li><li>案例2：终止远程登录服务sshd，在适当时候再次重启sshd服务</li><li>案例3：终止多个gedit编辑器：killall 进程名称</li><li>案例4：强制杀掉一个终端：kill -9 进程号</li></ul></li><li><p>查看进程树：pstree [选项]</p><ul><li>-p：显示进程的PID</li><li>-u：显示进程的所属用户</li></ul></li><li><p>服务（service）管理</p><ul><li>service管理指令：service 服务名 [start | stop | restart | reload | status]</li><li>在CentOS7.0之后，不再使用service，而是systemctl</li><li>查看防火墙情况：<ul><li>service iptables status</li><li>systemctl status firewalld（7.0之后的版本）</li></ul></li><li>测试某个端口是否在监听：telnet</li><li>查看服务名：<ul><li>方式1：使用setup-&gt;系统服务就可以看到</li><li>方式2：/etc/init.d/服务名称</li></ul></li><li>服务的运行级别（runlevel）：<ul><li>查看或修改默认级别：vim /etc/inittab</li><li>每个服务对应的每个运行级别都可以设置</li></ul></li><li>如果不小心将默认的运行级别设置成0或者6，怎么处理？<ul><li>进入单用户模式，修改成正常的即可。</li></ul></li><li>chkconfig：可以给每个服务的各个运行级别设置自启动/关闭</li><li>查看xxx服务：chkconfig –list | grep xxx</li><li>查看服务的状态：chkconfig 服务名 –list</li><li>给服务的运行级别设置自启动：chkconfig –level 5 服务名 on/off</li><li>要所有运行级别关闭或开启：chkconfig 服务名 on/off</li></ul></li><li><p>动态监控进程</p><ul><li>top [选项]</li><li>top和ps命令很相似。它们都用来显示正在执行的进程。top和ps最大的不同之处在于top在执行一段时间可以更新正在运行的进程。</li><li>-d 秒数：指定top命令每隔几秒更新。默认是3秒。</li><li>-i：使top不显示任何闲置或者僵死进程。</li><li>-p：通过指定监控进程ID来仅仅监控某个进程的状态。</li><li>案例1：监控特定用户：top查看进程；u输入用户名。</li><li>案例2：终止指定的进程：top查看进程；k输入要结束的进程。</li><li>案例3：指定系统状态更新的时间（每隔10秒自动更新，默认是3秒）：top -d 10</li><li>交互操作说明：<ul><li>P：以CPU使用率排序，默认就是此项</li><li>M：以内存的使用率排序</li><li>N：以PID排序</li><li>q：退出top</li></ul></li></ul></li><li><p>监控网络状态</p><ul><li>netstat [选项]</li><li>-an：按一定顺序排列输出</li><li>-p：显示哪个进程在调用</li></ul></li></ul><h2 id="13-RPM"><a href="#13-RPM" class="headerlink" title="13.RPM"></a>13.RPM</h2><ul><li>RPM：RedHat Package Manager，红帽软件包管理工具。</li><li>RPM查询已安装的rpm列表：rpm -qa | grep xx</li><li>rpm包的其它查询指令：<ul><li>rpm -qa：查询所安装的所有rpm软件包</li><li>rpm -qa | more</li><li>rpm -qa | grep xx</li><li>rpm -q xx：查询xx软件包是否安装</li><li>rpm -qi xx：查询软件包信息</li><li>rpm -ql xx：查询软件包中的文件</li><li>rpm -qf 文件全路径名：查询文件所属的软件包</li></ul></li><li>卸载rpm包：rpm -e 软件包名称</li><li>删除时可能会发生依赖错误，忽视依赖强制删除的方法：rpm -e –nodeps 软件包名称</li><li>安装rpm包：rpm -ivh 软件包全路径名称<ul><li>i=install：安装</li><li>v=verbose：提示</li><li>h=hash：进度条</li></ul></li></ul><h2 id="14-YUM"><a href="#14-YUM" class="headerlink" title="14.YUM"></a>14.YUM</h2><ul><li>YUM：是一个shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并安装，可以<strong>自动处理依赖性关系</strong>，并且一次安装所有依赖的软件包。使用yum的前提是联网。</li><li>yum list | grep xx：查询yum服务器是否有需要安装的软件</li><li>yum install xx：安装指定的yum包</li><li>yum -y remove xx：卸载指定的yum包</li></ul><h2 id="15-搭建JAVAEE环境"><a href="#15-搭建JAVAEE环境" class="headerlink" title="15.搭建JAVAEE环境"></a>15.搭建JAVAEE环境</h2><ol><li>将软件上传到/opt下</li><li>解压缩</li><li>配置环境变量的配置文件vim /etc/profile<ul><li>JAVA_HOME=/opt/jdk1.7.0_79</li><li>PATH=/opt/jdk1.7.0_79/bin:$PATH</li><li>export JAVA_HOME PATH</li><li>保存然后source /etc/profile生效</li></ul></li></ol><h2 id="16-安装Tomcat"><a href="#16-安装Tomcat" class="headerlink" title="16.安装Tomcat"></a>16.安装Tomcat</h2><ol><li>解压缩到/opt：tar -zxvf apache-tomcat-7.0.70.tar.gz</li><li>进入tomcat的bin目录，启动tomcat ./startup.sh：./startup.sh</li><li>开放端口 vim /etc/sysconfig/iptables<ul><li>firewall-cmd –zone=public –add-port=8080/tcp –permanent（Centos7）</li><li>systemctl restart firewalld.service</li><li>firewall-cmd –reload</li><li>重启防火墙生效</li></ul></li><li>测试是否安装成功：在windows和Linux下访问<a href="http://linuxip:8080/">http://linuxip:8080</a></li></ol><h2 id="17-安装Eclipse"><a href="#17-安装Eclipse" class="headerlink" title="17.安装Eclipse"></a>17.安装Eclipse</h2><ol><li>解压缩到/opt：tar -zxvf eclipse-jee-mars-2-linux-gtk-x86_64.tar.gz</li><li>启动eclipse，配置jre和server：./eclipse</li><li>编写Hello world程序并测试成功</li><li>编写jsp页面，并测试成功</li></ol><h2 id="18-安装mysql"><a href="#18-安装mysql" class="headerlink" title="18.安装mysql"></a>18.安装mysql</h2><ol><li><p>查看是否有mysql：rpm -qa | grep mysql</p></li><li><p>删除旧mysql：rpm -e –nopdeps mysql（强制删除）</p></li><li><p>安装环境：yum -y install make gcc-c++ cmake bison-devel ncurses-devel</p></li><li><p>解压mysql：tar -zxvf mysql-5.6.14.tar.gz</p></li><li><p>进入mysql目录</p></li><li><p>编译安装：</p><p>cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql<br>-DMYSQL_DATADIR=/usr/local/mysql/data -DSYSCONFDIR=/etc<br>-DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1<br>-DWITH_MEMORY_STORAGE_ENGINE=1 -DWITH_READLINE=1<br>-DMYSQL_UNIX_ADDR=/var/lib/mysql/mysql.sock -DMYSQL_TCP_PORT=3306<br>-DENABLED_LOCAL_INFILE=1 -DWITH_PARTITION_STORAGE_ENHINE=1<br>-DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8<br>-DDEFAULT_COLLATION=utf8_general_ci</p></li><li><p>编译并安装：make &amp;&amp; make install</p></li><li><p>配置mysql，设置权限</p><ul><li><p>查看是否有mysql用户和组：cat /etc/passwd，cat /etc/group</p></li><li><p>添加mysql组：groupadd mysql</p></li><li><p>添加mysql用户并放在mysql组中：useradd -g mysql mysql</p></li><li><p>修改/usr/local/mysql权限：chown -R mysql:mysql /usr/local/mysql/</p></li><li><p>初始化mysql：</p><p>scripts/mysql_install_db –basedir=/usr/local/mysql –datadir=/usr/local/mysql/data<br>–user=mysql</p><p>如果报错：<code>Can't locate Data/Dumper.pm</code>，则运行：<code>yum install 'perl(Data::Dumper)'</code>，参考链接：<a href="https://www.cnblogs.com/yanghongfei/p/7118072.html">https://www.cnblogs.com/yanghongfei/p/7118072.html</a></p></li><li><p>删除之前mysql的配置文件：mv /etc/my.cnf /etc/my.cnf.bak</p></li></ul></li><li><p>启动MySQL</p><ul><li><p>添加服务，拷贝服务脚本到init.d目录，并设置开机启动</p></li><li><p>[注意在 /usr/local/mysql 下执行]</p><p>cp support-files/mysql.server /etc/init.d/mysql</p><p>chkconfig mysql on</p><p>service mysql start</p></li><li><p>执行下面的命令修改root密码</p><p>cd /usr/local/mysql/bin</p><p>./mysql -u root -p</p><p>set password = password(‘root’);（quit退出mysql）</p></li></ul></li></ol><h2 id="19-Shell编程"><a href="#19-Shell编程" class="headerlink" title="19.Shell编程"></a>19.Shell编程</h2><ul><li><p>Shell是一个命令行解释器，它为用户提供了一个向Linux内核发送请求以便裕兴程序的界面系统级程序，用户可以用Shell来启动、挂起、停止甚至是编写一些程序。</p></li><li><p>Shell脚本的执行方式：</p><ul><li>脚本格式要求：<ul><li>脚本以#!/bin/bash 开头</li><li>脚本需要有可执行权限</li></ul></li><li>脚本的常用执行方式：<ul><li>方式1（输入脚本的绝对路径或相对路径）<ul><li>首先要赋予xx.sh脚本的+x权限：chmod 744 myShell.sh</li><li>执行脚本：./myShell.sh</li></ul></li><li>方式2（sh+脚本）：<ul><li>说明：不用赋予+x权限，直接执行即可</li><li>sh ./myShell.sh</li></ul></li></ul></li></ul></li><li><p>shell的变量</p><ul><li><p>shell变量的介绍</p><ul><li>Linux Shell的变量分为，系统变量和用户自定义变量</li><li>系统变量：<code>$HOME</code>、<code>$PWD</code>、<code>$SHELL</code>、<code>$USER</code>等等</li><li>显示当前shell中所有变量：set</li></ul></li><li><p>shell变量的定义</p><ul><li><p>基本语法</p><p>定义变量：变量=值，**=两边不能有空格**</p><p>撤销变量：unset 变量</p><p>声明静态变量：readonly 变量，注意：不能unset</p></li></ul></li><li><p>定义变量的规则</p><ul><li>变量名称可以由字母、数字和下划线组成，但是不能以数字开头</li><li>等号两侧不能有空格</li><li>变量名称一般习惯为大写</li></ul></li><li><p>将命令的返回值赋给变量</p><ul><li>A=<code>ls -la</code>这里有反引号（ESC下面），运行里面的命令，并把结果返回给变量A</li><li>A=$(ls -la)等价于上面</li></ul></li></ul></li><li><p>设置环境变量</p><ul><li><p>基本语法</p><ul><li><p>export 变量名=变量值：将shell变量输出为环境变量</p></li><li><p>source 配置文件：让修改后的配置文件信息立即生效</p></li><li><p>echo $变量名：查询环境变量的值</p></li><li><p>多行注释：</p><p>:&lt;&lt;!</p><p>需要注释的内容</p><p>!</p></li></ul></li></ul></li><li><p>位置参数变量</p><ul><li>当我们执行一个shell脚本时，如果希望获取到命令行的参数信息就可以使用到位置参数变量。比如： ./myshell.sh 100 200，这个就是一个执行shell的命令行，可以在myshell脚本中传参100，200。</li><li>基本语法：<ul><li><code>$n</code>：n为数字，<code>$0</code>代表命令本身，<code>$1-$9</code>代表第一到第九个参数，10以上的参数需要用大括号包含，如<code>${10}</code></li><li><code>$*</code>：这个变量代表命令行中所有的参数，<code>$*</code>把所有的参数看成一个整体</li><li><code>$@</code>：这个变量也代表命令行中所有的参数，不过<code>$@</code>把每个参数区分对待</li><li><code>$#</code>：这个变量代表命令行中所有参数的个数</li></ul></li></ul></li><li><p>预定义变量</p><ul><li>shell设计者事先已经定义好的变量，可以直接在shell脚本中使用</li><li>基本语法：<ul><li><code>$$</code>：当前进程的进程号（PID）</li><li><code>$!</code>：后台运行的最后一个进程的进程号（PID）</li><li><code>$?</code>：最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值为非0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确。</li><li>后台运行：./myShell.sh &amp;</li></ul></li></ul></li><li><p>运算符</p><ul><li>在Shell中进行各种运算操作</li><li>“<code>$</code>((运算式))”或“<code>$</code>[运算时]”</li><li>expr m + n，注意expr运算符间要有空格</li><li>expr m - n</li><li>expr <code>\*</code> / %，乘，除，取余</li></ul></li><li><p>条件判断</p><ul><li>基本语法：[ condition ]，注意condition前后有空格！</li><li>非空返回true，可使用$?验证（0为true，&gt;1为false）</li><li>两个整数比较<ul><li>=：字符串比较</li><li>-lt：小于</li><li>-le：小于等于</li><li>-eq：等于</li><li>-gt：大于</li><li>-ge：大于等于</li><li>-ne：不等于</li></ul></li><li>按照文件权限进行判断<ul><li>-r：有读的权限</li><li>-w：有写的权限</li><li>-x：有执行的权限</li></ul></li><li>按照文件类型进行判断<ul><li>-f：文件存在并且是一个常规的文件</li><li>-e：文件存在</li><li>-d：文件存在并且是一个目录</li></ul></li></ul></li><li><p>流程控制if语句</p><ul><li><p>if判断基本语法：</p><p>if [ 条件判断式 ];then</p><p>程序</p><p>fi</p></li><li><p>或者：</p><p>if [ 条件判断式 ]</p><p> then</p><p> 程序</p><p>elif [ 条件判断式 ]</p><p> then</p><p> 程序</p><p>fi</p></li></ul></li><li><p>流程控制case语句</p><ul><li><p>case语句基本语法：</p><p>case $变量名 in</p><p>“值1”)</p><p>如果变量的值等于值1，则执行程序1</p><p>;;</p><p>“值2”)</p><p>如果变量的值等于值2，则执行程序2</p><p>;;</p><p>…省略其他分支…</p><p>*)</p><p>如果变量的值都不是以上的值，则执行此程序</p><p>;;</p><p>esac</p></li></ul></li><li><p>流程控制for循环</p><ul><li><p>for循环基本语法1：</p><p>for 变量 in 值1 值2 值3…</p><p> do</p><p> 程序</p><p> done</p></li><li><p>for循环基本语法2</p><p>for ((初始值;循环控制条件;变量变化))</p><p> do</p><p> 程序</p><p> done</p></li></ul></li><li><p>流程控制while循环</p><ul><li><p>while循环基本语法1：</p><p>while [ 条件判断式 ]</p><p> do</p><p> 程序</p><p> done</p></li></ul></li><li><p>read读取控制台的输入</p><ul><li>read [选项] (参数)</li><li>-p：指定读取值时的提示符</li><li>-t：指定读取值时等待的时间（秒），如果没有在指定的时间内输入，就不再等待了。</li><li>参数：变量：指定读取值的变量名</li></ul></li><li><p>函数</p><ul><li><p>系统函数</p><ul><li>basename：返回完整路径最后/的部分，常用于获取文件名<ul><li>basename [pathname] [suffix]</li><li>basename [string] [suffix]</li><li>basename命令会删掉所有的前缀包括最后一个/</li><li>选项：suffix为后缀，如果suffix被指定了，basename会将pathname或string中的suffix去掉</li></ul></li><li>dirname：返回完整路径最后/的前面的部分，常用于返回路径部分<ul><li>dirname 文件绝对路径：从给定的包含绝对路径的文件名中出去文件名（非目录部分），然后返回剩下的路径（目录部分）</li></ul></li><li><strong>反正两个系统函数都不要最后一个/</strong></li></ul></li><li><p>自定义函数</p><ul><li><p>基本语法：</p><p>function funname()</p><p>{</p><p> Action;</p><p> [return int;]</p><p>}</p></li><li><p>调用直接写函数名：funname（不用写括号），然后在后面写参数</p></li></ul></li></ul></li></ul><h2 id="20-Shell编程综合案例"><a href="#20-Shell编程综合案例" class="headerlink" title="20.Shell编程综合案例"></a>20.Shell编程综合案例</h2><ul><li><p>需求分析</p><ol><li>每天凌晨2：10备份数据库atguiguDB到/data/backup/db</li><li>备份开始和备份结束能够给出相应的提示信息</li><li>备份后的文件要求以备份时间为文件名，并打包成.tar.gz的形式，比如：2018-03-12_230201.tar.gz</li><li>在备份的同时，检查是否有10天前备份的数据库文件，如果有就将其删除。</li></ol></li><li><p>如果报错：mysqldump: command not found</p><p>解决方案：</p><ol><li>先找到mysqldump的位置：find / -name mysqldump -print</li><li>然后建立一个链接：ln -fs /usr/local/mysql/bin/mysql /usr/bin</li></ol></li><li><p>crontab -e</p></li><li><p>10 2 * * * /usr/sbin/mysql_backup_db.sh</p></li></ul><h2 id="21-Python定制篇-开发平台Ubuntu"><a href="#21-Python定制篇-开发平台Ubuntu" class="headerlink" title="21.Python定制篇 开发平台Ubuntu"></a>21.Python定制篇 开发平台Ubuntu</h2><ul><li><p>设置Ubuntu支持中文</p></li><li><p>su root显示认证失败：是因为我们还没有对root用户设置密码</p></li><li><p>给root用户设密码：sudo passwd</p></li><li><p>如果ubuntu没有vim：apt install vim</p></li><li><p>apt软件管理和远程登录</p><ul><li><p>apt：Advanced Packaging Tool，是一款安装包管理工具。在Ubuntu下，我们可以使用apt命令进行软件包的安装、删除、清理等。</p></li><li><p>常用命令：</p><p>sudo apt-get update<br>更新源<br>sudo apt-get install package 安装包<br>sudo apt-get remove package 删除包<br>sudo apt-cache search package 搜索软件包<br>sudo apt-cache show package<br>获取包的相关信息,如说明、大小、版本等<br>sudo apt-get install package –reinstall<br>重新安装包</p><p>sudo apt-get -f install<br>修复安装<br>sudo apt-get remove package –purge 删除包,包括配置文件等<br>sudo apt-get build-dep package 安装相关的编译环境</p><p>sudo apt-get upgrade 更新已安装的包<br>sudo apt-get dist-upgrade 升级系统<br>sudo apt-cache depends package 了解使用该包依赖那些包<br>sudo apt-cache rdepends package 查看该包被哪些包依赖<br>sudo apt-get source package<br>下载该包的源代码</p></li><li><p>更新Ubuntu软件下载地址</p><ul><li>查看Ubuntu版本：cat /proc/version</li><li>需要修改的文件位置：/etc/apt/source.list</li></ul></li></ul></li><li><p>Windows使用SSH远程登录Ubuntu</p><ul><li>安装SSH：sudo apt-get install openssh-server</li><li>启用SSH：service sshd start</li></ul></li><li><p>Linux使用SSH远程登录Ubuntu</p><ul><li>同上</li><li>基本语法：ssh 用户名@IP</li><li>例如：ssh <a href="mailto:atguigu@192.168.188.130">atguigu@192.168.188.130</a></li><li>使用shh访问，如访问出现错误。可查看是否有该文件 ~/.ssh/known_ssh，尝试删除该文件解决。</li><li>登出：exit或者logout</li></ul></li></ul>]]></content>
    
    
    <summary type="html">Linux学习</summary>
    
    
    
    <category term="linux" scheme="https://13592491893.github.io/categories/linux/"/>
    
    
    <category term="命令" scheme="https://13592491893.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
    <category term="尚硅谷" scheme="https://13592491893.github.io/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"/>
    
    <category term="linux" scheme="https://13592491893.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>线程面试题</title>
    <link href="https://13592491893.github.io/posts/e7c06c22.html"/>
    <id>https://13592491893.github.io/posts/e7c06c22.html</id>
    <published>2021-11-25T16:00:00.000Z</published>
    <updated>2021-12-29T03:19:25.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h4 id="1-什么是线程？"><a href="#1-什么是线程？" class="headerlink" title="1) 什么是线程？"></a>1) 什么是线程？</h4><p>线程是操作系统能够进行运算调度的最小单位，它被包含在进程之中，是进程中的实际运作单位。程序员可以通过它进行多处理器编程，你可以使用多线程对 运算密集型任务提速。比如，如果一个线程完成一个任务要100毫秒，那么用十个线程完成改任务只需10毫秒。Java在语言层面对多线程提供了卓越的支 持，它也是一个很好的卖点。</p><h4 id="2-线程和进程有什么区别？"><a href="#2-线程和进程有什么区别？" class="headerlink" title="2) 线程和进程有什么区别？"></a>2) 线程和进程有什么区别？</h4><p>线程是进程的子集，一个进程可以有很多线程，每条线程并行执行不同的任务。不同的进程使用不同的内存空间，而所有的线程共享一片相同的内存空间。别把它和栈内存搞混，每个线程都拥有单独的栈内存用来存储本地数据。</p><h4 id="3-如何在Java中实现线程？"><a href="#3-如何在Java中实现线程？" class="headerlink" title="3) 如何在Java中实现线程？"></a>3) 如何在Java中实现线程？</h4><p>在语言层面有三种方式。java.lang.Thread 类的实例就是一个线程但是它需要调用java.lang.Runnable接口来执行，由于线程类本身就是调用的Runnable接口所以你可以继承 java.lang.Thread 类或者直接调用Runnable接口来重写run()方法实现线程。第三种 实现Callable&lt;&gt;接口并重写call方法。</p><h4 id="4-用Runnable还是Thread？"><a href="#4-用Runnable还是Thread？" class="headerlink" title="4) 用Runnable还是Thread？"></a>4) 用Runnable还是Thread？</h4><p>这个问题是上题的后续，大家都知道我们可以通过继承Thread类或者调用Runnable接口来实现线程，问题是，那个方法更好呢？什么情况下使 用它？这个问题很容易回答，如果你知道Java不支持类的多重继承，但允许你调用多个接口。所以如果你要继承其他类，当然是调用Runnable接口好 了。</p><h4 id="6-Thread-类中的start-和-run-方法有什么区别？"><a href="#6-Thread-类中的start-和-run-方法有什么区别？" class="headerlink" title="6) Thread 类中的start() 和 run() 方法有什么区别？"></a>6) Thread 类中的start() 和 run() 方法有什么区别？</h4><p>这个问题经常被问到，但还是能从此区分出面试者对Java线程模型的理解程度。start()方法被用来启动新创建的线程，而且start()内部 调用了run()方法，这和直接调用run()方法的效果不一样。当你调用run()方法的时候，只会是在原来的线程中调用，没有新的线程启 动，start()方法才会启动新线程。</p><h4 id="7-Java中Runnable和Callable有什么不同？"><a href="#7-Java中Runnable和Callable有什么不同？" class="headerlink" title="7) Java中Runnable和Callable有什么不同？"></a>7) Java中Runnable和Callable有什么不同？</h4><p>Runnable和Callable都代表那些要在不同的线程中执行的任务。Runnable从JDK1.0开始就有了，Callable是在 JDK1.5增加的。它们的主要区别是Callable的 call() 方法可以返回值和抛出异常，而Runnable的run()方法没有这些功能。Callable可以返回装载有计算结果的Future对象。</p><h4 id="8-Java中的volatile-变量是什么？"><a href="#8-Java中的volatile-变量是什么？" class="headerlink" title="8) Java中的volatile 变量是什么？"></a>8) Java中的volatile 变量是什么？</h4><p>volatile是一个特殊的修饰符，只有成员变量才能使用它。保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。</p><h4 id="11-什么是线程安全？Vector是一个线程安全类吗？"><a href="#11-什么是线程安全？Vector是一个线程安全类吗？" class="headerlink" title="11) 什么是线程安全？Vector是一个线程安全类吗？"></a>11) 什么是线程安全？Vector是一个线程安全类吗？</h4><p>如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，而且其他的变量 的值也和预期的是一样的，就是线程安全的。一个线程安全的计数器类的同一个实例对象在被多个线程使用的情况下也不会出现计算失误。很显然你可以将集合类分 成两组，线程安全和非线程安全的。Vector 是用同步方法来实现线程安全的, 而和它相似的ArrayList不是线程安全的。</p><h4 id="12-Java中notify-和-notifyAll有什么区别？"><a href="#12-Java中notify-和-notifyAll有什么区别？" class="headerlink" title="12) Java中notify 和 notifyAll有什么区别？"></a>12) Java中notify 和 notifyAll有什么区别？</h4><p>这又是一个刁钻的问题，因为多线程可以等待单监控锁，Java API 的设计人员提供了一些方法当等待条件改变的时候通知它们，但是这些方法没有完全实现。notify()方法不能唤醒某个具体的线程，所以只有一个线程在等 待的时候它才有用武之地。而notifyAll()唤醒所有线程并允许他们争夺锁确保了至少有一个线程能继续运行。</p><h4 id="17-为什么wait-notify-和-notifyAll这些方法不在thread类里面？"><a href="#17-为什么wait-notify-和-notifyAll这些方法不在thread类里面？" class="headerlink" title="17) 为什么wait, notify 和 notifyAll这些方法不在thread类里面？"></a>17) 为什么wait, notify 和 notifyAll这些方法不在thread类里面？</h4><p>这是个设计相关的问题，它考察的是面试者对现有系统和一些普遍存在但看起来不合理的事物的看法。回答这些问题的时候，你要说明为什么把这些方法放在 Object类里是有意义的，还有不把它放在Thread类里的原因。一个很明显的原因是JAVA提供的锁是对象级的而不是线程级的，每个对象都有锁，通 过线程获得。如果线程需要等待某些锁那么调用对象中的wait()方法就有意义了。如果wait()方法定义在Thread类中，线程正在等待的是哪个锁 就不明显了。简单的说，由于wait，notify和notifyAll都是锁级别的操作，所以把他们定义在Object类中因为锁属于对象。</p><h4 id="18-什么是ThreadLocal变量？"><a href="#18-什么是ThreadLocal变量？" class="headerlink" title="18) 什么是ThreadLocal变量？"></a>18) 什么是ThreadLocal变量？</h4><p>ThreadLocal使用场合主要解决多线程中数据数据因并发产生不一致问题。ThreadLocal为每个线程的中并发访问的数据提供一个副本，通过访问副本来运行业务，这样的结果是耗费了内存，单大大减少了线程同步所带来性能消耗，也减少了线程并发控制的复杂度。</p><p>ThreadLocal不能使用原子类型，只能使用Object类型。ThreadLocal的使用比synchronized要简单得多。</p><p>ThreadLocal和Synchonized都用于解决多线程并发访问。但是ThreadLocal与synchronized有本质的区别。synchronized是利用锁的机制，使变量或代码块在某一时该只能被一个线程访问。而ThreadLocal为每一个线程都提供了变量的副本，使得每个线程在某一时间访问到的并不是同一个对象，这样就隔离了多个线程对数据的数据共享。而Synchronized却正好相反，它用于在多个线程间通信时能够获得数据共享。</p><h4 id="19-什么是FutureTask？"><a href="#19-什么是FutureTask？" class="headerlink" title="19) 什么是FutureTask？"></a>19) 什么是FutureTask？</h4><p>在Java并发程序中FutureTask表示一个可以取消的异步运算。它有启动和取消运算、查询运算是否完成和取回运算结果等方法。只有当运算完 成的时候结果才能取回，如果运算尚未完成get方法将会阻塞。一个FutureTask对象可以对调用了Callable和Runnable的对象进行包 装，由于FutureTask也是调用了Runnable接口所以它可以提交给Executor来执行。</p><h4 id="20-Java中interrupted-和-isInterruptedd方法的区别？"><a href="#20-Java中interrupted-和-isInterruptedd方法的区别？" class="headerlink" title="20) Java中interrupted 和 isInterruptedd方法的区别？"></a>20) Java中interrupted 和 isInterruptedd方法的区别？</h4><p>interrupted() 和 isInterrupted()的主要区别是前者会将中断状态清除而后者不会。Java多线程的中断机制是用内部标识来实现的，调用Thread.interrupt()来中断一个线程就会设置中断标识为true。当中断线程调用<a href="http://java67.blogspot.com/2012/11/what-is-static-class-variable-method.html">静态方法</a>Thread.interrupted()来 检查中断状态时，中断状态会被清零。而非静态方法isInterrupted()用来查询其它线程的中断状态且不会改变中断状态标识。简单的说就是任何抛 出InterruptedException异常的方法都会将中断状态清零。无论如何，一个线程的中断状态有有可能被其它线程调用中断来改变。</p><h4 id="21-为什么wait和notify方法要在同步块中调用？"><a href="#21-为什么wait和notify方法要在同步块中调用？" class="headerlink" title="21) 为什么wait和notify方法要在同步块中调用？"></a>21) 为什么wait和notify方法要在同步块中调用？</h4><p>主要是因为Java API强制要求这样做，如果你不这么做，你的代码会抛出IllegalMonitorStateException异常。还有一个原因是为了避免wait和notify之间产生竞态条件。</p><h4 id="22-为什么你应该在循环中检查等待条件"><a href="#22-为什么你应该在循环中检查等待条件" class="headerlink" title="22) 为什么你应该在循环中检查等待条件?"></a>22) 为什么你应该在循环中检查等待条件?</h4><p>处于等待状态的线程可能会收到错误警报和伪唤醒，如果不在循环中检查等待条件，程序就会在没有满足结束条件的情况下退出。因此，当一个等待线程醒来 时，不能认为它原来的等待状态仍然是有效的，在notify()方法调用之后和等待线程醒来之前这段时间它可能会改变。这就是在循环中使用wait()方 法效果更好的原因，你可以在<a href="http://res.importnew.com/eclipse">Eclipse</a>中创建模板调用wait和notify试一试。如果你想了解更多关于这个问题的内容，我推荐你阅读《<a href="http://www.amazon.com/gp/product/B000WJOUPA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B000WJOUPA&amp;linkCode=as2&amp;tag=job0ae-20">Effective Java</a>》这本书中的线程和同步章节。</p><h4 id="23-Java中的同步集合与并发集合有什么区别？"><a href="#23-Java中的同步集合与并发集合有什么区别？" class="headerlink" title="23) Java中的同步集合与并发集合有什么区别？"></a>23) Java中的同步集合与并发集合有什么区别？</h4><p>同步集合与并发集合都为多线程和并发提供了合适的线程安全的集合，不过并发集合的可扩展性更高。在Java1.5之前程序员们只有同步集合来用且在 多线程并发的时候会导致争用，阻碍了系统的扩展性。Java5介绍了并发集合像ConcurrentHashMap，不仅提供线程安全还用锁分离和内部分 区等现代技术提高了可扩展性。</p><h4 id="24）-Java中堆和栈有什么不同？"><a href="#24）-Java中堆和栈有什么不同？" class="headerlink" title="24） Java中堆和栈有什么不同？"></a>24） Java中堆和栈有什么不同？</h4><p>为什么把这个问题归类在多线程和并发面试题里？因为栈是一块和线程紧密相关的内存区域。每个线程都有自己的栈内存，用于存储本地变量，方法参数和栈 调用，一个线程中存储的变量对其它线程是不可见的。而堆是所有线程共享的一片公用内存区域。对象都在堆里创建，为了提升效率线程会从堆中弄一个缓存到自己 的栈，如果多个线程使用该变量就可能引发问题，这时volatile 变量就可以发挥作用了，它要求线程从主存中读取变量的值。</p><h4 id="25）-什么是线程池？-为什么要使用它？"><a href="#25）-什么是线程池？-为什么要使用它？" class="headerlink" title="25） 什么是线程池？ 为什么要使用它？"></a>25） 什么是线程池？ 为什么要使用它？</h4><p>创建线程要花费昂贵的资源和时间，如果任务来了才创建线程那么响应时间会变长，而且一个进程能创建的线程数有限。为了避免这些问题，在程序启动的时 候就创建若干线程来响应处理，它们被称为线程池，里面的线程叫工作线程。从JDK1.5开始，Java API提供了Executor框架让你可以创建不同的线程池。比如单线程池，每次处理一个任务；数目固定的线程池或者是缓存线程池（一个适合很多生存期短 的任务的程序的可扩展线程池）。</p><h4 id="26）-如何写代码来解决生产者消费者问题？"><a href="#26）-如何写代码来解决生产者消费者问题？" class="headerlink" title="26） 如何写代码来解决生产者消费者问题？"></a>26） 如何写代码来解决生产者消费者问题？</h4><p>在现实中你解决的许多线程问题都属于生产者消费者模型，就是一个线程生产任务供其它线程进行消费，你必须知道怎么进行线程间通信来解决这个问题。比 较低级的办法是用wait和notify来解决这个问题，比较赞的办法是用Semaphore 或者 BlockingQueue来实现生产者消费者模型，<a href="http://javarevisited.blogspot.sg/2012/02/producer-consumer-design-pattern-with.html">这篇教程</a>有实现它。</p><h4 id="27）-如何避免死锁？"><a href="#27）-如何避免死锁？" class="headerlink" title="27） 如何避免死锁？"></a>27） 如何避免死锁？</h4><p><a href="http://www.importnew.com/12773.html/deadlock-in-java"><img src="https://gitee.com/gsshy/picgo/raw/master/img/1423152463136397.jpg" alt="deadlock in Java"></a><br>Java多线程中的死锁<br>死锁是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。这是一个严重的问题，因为死锁会让你的程序挂起无法完成任务，死锁的发生必须满足以下四个条件：</p><ul><li>互斥条件：一个资源每次只能被一个进程使用。</li><li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。</li><li>不剥夺条件：进程已获得的资源，在末使用完之前，不能强行剥夺。</li><li>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。</li></ul><p>避免死锁最简单的方法就是阻止循环等待条件，将系统中所有的资源设置标志位、排序，规定所有的进程申请资源必须以一定的顺序（升序或降序）做操作来避免死锁。</p><h4 id="28-Java中活锁和死锁有什么区别？"><a href="#28-Java中活锁和死锁有什么区别？" class="headerlink" title="28) Java中活锁和死锁有什么区别？"></a>28) Java中活锁和死锁有什么区别？</h4><p>这是上题的扩展，活锁和死锁类似，不同之处在于处于活锁的线程或进程的状态是不断改变的，活锁可以认为是一种特殊的饥饿。一个现实的活锁例子是两个 人在狭小的走廊碰到，两个人都试着避让对方好让彼此通过，但是因为避让的方向都一样导致最后谁都不能通过走廊。简单的说就是，活锁和死锁的主要区别是前者 进程的状态可以改变但是却不能继续执行。</p><h4 id="29）-怎么检测一个线程是否拥有锁？"><a href="#29）-怎么检测一个线程是否拥有锁？" class="headerlink" title="29） 怎么检测一个线程是否拥有锁？"></a>29） 怎么检测一个线程是否拥有锁？</h4><p>我一直不知道我们竟然可以检测一个线程是否拥有锁，直到我参加了一次电话面试。在java.lang.Thread中有一个方法叫holdsLock()，它返回true如果当且仅当当前线程拥有某个具体对象的锁。</p><h4 id="30-你如何在Java中获取线程堆栈？"><a href="#30-你如何在Java中获取线程堆栈？" class="headerlink" title="30) 你如何在Java中获取线程堆栈？"></a>30) 你如何在Java中获取线程堆栈？</h4><p>对于不同的操作系统，有多种方法来获得Java进程的线程堆栈。当你获取线程堆栈时，JVM会把所有线程的状态存到日志文件或者输出到控制台。在 Windows你可以使用Ctrl + Break组合键来获取线程堆栈，Linux下用kill -3命令。你也可以用jstack这个工具来获取，它对线程id进行操作，你可以用jps这个工具找到id。</p><h4 id="31-JVM中哪个参数是用来控制线程的栈堆栈小的"><a href="#31-JVM中哪个参数是用来控制线程的栈堆栈小的" class="headerlink" title="31) JVM中哪个参数是用来控制线程的栈堆栈小的"></a>31) JVM中哪个参数是用来控制线程的栈堆栈小的</h4><p>这个问题很简单， -Xss参数用来控制线程的堆栈大小。</p><h4 id="32）-Java中synchronized-和-ReentrantLock-有什么不同？"><a href="#32）-Java中synchronized-和-ReentrantLock-有什么不同？" class="headerlink" title="32） Java中synchronized 和 ReentrantLock 有什么不同？"></a>32） Java中synchronized 和 ReentrantLock 有什么不同？</h4><p>Java在过去很长一段时间只能通过synchronized关键字来实现互斥，它有一些缺点。比如你不能扩展锁之外的方法或者块边界，尝试获取锁 时不能中途取消等。Java 5 通过Lock接口提供了更复杂的控制来解决这些问题。 ReentrantLock 类实现了 Lock，它拥有与 synchronized 相同的并发性和内存语义且它还具有可扩展性。</p><h4 id="33）-有三个线程T1，T2，T3，怎么确保它们按顺序执行？"><a href="#33）-有三个线程T1，T2，T3，怎么确保它们按顺序执行？" class="headerlink" title="33） 有三个线程T1，T2，T3，怎么确保它们按顺序执行？"></a>33） 有三个线程T1，T2，T3，怎么确保它们按顺序执行？</h4><p>在多线程中有多种方法让线程按特定顺序执行，你可以用线程类的join()方法在一个线程中启动另一个线程，另外一个线程完成该线程继续执行。为了确保三个线程的顺序你应该先启动最后一个(T3调用T2，T2调用T1)，这样T1就会先完成而T3最后完成。</p><h4 id="34-Thread类中的yield方法有什么作用？"><a href="#34-Thread类中的yield方法有什么作用？" class="headerlink" title="34) Thread类中的yield方法有什么作用？"></a>34) Thread类中的yield方法有什么作用？</h4><p>Yield方法可以暂停当前正在执行的线程对象，让其它有相同优先级的线程执行。它是一个静态方法而且只保证当前线程放弃CPU占用而不能保证使其它线程一定能占用CPU，执行yield()的线程有可能在进入到暂停状态后马上又被执行。</p><h4 id="35）-Java中ConcurrentHashMap的并发度是什么？"><a href="#35）-Java中ConcurrentHashMap的并发度是什么？" class="headerlink" title="35） Java中ConcurrentHashMap的并发度是什么？"></a>35） Java中ConcurrentHashMap的并发度是什么？</h4><p>ConcurrentHashMap把实际map划分成若干部分来实现它的可扩展性和线程安全。这种划分是使用并发度获得的，它是 ConcurrentHashMap类构造函数的一个可选参数，默认值为16，这样在多线程情况下就能避免争用。</p><h4 id="36）-Java中Semaphore是什么？"><a href="#36）-Java中Semaphore是什么？" class="headerlink" title="36） Java中Semaphore是什么？"></a>36） Java中Semaphore是什么？</h4><p>Java中的Semaphore是一种新的同步类，它是一个计数信号。从概念上讲，从概念上讲，信号量维护了一个许可集合。如有必要，在许可可用前 会阻塞每一个 acquire()，然后再获取该许可。每个 release()添加一个许可，从而可能释放一个正在阻塞的获取者。但是，不使用实际的许可对象，Semaphore只对可用许可的号码进行计数，并采 取相应的行动。信号量常常用于多线程的代码中，比如数据库连接池。</p><h4 id="37）如果你提交任务时，线程池队列已满。会时发会生什么？"><a href="#37）如果你提交任务时，线程池队列已满。会时发会生什么？" class="headerlink" title="37）如果你提交任务时，线程池队列已满。会时发会生什么？"></a>37）如果你提交任务时，线程池队列已满。会时发会生什么？</h4><p>这个问题问得很狡猾，许多程序员会认为该任务会阻塞直到线程池队列有空位。事实上如果一个任务不能被调度执行那么ThreadPoolExecutor’s submit()方法将会抛出一个RejectedExecutionException异常。</p><h4 id="38-Java线程池中submit-和-execute-方法有什么区别？"><a href="#38-Java线程池中submit-和-execute-方法有什么区别？" class="headerlink" title="38) Java线程池中submit() 和 execute()方法有什么区别？"></a>38) Java线程池中submit() 和 execute()方法有什么区别？</h4><p>两个方法都可以向线程池提交任务，execute()方法的返回类型是void，它定义在Executor接口中, 而submit()方法可以返回持有计算结果的Future对象，它定义在ExecutorService接口中，它扩展了Executor接口，其它线 程池类像ThreadPoolExecutor和ScheduledThreadPoolExecutor都有这些方法。</p><h4 id="39-什么是阻塞式方法？"><a href="#39-什么是阻塞式方法？" class="headerlink" title="39) 什么是阻塞式方法？"></a>39) 什么是阻塞式方法？</h4><p>阻塞式方法是指程序会一直等待该方法完成期间不做其他事情，ServerSocket的accept()方法就是一直等待客户端连接。这里的阻塞是 指调用结果返回之前，当前线程会被挂起，直到得到结果之后才会返回。此外，还有异步和非阻塞式方法在任务完成前就返回。</p><h4 id="40-Swing是线程安全的吗？-为什么？"><a href="#40-Swing是线程安全的吗？-为什么？" class="headerlink" title="40) Swing是线程安全的吗？ 为什么？"></a>40) Swing是线程安全的吗？ 为什么？</h4><p>你可以很肯定的给出回答，Swing不是线程安全的，但是你应该解释这么回答的原因即便面试官没有问你为什么。当我们说swing不是线程安全的常 常提到它的组件，这些组件不能在多线程中进行修改，所有对GUI组件的更新都要在AWT线程中完成，而Swing提供了同步和异步两种回调方法来进行更 新。</p><h4 id="41）-Java中invokeAndWait-和-invokeLater有什么区别？"><a href="#41）-Java中invokeAndWait-和-invokeLater有什么区别？" class="headerlink" title="41） Java中invokeAndWait 和 invokeLater有什么区别？"></a>41） Java中invokeAndWait 和 invokeLater有什么区别？</h4><p>这两个方法是Swing API 提供给Java开发者用来从当前线程而不是事件派发线程更新GUI组件用的。InvokeAndWait()同步更新GUI组件，比如一个进度条，一旦进 度更新了，进度条也要做出相应改变。如果进度被多个线程跟踪，那么就调用invokeAndWait()方法请求事件派发线程对组件进行相应更新。而 invokeLater()方法是异步调用更新组件的。</p><h4 id="42-Swing-API中那些方法是线程安全的？"><a href="#42-Swing-API中那些方法是线程安全的？" class="headerlink" title="42) Swing API中那些方法是线程安全的？"></a>42) Swing API中那些方法是线程安全的？</h4><p>这个问题又提到了swing和线程安全，虽然组件不是线程安全的但是有一些方法是可以被多线程安全调用的，比如repaint(), revalidate()。 JTextComponent的setText()方法和JTextArea的insert() 和 append() 方法也是线程安全的。</p><h4 id="43-如何在Java中创建Immutable对象？"><a href="#43-如何在Java中创建Immutable对象？" class="headerlink" title="43) 如何在Java中创建Immutable对象？"></a>43) 如何在Java中创建Immutable对象？</h4><p>这个问题看起来和多线程没什么关系， 但不变性有助于简化已经很复杂的并发程序。Immutable对象可以在没有同步的情况下共享，降低了对该对象进行并发访问时的同步化开销。可是Java 没有@Immutable这个注解符，要创建不可变类，要实现下面几个步骤：通过构造方法初始化所有成员、对变量不要提供setter方法、将所有的成员 声明为私有的，这样就不允许直接访问这些成员、在getter方法中，不要直接返回对象本身，而是克隆对象，并返回对象的拷贝。我的文章<a href="http://javarevisited.blogspot.com/2013/03/how-to-create-immutable-class-object-java-example-tutorial.html">how to make an object Immutable in Java</a>有详细的教程，看完你可以充满自信。</p><h4 id="44）-Java中的ReadWriteLock是什么？"><a href="#44）-Java中的ReadWriteLock是什么？" class="headerlink" title="44） Java中的ReadWriteLock是什么？"></a>44） Java中的ReadWriteLock是什么？</h4><p>一般而言，读写锁是用来提升并发程序性能的锁分离技术的成果。Java中的ReadWriteLock是Java 5 中新增的一个接口，一个ReadWriteLock维护一对关联的锁，一个用于只读操作一个用于写。在没有写线程的情况下一个读锁可能会同时被多个读线程 持有。写锁是独占的，你可以使用JDK中的ReentrantReadWriteLock来实现这个规则，它最多支持65535个写锁和65535个读 锁。</p><h4 id="45-多线程中的忙循环是什么"><a href="#45-多线程中的忙循环是什么" class="headerlink" title="45) 多线程中的忙循环是什么?"></a>45) 多线程中的忙循环是什么?</h4><p>忙循环就是程序员用循环让一个线程等待，不像传统方法wait(), sleep() 或 yield() 它们都放弃了CPU控制，而忙循环不会放弃CPU，它就是在运行一个空循环。这么做的目的是为了保留CPU缓存，在多核系统中，一个等待线程醒来的时候可 能会在另一个内核运行，这样会重建缓存。为了避免重建缓存和减少等待重建的时间就可以使用它了。</p><h4 id="46）volatile-变量和-atomic-变量有什么不同？"><a href="#46）volatile-变量和-atomic-变量有什么不同？" class="headerlink" title="46）volatile 变量和 atomic 变量有什么不同？"></a>46）volatile 变量和 atomic 变量有什么不同？</h4><p>这是个有趣的问题。首先，volatile 变量和 atomic 变量看起来很像，但功能却不一样。Volatile变量可以确保先行关系，即写操作会发生在后续的读操作之前, 但它并不能保证原子性。例如用volatile修饰count变量那么 count++ 操作就不是原子性的。而AtomicInteger类提供的atomic方法可以让这种操作具有原子性如getAndIncrement()方法会原子性 的进行增量操作把当前值加一，其它数据类型和引用变量也可以进行相似操作。</p><h4 id="47-如果同步块内的线程抛出异常会发生什么？"><a href="#47-如果同步块内的线程抛出异常会发生什么？" class="headerlink" title="47) 如果同步块内的线程抛出异常会发生什么？"></a>47) 如果同步块内的线程抛出异常会发生什么？</h4><p>这个问题坑了很多Java程序员，若你能想到锁是否释放这条线索来回答还有点希望答对。无论你的同步块是正常还是异常退出的，里面的线程都会释放锁，所以对比锁接口我更喜欢同步块，因为它不用我花费精力去释放锁，该功能可以在<a href="http://javarevisited.blogspot.com/2012/11/difference-between-final-finally-and-finalize-java.html">finally block</a>里释放锁实现。</p><h4 id="48）-单例模式的双检锁是什么？"><a href="#48）-单例模式的双检锁是什么？" class="headerlink" title="48） 单例模式的双检锁是什么？"></a>48） 单例模式的双检锁是什么？</h4><p>这个问题在Java面试中经常被问到，但是面试官对回答此问题的满意度仅为50%。一半的人写不出双检锁还有一半的人说不出它的隐患和 Java1.5是如何对它修正的。它其实是一个用来创建线程安全的单例的老方法，当单例实例第一次被创建时它试图用单个锁进行性能优化，但是由于太过于复 杂在JDK1.4中它是失败的，我个人也不喜欢它。无论如何，即便你也不喜欢它但是还是要了解一下，因为它经常被问到。</p><h4 id="49）-如何在Java中创建线程安全的Singleton？"><a href="#49）-如何在Java中创建线程安全的Singleton？" class="headerlink" title="49） 如何在Java中创建线程安全的Singleton？"></a>49） 如何在Java中创建线程安全的Singleton？</h4><p>这是上面那个问题的后续，如果你不喜欢双检锁而面试官问了创建Singleton类的替代方法，你可以利用JVM的类加载和静态变量初始化特征来创建Singleton实例，或者是利用枚举类型来创建Singleton，我很喜欢用这种方法。</p><h4 id="50-写出3条你遵循的多线程最佳实践"><a href="#50-写出3条你遵循的多线程最佳实践" class="headerlink" title="50) 写出3条你遵循的多线程最佳实践"></a>50) 写出3条你遵循的多线程最佳实践</h4><p>这种问题我最喜欢了，我相信你在写并发代码来提升性能的时候也会遵循某些最佳实践。以下三条最佳实践我觉得大多数Java程序员都应该遵循：</p><ul><li>给你的线程起个有意义的名字。<br>这样可以方便找bug或追踪。OrderProcessor, QuoteProcessor or TradeProcessor 这种名字比 Thread-1. Thread-2 and Thread-3 好多了，给线程起一个和它要完成的任务相关的名字，所有的主要框架甚至JDK都遵循这个最佳实践。</li><li>避免锁定和缩小同步的范围<br>锁花费的代价高昂且上下文切换更耗费时间空间，试试最低限度的使用同步和锁，缩小临界区。因此相对于同步方法我更喜欢同步块，它给我拥有对锁的绝对控制权。</li><li>多用同步类少用wait 和 notify<br>首先，CountDownLatch, Semaphore, CyclicBarrier 和 Exchanger 这些同步类简化了编码操作，而用wait和notify很难实现对复杂控制流的控制。其次，这些类是由最好的企业编写和维护在后续的JDK中它们还会不断 优化和完善，使用这些更高等级的同步工具你的程序可以不费吹灰之力获得优化。</li><li>多用并发集合少用同步集合<br>这是另外一个容易遵循且受益巨大的最佳实践，并发集合比同步集合的可扩展性更好，所以在并发编程时使用并发集合效果更好。如果下一次你需要用到map，你应该首先想到用ConcurrentHashMap。</li></ul><h4 id="51-如何强制启动一个线程？"><a href="#51-如何强制启动一个线程？" class="headerlink" title="51) 如何强制启动一个线程？"></a>51) 如何强制启动一个线程？</h4><p>这个问题就像是如何强制进行Java垃圾回收，目前还没有觉得方法，虽然你可以使用System.gc()来进行垃圾回收，但是不保证能成功。在Java里面没有办法强制启动一个线程，它是被线程调度器控制着且Java没有公布相关的API。</p><h4 id="52-Java中的fork-join框架是什么？"><a href="#52-Java中的fork-join框架是什么？" class="headerlink" title="52) Java中的fork join框架是什么？"></a>52) Java中的fork join框架是什么？</h4><p>fork join框架是JDK7中出现的一款高效的工具，Java开发人员可以通过它充分利用现代服务器上的多处理器。它是专门为了那些可以递归划分成许多子模块 设计的，目的是将所有可用的处理能力用来提升程序的性能。fork join框架一个巨大的优势是它使用了工作窃取算法，可以完成更多任务的工作线程可以从其它线程中窃取任务来执行。</p><h4 id="53）-Java多线程中调用wait-和-sleep-方法有什么不同？"><a href="#53）-Java多线程中调用wait-和-sleep-方法有什么不同？" class="headerlink" title="53） Java多线程中调用wait() 和 sleep()方法有什么不同？"></a>53） Java多线程中调用wait() 和 sleep()方法有什么不同？</h4><p>Java程序中wait 和 sleep都会造成某种形式的暂停，它们可以满足不同的需要。wait()方法用于线程间通信，如果等待条件为真且其它线程被唤醒时它会释放锁，而 sleep()方法仅仅释放CPU资源或者让当前线程停止执行一段时间，但不会释放锁。</p>]]></content>
    
    
    <summary type="html">线程面试题</summary>
    
    
    
    <category term="java" scheme="https://13592491893.github.io/categories/java/"/>
    
    <category term="thread" scheme="https://13592491893.github.io/categories/java/thread/"/>
    
    
    <category term="命令" scheme="https://13592491893.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
    <category term="thread" scheme="https://13592491893.github.io/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>git学习</title>
    <link href="https://13592491893.github.io/posts/e28ceec1.html"/>
    <id>https://13592491893.github.io/posts/e28ceec1.html</id>
    <published>2021-11-25T16:00:00.000Z</published>
    <updated>2021-12-29T03:19:25.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git学习"><a href="#git学习" class="headerlink" title="git学习"></a>git学习</h1><h2 id="1-git-init"><a href="#1-git-init" class="headerlink" title="1.git init"></a>1.git init</h2><p>初始化本地库</p><h2 id="2-git-status"><a href="#2-git-status" class="headerlink" title="2.git status"></a>2.git status</h2><p>查看本地库状态</p><h2 id="3-git-add-ttt-txt"><a href="#3-git-add-ttt-txt" class="headerlink" title="3.git add ttt.txt"></a>3.git add ttt.txt</h2><p>把本地文件新增到暂存区</p><h2 id="4-https-learngitbranching-js-org-locale-zh-CN"><a href="#4-https-learngitbranching-js-org-locale-zh-CN" class="headerlink" title="4.https://learngitbranching.js.org/?locale=zh_CN"></a>4.<a href="https://learngitbranching.js.org/?locale=zh_CN">https://learngitbranching.js.org/?locale=zh_CN</a></h2>]]></content>
    
    
    <summary type="html">git学习</summary>
    
    
    
    <category term="git" scheme="https://13592491893.github.io/categories/git/"/>
    
    
    <category term="git" scheme="https://13592491893.github.io/tags/git/"/>
    
    <category term="命令" scheme="https://13592491893.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
    <category term="尚硅谷" scheme="https://13592491893.github.io/tags/%E5%B0%9A%E7%A1%85%E8%B0%B7/"/>
    
  </entry>
  
  <entry>
    <title>Markdown快速入门小技巧(hexo博客文章--格式用法)</title>
    <link href="https://13592491893.github.io/posts/15546.html"/>
    <id>https://13592491893.github.io/posts/15546.html</id>
    <published>2021-11-22T16:00:00.000Z</published>
    <updated>2021-12-29T03:19:25.623Z</updated>
    
    <content type="html"><![CDATA[<p>相遇皆是缘分</p><h1 id="Markdown-的快速入门-后缀是-md"><a href="#Markdown-的快速入门-后缀是-md" class="headerlink" title="Markdown 的快速入门(后缀是  .md)"></a>Markdown 的快速入门(后缀是  .md)</h1><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html">ctrl+shift+1 大纲显示ctrl+/ 源代码显示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="代码块："><a href="#代码块：" class="headerlink" title="代码块："></a>代码块：</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">​```<span class="token function">java</span><span class="token punctuation">(</span>html等等<span class="token punctuation">)</span>   会自动提示<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html">#标题1 （大）##标题2###标题3####标题4 （小）以此类推 最高标题6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//加粗</span><span class="token operator">*</span><span class="token operator">*</span>加粗<span class="token operator">*</span><span class="token operator">*</span><span class="token comment">//代码高亮显示</span><span class="token operator">==</span>高亮<span class="token operator">==</span><span class="token comment">//删除线</span><span class="token operator">~</span><span class="token operator">~</span>删除线<span class="token operator">~</span><span class="token operator">~</span><span class="token comment">//斜体</span>  <span class="token operator">*</span>斜体内容<span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引用："><a href="#引用：" class="headerlink" title="引用："></a>引用：</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//引用语法</span><span class="token operator">&gt;</span>作者：泽<span class="token operator">&gt;&gt;</span>作者：泽<span class="token operator">&gt;&gt;&gt;</span>作者：泽<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>作者：泽</p><blockquote><p>作者：泽</p><blockquote><p>作者：泽</p></blockquote></blockquote></blockquote><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//分割线</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="图片插入"><a href="#图片插入" class="headerlink" title="图片插入"></a>图片插入</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//在线图片与本地图片</span><span class="token operator">!</span><span class="token punctuation">[</span>照片名子<span class="token punctuation">]</span>（<span class="token operator">/</span>image<span class="token operator">/</span>me<span class="token punctuation">.</span>png）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://dss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=3252521864,872614242&amp;fm=26&amp;gp=0.jpg" alt="img"></p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//超链接语法</span><span class="token punctuation">[</span>超链接名字<span class="token punctuation">]</span>（https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>gihub<span class="token punctuation">.</span>com<span class="token operator">/</span>yerenping）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="https://music.163.com/#/song?id=28892408&amp;market=baiduqk">我的天空</a></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//无需列表</span><span class="token operator">-</span> 目录<span class="token number">1</span>  <span class="token operator">-</span>后加空格<span class="token operator">-</span> 目录<span class="token number">2</span><span class="token operator">-</span> 目录<span class="token number">3</span><span class="token comment">//有序列表</span>  <span class="token number">1</span><span class="token operator">+</span><span class="token punctuation">.</span> <span class="token operator">+</span>名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">右键》插入》表格用代码过于复杂不推荐使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th align="center">姓名</th><th align="center">数字</th><th align="center">语文</th></tr></thead><tbody><tr><td align="center">小王</td><td align="center">85</td><td align="center">21</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">Markdown快速入门小技巧</summary>
    
    
    
    <category term="hexo博客" scheme="https://13592491893.github.io/categories/hexo%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="Markdown" scheme="https://13592491893.github.io/categories/hexo%E5%8D%9A%E5%AE%A2/Markdown/"/>
    
    
    <category term="hexo博客" scheme="https://13592491893.github.io/tags/hexo%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="Markdown" scheme="https://13592491893.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>session学习</title>
    <link href="https://13592491893.github.io/posts/39104.html"/>
    <id>https://13592491893.github.io/posts/39104.html</id>
    <published>2021-10-21T16:00:00.000Z</published>
    <updated>2021-12-29T03:19:25.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="session学习"><a href="#session学习" class="headerlink" title="session学习"></a>session学习</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>bjsxt<span class="token punctuation">.</span>servlet</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpSession</span><span class="token punctuation">;</span><span class="token comment">/** * session技术学习: * 问题： * 一个用户的不同请求处理的数据共享怎么办？ * 解决： * 使用session技术 * 原理： * 用户第一次访问服务器，服务器会创建一个session对象给此用户，并将 * 该session对象的JSESSIONID使用Cookie技术存储到浏览器中，保证 * 用户的其他请求能够获取到同一个session对象，也保证了不同请求能够获取到 * 共享的数据。 * 特点： * 存储在服务器端 * 服务器进行创建 * 依赖Cookie技术 * 一次会话 * 默认存储时间是30分钟 *作用： *解决了一个用户不同请求处理的数据共享问题 *使用： *创建session对象/获取session对象HttpSession hs=req.getSession();如果请求中拥有session的标识符也就是JSESSIONID，则返回其对应的session队形如果请求中没有session的标识符也就是JSESSIONID，则创建新的session对象，并将其JSESSIONID作为从cookie数据存储到浏览器内存中 * 如果session对象是失效了，也会重新创建一个session对象，并将其JSESSIONID存储在浏览器内存中。 * 设置session存储时间 * hs.setMaxInactiveInterval(int seconds); * 注意： * 在指定的时间内session对象没有被使用则销毁，如果使用了则重新计时。 * 设置session强制失效 * hs.invalidate(); * 存储和获取数据 * 存储：hs.setAttribute(String name,Object value); * 获取：hs.getAttribute(String name) 返回的数据类型为Object * 注意： * 存储的动作和取出的动作发生在不同的请求中，但是存储要先于取出执行。 * 使用时机: * 一般用户在登陆web项目时会将用户的个人信息存储到Sesion中，供该用户的其他请求使用。 * 总结： * session解决了一个用户的不同请求的数据共享问题，只要在JSESSIONID不失效和session对象不失效的情况下。 * 用户的任意请求在处理时都能获取到同一个session对象。 * 作用域： * 一次会话 * 在JSESSIONID和SESSION对象不失效的情况下为整个项目内。 * session失效处理： * 将用户请求中的JSESSIONID和后台获取到的SESSION对象的JSESSIONID进行比对，如果一致 * 则session没有失效，如果不一致则证明session失效了。重定向到登录页面，让用户重新登录。 * 注意： * JSESSIONID存储在了Cookie的临时存储空间中，浏览器关闭即失效。 *  * @author MyPC * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token comment">//设置请求编码格式</span>req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置响应编码格式</span>resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取请求信息</span><span class="token class-name">String</span> name<span class="token operator">=</span><span class="token string">"张三"</span><span class="token punctuation">;</span><span class="token comment">//处理请求信息</span><span class="token comment">//创建session对象</span><span class="token class-name">HttpSession</span> hs<span class="token operator">=</span>req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置session的存储时间</span><span class="token comment">//hs.setMaxInactiveInterval(5);</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hs<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置session强制失效</span><span class="token comment">//hs.invalidate();</span><span class="token comment">//存储数据</span>hs<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//响应处理结果</span><span class="token comment">//直接响应</span>resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"session学习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//请求转发</span><span class="token comment">//重定向</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">session学习</summary>
    
    
    
    <category term="java" scheme="https://13592491893.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://13592491893.github.io/tags/java/"/>
    
    <category term="session" scheme="https://13592491893.github.io/tags/session/"/>
    
    <category term="面试" scheme="https://13592491893.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>RPC与Http的区别</title>
    <link href="https://13592491893.github.io/posts/33119.html"/>
    <id>https://13592491893.github.io/posts/33119.html</id>
    <published>2021-09-21T16:00:00.000Z</published>
    <updated>2021-12-29T03:19:25.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RPC与Http的区别"><a href="#RPC与Http的区别" class="headerlink" title="RPC与Http的区别"></a>RPC与Http的区别</h1><h2 id="一-远程调用方式"><a href="#一-远程调用方式" class="headerlink" title="一.远程调用方式"></a>一.远程调用方式</h2><p>无论是微服务还是分布式服务（都是SOA，都是面向服务编程），都面临着服务间的远程调用。那么服务间的远程调用方式有哪些呢？</p><p>常见的远程调用方式有以下几种：</p><ul><li><p>RPC：Remote Produce Call远程过程调用，类似的还有RMI（Remote Methods Invoke 远程方法调用，是JAVA中的概念，是JAVA十三大技术之一）。自定义数据格式，基于原生TCP通信，速度快，效率高。早期的webservice，现在热门的dubbo，都是RPC的典型</p><ul><li>RPC的框架：webservie(cxf)、dubbo</li><li>RMI的框架：hessian</li></ul></li><li><p>Http：http其实是一种网络传输协议，基于TCP，规定了数据传输的格式。现在客户端浏览器与服务端通信基本都是采用Http协议。也可以用来进行远程服务调用。缺点是消息封装臃肿。</p><p>现在热门的Rest风格，就可以通过http协议来实现。</p><ul><li>http的实现技术：HttpClient</li></ul></li><li><p><strong>相同点</strong>：底层通讯都是基于socket，都可以实现远程调用，都可以实现服务调用服务</p></li><li><p><strong>不同点：</strong><br><strong>RPC</strong>：框架有：dubbo、cxf、（RMI远程方法调用）Hessian<br>当使用RPC框架实现服务间调用的时候，要求服务提供方和服务消费方 都必须使用统一的RPC框架，要么都dubbo，要么都cxf</p><p>跨操作系统在同一编程语言内使用<br>优势：调用快、处理快</p><p><strong>http</strong>：框架有：httpClient<br>当使用http进行服务间调用的时候，无需关注服务提供方使用的编程语言，也无需关注服务消费方使用的编程语言，服务提供方只需要提供restful风格的接口，服务消费方，按照restful的原则，请求服务，即可</p><p>跨系统跨编程语言的远程调用框架<br>优势：通用性强</p><p><strong>总结：对比RPC和http的区别</strong><br>1 RPC要求服务提供方和服务调用方都需要使用相同的技术，要么都hessian，要么都dubbo<br>而http无需关注语言的实现，只需要遵循rest规范<br>2 RPC的开发要求较多，像Hessian框架还需要服务器提供完整的接口代码(包名.类名.方法名必须完全一致)，否则客户端无法运行<br>3 Hessian只支持POST请求<br>4 Hessian只支持JAVA语言</p></li></ul><h3 id="1-1-认识RPC"><a href="#1-1-认识RPC" class="headerlink" title="1.1.认识RPC"></a>1.1.认识RPC</h3><p>  RPC，即 Remote Procedure Call（远程过程调用），是一个计算机通信协议。 该协议允许运行于一台计算机的程序调用另一台计算机的子程序，而程序员无需额外地为这个交互作用编程。说得通俗一点就是：A计算机提供一个服务，B计算机可以像调用本地服务那样调用A计算机的服务。</p><p>  通过上面的概念，我们可以知道，实现RPC主要是做到两点：</p><ul><li><p>实现远程调用其他计算机的服务</p><ul><li>要实现远程调用，肯定是通过网络传输数据。A程序提供服务，B程序通过网络将请求参数传递给A，A本地执行后得到结果，再将结果返回给B程序。这里需要关注的有两点：<ul><li>1）采用何种网络通讯协议？<ul><li>现在比较流行的RPC框架，都会采用TCP作为底层传输协议</li></ul></li><li>2）数据传输的格式怎样？<ul><li>两个程序进行通讯，必须约定好数据传输格式。就好比两个人聊天，要用同一种语言，否则无法沟通。所以，我们必须定义好请求和响应的格式。另外，数据在网路中传输需要进行序列化，所以还需要约定统一的序列化的方式。</li></ul></li></ul></li></ul></li><li><p>像调用本地服务一样调用远程服务</p><ul><li>如果仅仅是远程调用，还不算是RPC，因为RPC强调的是过程调用，调用的过程对用户而言是应该是透明的，用户不应该关心调用的细节，可以像调用本地服务一样调用远程服务。所以RPC一定要对调用的过程进行封装</li></ul><p>RPC调用流程图：</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/17ed3c177e02fb87dd2cada0bd165792.png" alt="在这里插入图片描述"></p></li></ul><h3 id="1-2-认识Http"><a href="#1-2-认识Http" class="headerlink" title="1.2.认识Http"></a>1.2.认识Http</h3><p>  Http协议：超文本传输协议，是一种应用层协议。规定了网络传输的请求格式、响应格式、资源定位和操作的方式等。但是底层采用什么网络传输协议，并没有规定，不过现在都是采用TCP协议作为底层传输协议。说到这里，大家可能觉得，Http与RPC的远程调用非常像，都是按照某种规定好的数据格式进行网络通信，有请求，有响应。没错，在这点来看，两者非常相似，但是还是有一些细微差别。</p><ul><li><p>RPC并没有规定数据传输格式，这个格式可以任意指定，不同的RPC协议，数据格式不一定相同。</p></li><li><p>Http中还定义了资源定位的路径，RPC中并不需要</p></li><li><p>最重要的一点：RPC需要满足像调用本地服务一样调用远程服务，也就是对调用过程在API层面进行封装。Http协议没有这样的要求，因此请求、响应等细节需要我们自己去实现。</p><ul><li>优点：RPC方式更加透明，对用户更方便。Http方式更灵活，没有规定API和语言，跨语言、跨平台</li><li>缺点：RPC方式需要在API层面进行封装，限制了开发的语言环境。</li></ul><p>例如我们通过浏览器访问网站，就是通过Http协议。只不过浏览器把请求封装，发起请求以及接收响应，解析响应的事情都帮我们做了。如果是不通过浏览器，那么这些事情都需要自己去完成。</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/a9c94647b4879d21a99870b5df110f03.png" alt="在这里插入图片描述"></p></li></ul><h3 id="1-3-如何选择？"><a href="#1-3-如何选择？" class="headerlink" title="1.3.如何选择？"></a>1.3.如何选择？</h3><p>  既然两种方式都可以实现远程调用，我们该如何选择呢？</p><ul><li><p>速度来看，RPC要比http更快，虽然底层都是TCP，但是http协议的信息往往比较臃肿</p></li><li><p>难度来看，RPC实现较为复杂，http相对比较简单</p></li><li><p>灵活性来看，http更胜一筹，因为它不关心实现细节，跨平台、跨语言。</p><p>因此，两者都有不同的使用场景：</p></li><li><p>如果对效率要求更高，并且开发过程使用统一的技术栈，那么用RPC还是不错的。</p></li><li><p>如果需要更加灵活，跨语言、跨平台，显然http更合适</p><p>那么我们该怎么选择呢？</p><p>微服务，更加强调的是独立、自治、灵活。而RPC方式的限制较多，因此微服务框架中，一般都会采用基于Http的Rest风格服务。    </p></li></ul><h3 id="1-4-Http客户端工具"><a href="#1-4-Http客户端工具" class="headerlink" title="1.4.Http客户端工具"></a>1.4.Http客户端工具</h3><p>  　　既然微服务选择了Http，那么我们就需要考虑自己来实现对请求和响应的处理。不过开源世界已经有很多的http客户端工具，能够帮助我们做这些事情，例如：</p><ul><li><p>HttpClient</p></li><li><p>OKHttp</p></li><li><p>URLConnection</p><p>　　接下来，我们就一起了解一款比较流行的客户端工具：HttpClient</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>       　　 <span class="token class-name">HttpGet</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpGet</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       　　 <span class="token class-name">String</span> response <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>httpClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BasicResponseHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      　　  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>   　 <span class="token punctuation">}</span>　　<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>   　　 <span class="token class-name">HttpPost</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpPost</span><span class="token punctuation">(</span><span class="token string">"http://www.oschina.net/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   　　 request<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span>                      <span class="token string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    　　<span class="token class-name">String</span> response <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>httpClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BasicResponseHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   　　 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>　　<span class="token punctuation">}</span>　　<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HttpClient请求数据后是json字符串，需要我们自己把Json字符串反序列化为对象，我们会使用JacksonJson工具来实现。</p><p><code>JacksonJson</code>是SpringMVC内置的json处理工具，其中有一个<code>ObjectMapper</code>类，可以方便的实现对json的处理：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">#### 对象转json<span class="token comment">// json处理工具</span>    <span class="token keyword">private</span> <span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">{</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">8L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"柳岩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"liuyan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 序列化</span>        <span class="token class-name">String</span> json <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"json = "</span> <span class="token operator">+</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>#### json转对象​```java<span class="token comment">// json处理工具</span><span class="token keyword">private</span> <span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">8L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"柳岩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"liuyan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 序列化</span>    <span class="token class-name">String</span> json <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 反序列化，接收两个参数：json数据，反序列化的目标类字节码</span>    <span class="token class-name">User</span> result <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result = "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>#### json转集合json转集合比较麻烦，因为你无法同时把集合的<span class="token keyword">class</span>和元素的<span class="token keyword">class</span>同时传递到一个参数。因此<span class="token class-name">Jackson</span>做了一个类型工厂，用来解决这个问题：​```java<span class="token comment">// json处理工具</span><span class="token keyword">private</span> <span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">8L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"柳岩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"liuyan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 序列化,得到对象集合的json字符串</span>    <span class="token class-name">String</span> json <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 反序列化，接收两个参数：json数据，反序列化的目标类字节码</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> mapper<span class="token punctuation">.</span><span class="token function">getTypeFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">constructCollectionType</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">User</span> u <span class="token operator">:</span> users<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"u = "</span> <span class="token operator">+</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>#### json转任意复杂类型当对象泛型关系复杂时，类型工厂也不好使了。这个时候<span class="token class-name">Jackson</span>提供了<span class="token class-name">TypeReference</span>来接收类型泛型，然后底层通过反射来获取泛型上的具体类型。实现数据转换。​```java<span class="token comment">// json处理工具</span><span class="token keyword">private</span> <span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">8L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"柳岩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"liuyan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 序列化,得到对象集合的json字符串</span>    <span class="token class-name">String</span> json <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 反序列化，接收两个参数：json数据，反序列化的目标类字节码</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">User</span> u <span class="token operator">:</span> users<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"u = "</span> <span class="token operator">+</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token class-name">Spring</span>提供了一个<span class="token class-name">RestTemplate</span>模板工具类，对基于<span class="token class-name">Http</span>的客户端进行了封装，并且实现了对象与json的序列化和反序列化，非常方便。<span class="token class-name">RestTemplate</span>并没有限定<span class="token class-name">Http</span>的客户端类型，而是进行了抽象，目前常用的<span class="token number">3</span>种都有支持：<span class="token operator">-</span> <span class="token class-name">HttpClient</span><span class="token operator">-</span> <span class="token class-name">OkHttp</span><span class="token operator">-</span> JDK原生的<span class="token class-name">URLConnection</span>（默认的）首先在项目中注册一个`<span class="token class-name">RestTemplate</span>`对象，可以在启动类位置注册：​```java<span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpDemoApplication</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">HttpDemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@Bean</span> <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 默认的RestTemplate，底层是走JDK的URLConnection方式。</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>​``` 在测试类中直接`<span class="token annotation punctuation">@Autowired</span>`注入：​```java<span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">HttpDemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpDemoApplicationTests</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Autowired</span> <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span> <span class="token annotation punctuation">@Test</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">httpGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://localhost/hello"</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>​```<span class="token operator">-</span> 通过<span class="token class-name">RestTemplate</span>的<span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法，传递url地址及实体类的字节码，<span class="token class-name">RestTemplate</span>会自动发起请求，接收响应，并且帮我们对响应结果进行反序列化。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">RPC与Http的区别</summary>
    
    
    
    <category term="java" scheme="https://13592491893.github.io/categories/java/"/>
    
    
    <category term="rpc" scheme="https://13592491893.github.io/tags/rpc/"/>
    
    <category term="http" scheme="https://13592491893.github.io/tags/http/"/>
    
    <category term="远程调用" scheme="https://13592491893.github.io/tags/%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>redis</title>
    <link href="https://13592491893.github.io/posts/64786.html"/>
    <id>https://13592491893.github.io/posts/64786.html</id>
    <published>2021-08-21T16:00:00.000Z</published>
    <updated>2021-12-29T03:19:25.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis主从复制原理总结"><a href="#Redis主从复制原理总结" class="headerlink" title="Redis主从复制原理总结"></a><a href="https://www.cnblogs.com/daofaziran/p/10978628.html">Redis主从复制原理总结</a></h1><p>和Mysql主从复制的原因一样，Redis虽然读取写入的速度都特别快，但是也会产生读压力特别大的情况。为了分担读压力，Redis支持主从复制，Redis的主从结构可以采用一主多从或者级联结构，Redis主从复制可以根据是否是全量分为<strong>全量同步</strong>和<strong>增量同步</strong>。下图为级联结构。 </p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/907596-20180710175627988-299575978.png" alt="img"></p><h2 id="1-全量同步"><a href="#1-全量同步" class="headerlink" title="1.全量同步"></a>1.全量同步</h2><p>Redis全量复制一般发生在Slave初始化阶段，这时Slave需要将Master上的所有数据都复制一份。具体步骤如下： </p><ul><li>从服务器连接主服务器，发送SYNC命令； </li><li>主服务器接收到SYNC命名后，开始执行BGSAVE命令生成RDB文件并使用缓冲区记录此后执行的所有写命令； </li><li> 主服务器BGSAVE执行完后，向所有从服务器发送快照文件，并在发送期间继续记录被执行的写命令； </li><li> 从服务器收到快照文件后丢弃所有旧数据，载入收到的快照； </li><li> 主服务器快照发送完毕后开始向从服务器发送缓冲区中的写命令； </li><li> 从服务器完成对快照的载入，开始接收命令请求，并执行来自主服务器缓冲区的写命令；</li></ul><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/907596-20180710175736785-1172070242.png" alt="img"></p><p>完成上面几个步骤后就完成了从服务器数据初始化的所有操作，从服务器此时可以接收来自用户的读请求。</p><h2 id="2-增量同步"><a href="#2-增量同步" class="headerlink" title="2.增量同步"></a>2.增量同步</h2><p>Redis增量复制是指Slave初始化后开始正常工作时主服务器发生的写操作同步到从服务器的过程。<br>增量复制的过程主要是主服务器每执行一个写命令就会向从服务器发送相同的写命令，从服务器接收并执行收到的写命令。</p><h2 id="3-Redis主从同步策略"><a href="#3-Redis主从同步策略" class="headerlink" title="3.Redis主从同步策略"></a>3.Redis主从同步策略</h2><p>主从刚刚连接的时候，进行全量同步；全同步结束后，进行增量同步。当然，如果有需要，slave 在任何时候都可以发起全量同步。redis 策略是，无论如何，首先会尝试进行增量同步，如不成功，要求从机进行全量同步。</p><h2 id="4-注意点"><a href="#4-注意点" class="headerlink" title="4.注意点"></a>4.注意点</h2><p>如果多个Slave断线了，需要重启的时候，因为只要Slave启动，就会发送sync请求和主机全量同步，当多个同时出现的时候，可能会导致Master IO剧增宕机。</p><ol><li>Redis主从复制的配置十分简单，它可以使从服务器是主服务器的完全拷贝。需要清除Redis主从复制的几点重要内容：<br>Redis使用异步复制。但从Redis 2.8开始，从服务器会周期性的应答从复制流中处理的数据量。</li><li>一个主服务器可以有多个从服务器。</li><li>从服务器也可以接受其他从服务器的连接。除了多个从服务器连接到一个主服务器之外，多个从服务器也可以连接到一个从服务器上，形成一个图状结构。</li><li>Redis主从复制不阻塞主服务器端。也就是说当若干个从服务器在进行初始同步时，主服务器仍然可以处理请求。</li><li>主从复制也不阻塞从服务器端。当从服务器进行初始同步时，它使用旧版本的数据来应对查询请求，假设你在redis.conf配置文件是这么配置的。否则的话，你可以配置当复制流关闭时让从服务器给客户端返回一个错误。但是，当初始同步完成后，需要删除旧的数据集和加载新的数据集，在这个短暂的时间内，从服务器会阻塞连接进来的请求。</li><li>主从复制可以用来增强扩展性，使用多个从服务器来处理只读的请求（比如，繁重的排序操作可以放到从服务器去做），也可以简单的用来做数据冗余。</li><li>使用主从复制可以为主服务器免除把数据写入磁盘的消耗：在主服务器的redis.conf文件中配置“避免保存”（注释掉所有“保存“命令），然后连接一个配置为“进行保存”的从服务器即可。但是这个配置要确保主服务器不会自动重启（要获得更多信息请阅读下一段）</li></ol><h2 id="5-主从复制的一些特点："><a href="#5-主从复制的一些特点：" class="headerlink" title="5.主从复制的一些特点："></a>5.主从复制的一些特点：</h2><ol><li>采用异步复制；</li><li>一个主redis可以含有多个从redis；</li><li>每个从redis可以接收来自其他从redis服务器的连接；</li><li>主从复制对于主redis服务器来说是非阻塞的，这意味着当从服务器在进行主从复制同步过程中，主redis仍然可以处理外界的访问请求；</li><li>主从复制对于从redis服务器来说也是非阻塞的，这意味着，即使从redis在进行主从复制过程中也可以接受外界的查询请求，只不过这时候从redis返回的是以前老的数据，如果你不想这样，那么在启动redis时，可以在配置文件中进行设置，那么从redis在复制同步过程中来自外界的查询请求都会返回错误给客户端；（虽然说主从复制过程中对于从redis是非阻塞的，但是当从redis从主redis同步过来最新的数据后还需要将新数据加载到内存中，在加载到内存的过程中是阻塞的，在这段时间内的请求将会被阻，但是即使对于大数据集，加载到内存的时间也是比较多的）；</li><li>主从复制提高了redis服务的扩展性，避免单个redis服务器的读写访问压力过大的问题，同时也可以给为数据备份及冗余提供一种解决方案；</li><li>为了编码主redis服务器写磁盘压力带来的开销，可以配置让主redis不再将数据持久化到磁盘，而是通过连接让一个配置的从redis服务器及时的将相关数据持久化到磁盘，不过这样会存在一个问题，就是主redis服务器一旦重启，因为主redis服务器数据为空，这时候通过主从同步可能导致从redis服务器上的数据也被清空；</li></ol><h2 id="6-Redis大概主从同步是怎么实现的？"><a href="#6-Redis大概主从同步是怎么实现的？" class="headerlink" title="6.Redis大概主从同步是怎么实现的？"></a>6.Redis大概主从同步是怎么实现的？</h2><h3 id="全量同步："><a href="#全量同步：" class="headerlink" title="全量同步："></a>全量同步：</h3><p>master服务器会开启一个后台进程用于将redis中的数据生成一个rdb文件，与此同时，服务器会缓存所有接收到的来自客户端的写命令（包含增、删、改），当后台保存进程处理完毕后，会将该rdb文件传递给slave服务器，而slave服务器会将rdb文件保存在磁盘并通过读取该文件将数据加载到内存，在此之后master服务器会将在此期间缓存的命令通过redis传输协议发送给slave服务器，然后slave服务器将这些命令依次作用于自己本地的数据集上最终达到数据的一致性。</p><h3 id="部分同步："><a href="#部分同步：" class="headerlink" title="部分同步："></a>部分同步：</h3><p>从redis 2.8版本以前，并不支持部分同步，当主从服务器之间的连接断掉之后，master服务器和slave服务器之间都是进行全量数据同步，但是从redis 2.8开始，即使主从连接中途断掉，也不需要进行全量同步，因为从这个版本开始融入了部分同步的概念。部分同步的实现依赖于在master服务器内存中给每个slave服务器维护了一份同步日志和同步标识，每个slave服务器在跟master服务器进行同步时都会携带自己的同步标识和上次同步的最后位置。当主从连接断掉之后，slave服务器隔断时间（默认1s）主动尝试和master服务器进行连接，如果从服务器携带的偏移量标识还在master服务器上的同步备份日志中，那么就从slave发送的偏移量开始继续上次的同步操作，如果slave发送的偏移量已经不再master的同步备份日志中（可能由于主从之间断掉的时间比较长或者在断掉的短暂时间内master服务器接收到大量的写操作），则必须进行一次全量更新。在部分同步过程中，master会将本地记录的同步备份日志中记录的指令依次发送给slave服务器从而达到数据一致。</p><h2 id="7-主从同步中需要注意几个问题"><a href="#7-主从同步中需要注意几个问题" class="headerlink" title="7.主从同步中需要注意几个问题"></a>7.主从同步中需要注意几个问题</h2><ol><li>在上面的全量同步过程中，master会将数据保存在rdb文件中然后发送给slave服务器，但是如果master上的磁盘空间有效怎么办呢？那么此时全部同步对于master来说将是一份十分有压力的操作了。此时可以通过无盘复制来达到目的，由master直接开启一个socket将rdb文件发送给slave服务器。（无盘复制一般应用在磁盘空间有限但是网络状态良好的情况下）</li><li>主从复制结构，一般slave服务器不能进行写操作，但是这不是死的，之所以这样是为了更容易的保证主和各个从之间数据的一致性，如果slave服务器上数据进行了修改，那么要保证所有主从服务器都能一致，可能在结构上和处理逻辑上更为复杂。不过你也可以通过配置文件让从服务器支持写操作。（不过所带来的影响还得自己承担哦。。。）</li><li>主从服务器之间会定期进行通话，但是如果master上设置了密码，那么如果不给slave设置密码就会导致slave不能跟master进行任何操作，所以如果你的master服务器上有密码，那么也给slave相应的设置一下密码吧（通过设置配置文件中的masterauth）</li><li>关于slave服务器上过期键的处理，由master服务器负责键的过期删除处理，然后将相关删除命令已数据同步的方式同步给slave服务器，slave服务器根据删除命令删除本地的key。</li></ol><h2 id="8-当主服务器不进行持久化时复制的安全性"><a href="#8-当主服务器不进行持久化时复制的安全性" class="headerlink" title="8.当主服务器不进行持久化时复制的安全性"></a>8.当主服务器不进行持久化时复制的安全性</h2><p>在进行主从复制设置时，强烈建议在主服务器上开启持久化，当不能这么做时，比如考虑到延迟的问题，应该将实例配置为避免自动重启。为什么不持久化的主服务器自动重启非常危险呢？为了更好的理解这个问题，看下面这个失败的例子，其中主服务器和从服务器中数据库都被删除了。设置节点A为主服务器，关闭持久化，节点B和C从节点A复制数据。这时出现了一个崩溃，但Redis具有自动重启系统，重启了进程，因为关闭了持久化，节点重启后只有一个空的数据集。节点B和C从节点A进行复制，现在节点A是空的，所以节点B和C上的复制数据也会被删除。当在高可用系统中使用Redis Sentinel，关闭了主服务器的持久化，并且允许自动重启，这种情况是很危险的。比如主服务器可能在很短的时间就完成了重启，以至于Sentinel都无法检测到这次失败，那么上面说的这种失败的情况就发生了。如果数据比较重要，并且在使用主从复制时关闭了主服务器持久化功能的场景中，都应该禁止实例自动重启。</p><h2 id="9-Redis主从复制是如何工作的"><a href="#9-Redis主从复制是如何工作的" class="headerlink" title="9.Redis主从复制是如何工作的"></a>9.Redis主从复制是如何工作的</h2><p>如果设置了一个从服务器，在连接时它发送了一个SYNC命令，不管它是第一次连接还是再次连接都没有关系。<code> </code>然后主服务器开始后台存储，并且开始缓存新连接进来的修改数据的命令。当后台存储完成后，主服务器把数据文件发送到从服务器，从服务器将其保存在磁盘上，然后加载到内存中。然后主服务器把刚才缓存的命令发送到从服务器。这是作为命令流来完成的，并且和Redis协议本身格式相同。你可以通过telnet自己尝试一下。在Redis服务器工作时连接到Redis端口，发送SYNC命令，会看到一个批量的传输，并且主服务器接收的每一个命令都会通过telnet会话重新发送一遍。当主从服务器之间的连接由于某些原因断开时，从服务器可以自动进行重连接。当有多个从服务器同时请求同步时，主服务器只进行一个后台存储。当连接断开又重新连上之后，一般都会进行一个完整的重新同步，但是从Redis2.8开始，只重新同步一部分也可以。</p><h2 id="10-部分重新同步"><a href="#10-部分重新同步" class="headerlink" title="10.部分重新同步"></a>10.部分重新同步</h2><p>从Redis 2.8开始，如果遭遇连接断开，重新连接之后可以从中断处继续进行复制，而不必重新同步。</p><p>它的工作原理是这样：主服务器端为复制流维护一个内存缓冲区（in-memory backlog）。主从服务器都维护一个复制偏移量（replication offset）和master runid，当连接断开时，从服务器会重新连接上主服务器，然后请求继续复制，假如主从服务器的两个master run id相同，并且指定的偏移量在内存缓冲区中还有效，复制就会从上次中断的点开始继续。如果其中一个条件不满足，就会进行完全重新同步（在2.8版本之前就是直接进行完全重新同步）。因为主运行id不保存在磁盘中，如果从服务器重启了的话就只能进行完全同步了。部分重新同步这个新特性内部使用PSYNC命令，旧的实现中使用SYNC命令。Redis2.8版本可以检测出它所连接的服务器是否支持PSYNC命令，不支持的话使用SYNC命令。</p><h2 id="11-无磁盘复制"><a href="#11-无磁盘复制" class="headerlink" title="11.无磁盘复制"></a>11.无磁盘复制</h2><p>通常来讲，一个完全重新同步需要在磁盘上创建一个RDB文件，然后加载这个文件以便为从服务器发送数据。如果使用比较低速的磁盘，这种操作会给主服务器带来较大的压力。Redis从2.8.18版本开始尝试支持无磁盘的复制。使用这种设置时，子进程直接将RDB通过网络发送给从服务器，不使用磁盘作为中间存储。</p><h2 id="12-配置"><a href="#12-配置" class="headerlink" title="12.配置"></a>12.配置</h2><p>主从复制的配置十分简单：把下面这行加入到从服务器的配置文件中即可。<code>slaveof 192.168.1.1 6379</code></p><p>当然你需要把其中的192.168.1.1 6379替换为你自己的主服务器IP（或者主机名hostname）和端口。另外你可以调用SLAVEOF命令，主服务器就会开始与从服务器同步。关于部分重新同步，还有一些针对复制内存缓冲区的优化参数。查看Redis介质中的Redis.conf示例获得更多信息。使用repl-diskless-sync配置参数来启动无磁盘复制。使用<code>repl-diskless-sync-delay</code> 参数来配置传输开始的延迟时间，以便等待``更多的从服务器连接上来。查看Redis介质中的Redis.conf示例获得更多信息。</p><h2 id="13-只读从服务器"><a href="#13-只读从服务器" class="headerlink" title="13.只读从服务器"></a>13.只读从服务器</h2><p>从Redis 2.6开始，从服务器支持只读模式，并且是默认模式。</p><p>这个行为是由Redis.conf文件中的<code>slave-read-only </code>参数控制的，可以在运行中通过CONFIG SET来启用或者禁用。只读的从服务器会拒绝所有写命令，所以对从服务器不会有误写操作。但这不表示可以把从服务器实例暴露在危险的网络环境下，因为像DEBUG或者CONFIG这样的管理命令还是可以运行的。不过你可以通过使用rename-command命令来为这些命令改名来增加安全性。你可能想知道为什么只读限制还可以被还原，使得从服务器还可以进行写操作。虽然当主从服务器进行重新同步或者从服务器重启后，这些写操作都会失效，还是有一些使用场景会想从服务器中写入临时数据的，但将来这个特性可能会被去掉。</p><h2 id="14-限制有N个以上从服务器才允许写入"><a href="#14-限制有N个以上从服务器才允许写入" class="headerlink" title="14.限制有N个以上从服务器才允许写入"></a>14.限制有N个以上从服务器才允许写入</h2><p>从Redis 2.8版本开始，可以配置主服务器连接N个以上从服务器才允许对主服务器进行写操作。但是，因为Redis使用的是异步主从复制，没办法确保从服务器确实收到了要写入的数据，所以还是有一定的数据丢失的可能性。这一特性的工作原理如下：</p><ol><li>从服务器每秒钟ping一次主服务器，确认处理的复制流数量。</li><li>主服务器记住每个从服务器最近一次ping的时间。</li><li>用户可以配置最少要有N个服务器有小于M秒的确认延迟。</li><li>如果有N个以上从服务器，并且确认延迟小于M秒，主服务器接受写操作。还可以把这看做是CAP原则（一致性，可用性，分区容错性）不严格的一致性实现，虽然不能百分百确保一致性，但至少保证了丢失的数据不会超过M秒内的数据量。如果条件不满足，主服务器会拒绝写操作并返回一个错误。<ul><li>min-slaves-to-write（最小从服务器数）</li><li>min-slaves-max-lag（从服务器最大确认延迟）</li></ul></li></ol><h2 id="15-通过redis实现服务器崩溃等数据恢复"><a href="#15-通过redis实现服务器崩溃等数据恢复" class="headerlink" title="15.通过redis实现服务器崩溃等数据恢复"></a>15.通过redis实现服务器崩溃等数据恢复</h2><p>由于redis存储在内存中且提供一般编程语言常用的数据结构存储类型，所以经常被用于做服务器崩溃宕机的数据恢复处理。服务器可以在某些指定过程中将需要保存的数据以json对象等方式存储到redis中，也就是我们常说的快照，当服务器运行时读取redis来判断是否有待需要恢复数据继续处理的业务。当一次业务处理结束后再删除redis的数据即可。<strong>redis提供两种将内存数据导出到硬盘实现数据备份的方法</strong>：</p><h3 id="RDB方式-默认"><a href="#RDB方式-默认" class="headerlink" title="RDB方式(默认)"></a>RDB方式(默认)</h3><p>RDB方式的持久化是通过快照（snapshotting）完成的，当符合一定条件时Redis会自动将内存中的所有数据进行快照并存储在硬盘上。进行快照的条件可以由用户在配置文件中自定义，由两个参数构成：时间和改动的键的个数。当在指定的时间内被更改的键的个数大于指定的数值时就会进行快照。RDB是redis默认采用的持久化方式，在配置文件中已经预置了3个条件：<br>save 900 1   #900秒内有至少1个键被更改则进行快照<br>save 300 10   #300秒内有至少10个键被更改则进行快照<br>save 60 10000  #60秒内有至少10000个键被更改则进行快照</p><p>可以存在多个条件，条件之间是”或”的关系，只要满足其中一个条件，就会进行快照。 如果想要禁用自动快照，只需要将所有的save参数删除即可。<br>Redis默认会将快照文件存储在当前目录(可CONFIG GET dir来查看)的dump.rdb文件中，可以通过配置dir和dbfilename两个参数分别指定快照文件的存储路径和文件名。</p><p><strong>Redis实现快照的过程</strong><br>- Redis使用fork函数复制一份当前进程（父进程）的副本（子进程）；<br>- 父进程继续接收并处理客户端发来的命令，而子进程开始将内存中的数据写入硬盘中的临时文件；<br>- 当子进程写入完所有数据后会用该临时文件替换旧的RDB文件，至此一次快照操作完成。<br>- 在执行fork的时候操作系统（类Unix操作系统）会使用写时复制（copy-on-write）策略，即fork函数发生的一刻父子进程共享同一内存数据，当父进程要更改其中某片数据时（如执行一个写命令 ），操作系统会将该片数据复制一份以保证子进程的数据不受影响，所以新的RDB文件存储的是执行fork一刻的内存数据。</p><p>Redis在进行快照的过程中不会修改RDB文件，只有快照结束后才会将旧的文件替换成新的，也就是说任何时候RDB文件都是完整的。这使得我们可以通过定时备份RDB文件来实 现Redis数据库备份。RDB文件是经过压缩（可以配置rdbcompression参数以禁用压缩节省CPU占用）的二进制格式，所以占用的空间会小于内存中的数据大小，更加利于传输。</p><p>除了自动快照，还可以手动发送SAVE或BGSAVE命令让Redis执行快照，两个命令的区别在于，前者是由主进程进行快照操作，会阻塞住其他请求，后者会通过fork子进程进行快照操作。 Redis启动后会读取RDB快照文件，将数据从硬盘载入到内存。根据数据量大小与结构和服务器性能不同，这个时间也不同。通常将一个记录一千万个字符串类型键、大小为1GB的快照文件载入到内 存中需要花费20～30秒钟。 通过RDB方式实现持久化，一旦Redis异常退出，就会丢失最后一次快照以后更改的所有数据。这就需要开发者根据具体的应用场合，通过组合设置自动快照条件的方式来将可能发生的数据损失控制在能够接受的范围。如果数据很重要以至于无法承受任何损失，则可以考虑使用AOF方式进行持久化。</p><h3 id="AOF方式"><a href="#AOF方式" class="headerlink" title="AOF方式"></a>AOF方式</h3><p>默认情况下Redis没有开启AOF(append only file)方式的持久化，可以在redis.conf中通过appendonly参数开启：</p><p>appendonly yes<br>在启动时Redis会逐个执行AOF文件中的命令来将硬盘中的数据载入到内存中，载入的速度相较RDB会慢一些</p><p>开启AOF持久化后每执行一条会更改Redis中的数据的命令，Redis就会将该命令写入硬盘中的AOF文件。AOF文件的保存位置和RDB文件的位置相同，都是通过dir参数设置的，默认的文件名是appendonly.aof，可以通过appendfilename参数修改：</p><p>appendfilename appendonly.aof<br>配置redis自动重写AOF文件的条件</p><p>auto-aof-rewrite-percentage 100 # 当目前的AOF文件大小超过上一次重写时的AOF文件大小的百分之多少时会再次进行重写，如果之前没有重写过，则以启动时的AOF文件大小为依据</p><p>auto-aof-rewrite-min-size 64mb  # 允许重写的最小AOF文件大小<br>配置写入AOF文件后，要求系统刷新硬盘缓存的机制</p><p># appendfsync always  # 每次执行写入都会执行同步，最安全也最慢<br>appendfsync everysec  # 每秒执行一次同步操作</p><p># appendfsync no    # 不主动进行同步操作，而是完全交由操作系统来做（即每30秒一次），最快也最不安全</p><p>Redis允许同时开启AOF和RDB，既保证了数据安全又使得进行备份等操作十分容易。此时重新启动Redis后Redis会使用AOF文件来恢复数据，因为AOF方式的持久化可能丢失的数据更少</p>]]></content>
    
    
    <summary type="html">redis主从复制</summary>
    
    
    
    <category term="sql" scheme="https://13592491893.github.io/categories/sql/"/>
    
    
    <category term="面试" scheme="https://13592491893.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="redis" scheme="https://13592491893.github.io/tags/redis/"/>
    
    <category term="nosql" scheme="https://13592491893.github.io/tags/nosql/"/>
    
  </entry>
  
  <entry>
    <title>Quartz</title>
    <link href="https://13592491893.github.io/posts/20121.html"/>
    <id>https://13592491893.github.io/posts/20121.html</id>
    <published>2021-07-21T16:00:00.000Z</published>
    <updated>2021-12-29T03:19:25.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Quartz"><a href="#Quartz" class="headerlink" title="Quartz"></a>Quartz</h1><p>搭配gulimall-shy项目中renren-fast模块理解</p><h2 id="一、精进-Quartz—Quartz大致介绍"><a href="#一、精进-Quartz—Quartz大致介绍" class="headerlink" title="一、精进 Quartz—Quartz大致介绍:"></a>一、精进 Quartz—Quartz大致介绍:</h2><p><a href="https://blog.csdn.net/u010648555/article/details/54863144">https://blog.csdn.net/u010648555/article/details/54863144</a></p><h2 id="二、精进Quartz—Quartz简单入门Demo"><a href="#二、精进Quartz—Quartz简单入门Demo" class="headerlink" title="二、精进Quartz—Quartz简单入门Demo"></a>二、精进Quartz—Quartz简单入门Demo</h2><p><a href="https://blog.csdn.net/u010648555/article/details/54863394">https://blog.csdn.net/u010648555/article/details/54863394</a></p><p>三…</p>]]></content>
    
    
    <summary type="html">Quartz</summary>
    
    
    
    <category term="java" scheme="https://13592491893.github.io/categories/java/"/>
    
    
    <category term="Quartz" scheme="https://13592491893.github.io/tags/Quartz/"/>
    
    <category term="定时任务" scheme="https://13592491893.github.io/tags/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
    <category term="job" scheme="https://13592491893.github.io/tags/job/"/>
    
  </entry>
  
  <entry>
    <title>注册中心zookeeper和eureka中的CP和AP</title>
    <link href="https://13592491893.github.io/posts/40450.html"/>
    <id>https://13592491893.github.io/posts/40450.html</id>
    <published>2021-07-12T16:00:00.000Z</published>
    <updated>2021-12-29T03:19:25.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注册中心zookeeper和eureka中的CP和AP"><a href="#注册中心zookeeper和eureka中的CP和AP" class="headerlink" title="注册中心zookeeper和eureka中的CP和AP"></a>注册中心zookeeper和eureka中的CP和AP</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在分布式架构中往往伴随CAP的理论。因为分布式的架构，不再使用传统的单机架构，多机为了提供可靠服务所以需要冗余数据因而会存在分区容忍性Ｐ。</p><p>冗余数据的同时会在复制数据的同时伴随着可用性A 和强一致性C的问题。是选择停止可用性达到强一致性还是保留可用性选择最终一致性。通常选择后者。</p><p>其中 zookeeper 和 eureka分别是注册中心CP AP 的两种的实践。他们都提供服务注册中心的功能。建议使用AP。不强求数据的强一致性，达成数据的最终一致性。</p><blockquote><p>服务注册中心的数据也就是返回的可用服务节点(ip+端口号) 服务A开了0-9十个服务节点，服务B需要调用服务A，两次查询返回0-8，1-9 不一致的数据。产生的影响就是0 和9 节点的负载不均衡</p></blockquote><blockquote><p>只要注册中心在 SLA 承诺的时间内（例如 1s 内）将数据收敛到一致状态（即满足最终一致），流量将很快趋于统计学意义上的一致，所以注册中心以最终一致的模型设计在生产实践中完全可以接受。</p></blockquote><h3 id="1-eureka-AP"><a href="#1-eureka-AP" class="headerlink" title="1 eureka AP"></a>1 eureka AP</h3><p>eureka 保证了可用性，实现最终一致性。</p><p>Eureka各个节点都是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。而Eureka的客户端在向某个Eureka注册或时如果发现连接失败，则会自动切换至其它节点，只要有一台Eureka还在，就能保证注册服务可用(保证可用性)，只不过查到的信息可能不是最新的(不保证强一致性)，其中说明了，eureka是不满足强一致性，但还是会保证最终一致性</p><h3 id="2-zookeeper-CP"><a href="#2-zookeeper-CP" class="headerlink" title="2 zookeeper CP"></a>2 zookeeper CP</h3><p>zookeeper在选举leader时，会停止服务，直到选举成功之后才会再次对外提供服务，这个时候就说明了服务不可用，但是在选举成功之后，因为一主多从的结构，zookeeper在这时还是一个高可用注册中心，只是在优先保证一致性的前提下，zookeeper才会顾及到可用性</p><h4 id="2-1-zookeeper-应用场景"><a href="#2-1-zookeeper-应用场景" class="headerlink" title="2.1 zookeeper 应用场景"></a>2.1 zookeeper 应用场景</h4><ul><li><p>感知消息队列异步操作后的结果</p></li><li><p>分布式锁</p></li><li><p>元数据 或者配置中心 如 dubbo 和Kafka 都需要zookeeper</p><ul><li><blockquote><p>dubbo 也可以不使用zookeeper 采用直连提供的方式，但限制了分布式的拓展性。</p></blockquote></li></ul></li><li><p>HA高可用</p><ul><li>主备切换 (两个服务分别为主备，备用平时不提供服务，当主的挂掉后，备用顶上作为新主。当原来的主恢复后作为新备)</li></ul></li></ul><p><strong>选型依据</strong>：</p><p>在粗粒度分布式锁，分布式选主，主备高可用切换等不需要高 TPS 支持的场景下有不可替代的作用，而这些需求往往多集中在大数据、离线任务等相关的业务领域，因为大数据领域，讲究分割数据集，并且大部分时间分任务多进程 / 线程并行处理这些数据集，但是总是有一些点上需要将这些任务和进程统一协调，这时候就是 ZooKeeper 发挥巨大作用的用武之地。</p><p>但是在交易场景交易链路上，在主业务数据存取，大规模服务发现、大规模健康监测等方面有天然的短板，应该竭力避免在这些场景下引入 ZooKeeper，在阿里巴巴的生产实践中，应用对 ZooKeeper 申请使用的时候要进行严格的场景、容量、SLA 需求的评估。</p><p>所以可以使用 ZooKeeper，但是大数据请向左，而交易则向右，分布式协调向左，服务发现向右。</p><h4 id="2-2-不建议使用zookeeper-的场景和原因"><a href="#2-2-不建议使用zookeeper-的场景和原因" class="headerlink" title="2.2 不建议使用zookeeper 的场景和原因"></a>2.2 不建议使用zookeeper 的场景和原因</h4><p>不建议使用zookeeper 的原因是当它没满足A带来的影响。<br><img src="https://gitee.com/gsshy/picgo/raw/master/img/1271798-20200204174327871-473885430.png" alt="img"></p><p>当机房 3 出现网络分区 (Network Partitioned) 的时候，即机房 3 在网络上成了孤岛，我们知道虽然整体 ZooKeeper 服务是可用的，但是节点 ZK5 是不可写的，因为联系不上 Leader。</p><p>也就是说，这时候机房 3 的应用服务 svcB 是不可以新部署，重新启动，扩容或者缩容的，但是站在网络和服务调用的角度看，机房 3 的 svcA 虽然无法调用机房 1 和机房 2 的 svcB, 但是与机房 3 的 svcB 之间的网络明明是 OK 的啊，为什么不让我调用本机房的服务？</p><p>现在因为注册中心自身为了保脑裂 (P) 下的数据一致性（C）而放弃了可用性，导致了同机房的服务之间出现了无法调用，这是绝对不允许的！可以说<strong>在实践中，注册中心不能因为自身的任何原因破坏服务之间本身的可连通性</strong>，这是注册中心设计应该遵循的铁律</p><h4 id="2-3-zookeeper-的拓展"><a href="#2-3-zookeeper-的拓展" class="headerlink" title="2.3 zookeeper 的拓展"></a>2.3 zookeeper 的拓展</h4><p>ZooKeeper 的写并不是可扩展的，不可以通过加节点解决水平扩展性问题。</p><p>要想在 ZooKeeper 基础上硬着头皮解决服务规模的增长问题，一个实践中可以考虑的方法是想办法梳理业务，垂直划分业务域，将其划分到多个 ZooKeeper 注册中心，但是作为提供通用服务的平台机构组，因自己提供的服务能力不足要业务按照技术的指挥棒配合划分治理业务，真的可行么？</p><p>而且这又违反了因为注册中心自身的原因（能力不足）破坏了服务的可连通性，举个简单的例子，1 个搜索业务，1 个地图业务，1 个大文娱业务，1 个游戏业务，他们之间的服务就应该老死不相往来么？也许今天是肯定的，那么明天呢，1 年后呢，10 年后呢？谁知道未来会要打通几个业务域去做什么奇葩的业务创新？注册中心作为基础服务，无法预料未来的时候当然不能妨碍业务服务对未来固有联通性的需求。</p><h4 id="2-4-zookeeper-的持久化存储"><a href="#2-4-zookeeper-的持久化存储" class="headerlink" title="2.4 zookeeper 的持久化存储"></a>2.4 zookeeper 的持久化存储</h4><p>ZooKeeper 的 ZAB 协议对每一个写请求，会在每个 ZooKeeper 节点上保持写一个事务日志，同时再加上定期的将内存数据镜像（Snapshot）到磁盘来保证数据的一致性和持久性，以及宕机之后的数据可恢复，这是非常好的特性，但是我们要问，在服务发现场景中，其最核心的数据 - 实时的健康的服务的地址列表是不需要数据持久化的</p><p>需要持久化存储的地方在于一个完整的生产可用的注册中心，除了服务的实时地址列表以及实时的健康状态之外，还会存储一些服务的元数据信息，例如服务的版本，分组，所在的数据中心，权重，鉴权策略信息，service label 等元信息，这些数据需要持久化存储，并且注册中心应该提供对这些元信息的检索的能力。</p><h4 id="2-5-容灾能力"><a href="#2-5-容灾能力" class="headerlink" title="2.5 容灾能力"></a>2.5 容灾能力</h4><p>如果注册中心（Registry）本身完全宕机了，服务A 调用 服务B 链路应该受到影响么？<br><img src="https://gitee.com/gsshy/picgo/raw/master/img/1271798-20200204174343965-1238148315.png" alt="img"></p><p>是的，不应该受到影响。</p><p>服务调用（请求响应流）链路应该是弱依赖注册中心，必须仅在服务发布，机器上下线，服务扩缩容等必要时才依赖注册中心。</p><p>这需要注册中心仔细的设计自己提供的客户端，客户端中应该有针对注册中心服务完全不可用时做容灾的手段，例如设计客户端缓存数据机制（我们称之为 client snapshot）就是行之有效的手段。另外，注册中心的 health check 机制也要仔细设计以便在这种情况不会出现诸如推空等情况的出现。</p><p>ZooKeeper 的原生客户端并没有这种能力，所以利用 ZooKeeper 实现注册中心的时候我们一定要问自己，如果把 ZooKeeper 所有节点全干掉，你生产上的所有服务调用链路能不受任何影响么？而且应该定期就这一点做故障演练。</p><h4 id="zookeeper-的健康检查"><a href="#zookeeper-的健康检查" class="headerlink" title="zookeeper 的健康检查"></a>zookeeper 的健康检查</h4><p>使用 ZooKeeper 作为服务注册中心时，服务的健康检测常利用 ZooKeeper 的 Session 活性 Track 机制 以及结合 Ephemeral ZNode 的机制，简单而言，就是将服务的健康监测绑定在了 ZooKeeper 对于 Session 的健康监测上，或者说绑定在 TCP 长链接活性探测上了。</p><p>这在很多时候也会造成致命的问题，ZK 与服务提供者机器之间的 TCP 长链接活性探测正常的时候，该服务就是健康的么？答案当然是否定的！注册中心应该提供更丰富的健康监测方案，服务的健康与否的逻辑应该开放给服务提供方自己定义，而不是一刀切搞成了 TCP 活性检测！</p><p>健康检测的一大基本设计原则就是尽可能真实的反馈服务本身的真实健康状态，否则一个不敢被服务调用者相信的健康状态判定结果还不如没有健康检测。</p>]]></content>
    
    
    <summary type="html">注册中心zookeeper和eureka中的CP和AP</summary>
    
    
    
    <category term="java" scheme="https://13592491893.github.io/categories/java/"/>
    
    
    <category term="zookeeper" scheme="https://13592491893.github.io/tags/zookeeper/"/>
    
    <category term="eureka" scheme="https://13592491893.github.io/tags/eureka/"/>
    
    <category term="cap" scheme="https://13592491893.github.io/tags/cap/"/>
    
  </entry>
  
  <entry>
    <title>nginx</title>
    <link href="https://13592491893.github.io/posts/58122.html"/>
    <id>https://13592491893.github.io/posts/58122.html</id>
    <published>2021-06-21T16:00:00.000Z</published>
    <updated>2021-12-29T03:19:25.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><h2 id="1-常用命令"><a href="#1-常用命令" class="headerlink" title="1.常用命令"></a>1.常用命令</h2><p>启动：start nginx</p><p>关闭：nginx -s stop</p><p>重启：nginx -s reload</p><p>关闭所有nginx进程： </p><ol><li><p>windows：taskkill /f /t /im nginx.exe</p></li><li><p>linux: killall -9 nginx  或者 ps -A|grep nginx<img src="https://gitee.com/gsshy/picgo/raw/master/img/image-20210910183138019.png" alt="image-20210910183138019"></p><p>​        </p></li></ol>]]></content>
    
    
    <summary type="html">nginx</summary>
    
    
    
    <category term="nginx" scheme="https://13592491893.github.io/categories/nginx/"/>
    
    
    <category term="nginx" scheme="https://13592491893.github.io/tags/nginx/"/>
    
    <category term="java" scheme="https://13592491893.github.io/tags/java/"/>
    
    <category term="指令" scheme="https://13592491893.github.io/tags/%E6%8C%87%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>mysql面试题</title>
    <link href="https://13592491893.github.io/posts/62688.html"/>
    <id>https://13592491893.github.io/posts/62688.html</id>
    <published>2021-06-21T16:00:00.000Z</published>
    <updated>2021-12-29T03:19:25.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql面试题"><a href="#mysql面试题" class="headerlink" title="mysql面试题"></a>mysql面试题</h1><p>作者：阿亮<br>链接：<a href="https://zhuanlan.zhihu.com/p/116866170">https://zhuanlan.zhihu.com/p/116866170</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><h2 id="一、数据库字段设计"><a href="#一、数据库字段设计" class="headerlink" title="一、数据库字段设计"></a>一、数据库字段设计</h2><h3 id="1、为什么要一定要设置主键"><a href="#1、为什么要一定要设置主键" class="headerlink" title="1、为什么要一定要设置主键?"></a>1、为什么要一定要设置主键?</h3><p>其实这个不是一定的，有些场景下，小系统或者没什么用的表，不设置主键也没关系，mysql最好是用自增主键，主要是以下两个原因：果定义了主键，那么InnoDB会选择主键作为聚集索引、如果没有显式定义主键，则innodb 会选择第一个不包含有NULL值的唯一索引作为主键索引、如果也没有这样的唯一索引，则innodb 会选择内置6字节长的ROWID作为隐含的聚集索引。所以，反正都要生成一个主键，那你还不如自己指定一个主键，提高查询效率！</p><h3 id="2、主键是用自增还是UUID"><a href="#2、主键是用自增还是UUID" class="headerlink" title="2、主键是用自增还是UUID?"></a>2、主键是用自增还是UUID?</h3><p>最好是用自增主键，主要是以下两个原因：</p><p>　　1. 如果表使用自增主键，那么每次插入新的记录，记录就会顺序添加到当前索引节点的后续位置，当一页写满，就会自动开辟一个新的页。<br>　　2. 如果使用非自增主键（如uuid），由于每次插入主键的值近似于随机，因此每次新纪录都要被插到索引页的随机某个位置，此时MySQL为了将新记录插到合适位置而移动数据，甚至目标页面可能已经被回写到磁盘上而从缓存中清掉，此时又要从磁盘上读回来，这增加了很多开销，同时频繁的移动、分页操作造成索引碎片，得到了不够紧凑的索引结构，后续不得不通过OPTIMIZE TABLE来重建表并优化填充页面。</p><p>不过，也不是所有的场景下都得使用自增主键，可能场景下，主键必须自己生成，不在乎那些性能的开销。那也没有问题。</p><h3 id="3、自增主机用完了怎么办"><a href="#3、自增主机用完了怎么办" class="headerlink" title="3、自增主机用完了怎么办?"></a>3、自增主机用完了怎么办?</h3><p>在mysql中，Int整型的范围（-2147483648~2147483648），约20亿！因此不用考虑自增ID达到最大值这个问题。而且数据达到千万级的时候就应该考虑分库分表了。</p><h3 id="4、主键为什么不推荐有业务含义"><a href="#4、主键为什么不推荐有业务含义" class="headerlink" title="4、主键为什么不推荐有业务含义?"></a>4、主键为什么不推荐有业务含义?</h3><p>最好是主键是无意义的自增ID，然后另外创建一个业务主键ID，</p><p>因为任何有业务含义的列都有改变的可能性,主键一旦带上了业务含义，那么主键就有可能发生变更。主键一旦发生变更，该数据在磁盘上的存储位置就会发生变更，有可能会引发页分裂，产生空间碎片。</p><p>还有就是，带有业务含义的主键，不一定是顺序自增的。那么就会导致数据的插入顺序，并不能保证后面插入数据的主键一定比前面的数据大。如果出现了，后面插入数据的主键比前面的小，就有可能引发页分裂，产生空间碎片。</p><h3 id="5、货币字段用什么类型"><a href="#5、货币字段用什么类型" class="headerlink" title="5、货币字段用什么类型?"></a>5、货币字段用什么类型?</h3><p>货币字段一般都用 Decimal类型，<br>float和double是以二进制存储的，数据大的时候，可能存在误差。</p><p>以下是FLOAT和DOUBLE的区别：</p><p>浮点数以8位精度存储在FLOAT中，并且有四个字节。</p><p>浮点数存储在DOUBLE中，精度为18位，有八个字节。</p><h3 id="6、时间字段用什么类型"><a href="#6、时间字段用什么类型" class="headerlink" title="6、时间字段用什么类型?"></a>6、时间字段用什么类型?</h3><p>这个看具体情况和实际场景，timestamp ，datatime ，bigint 都行！</p><p>timestamp，该类型是四个字节的整数，它能表示的时间范围为1970-01-01 08:00:01到2038-01-19 11:14:07。2038年以后的时间，是无法用timestamp类型存储的。<br>但是它有一个优势，timestamp类型是带有时区信息的。一旦你系统中的时区发生改变，例如你修改了时区，该字段的值会自动变更。这个特性用来做一些国际化大项目，跨时区的应用时，特别注意！</p><p>datetime，占用8个字节，它存储的时间范围为1000-01-01 00:00:00 ~ 9999-12-31 23:59:59。显然，存储时间范围更大。但是它坑的地方在于，它存储的是时间绝对值，不带有时区信息。如果你改变数据库的时区，该项的值不会自己发生变更！</p><p>bigint，也是8个字节，自己维护一个时间戳，查询效率高，不过数据写入，显示都需要做转换。这种存储方式的具有 Timestamp 类型的所具有一些优点，并且使用它的进行日期排序以及对比等操作的效率会更高，跨系统也很方便，毕竟只是存放的数值。缺点也很明显，就是数据的可读性太差了，你无法直观的看到具体时间。</p><h3 id="7、为什么不直接存储图片、音频、视频等大容量内容"><a href="#7、为什么不直接存储图片、音频、视频等大容量内容" class="headerlink" title="7、为什么不直接存储图片、音频、视频等大容量内容?"></a>7、为什么不直接存储图片、音频、视频等大容量内容?</h3><p>我们在实际应用中，都是文件形式存储的。mysql中，只存文件的存放路径。虽然mysql中blob类型可以用来存放大容量文件，但是，我们在生产中，基本不用！ 主要有如下几个原因：</p><p>　　1. Mysql内存临时表不支持TEXT、BLOB这样的大数据类型，如果查询中包含这样的数据，查询效率会非常慢。</p><p>　　2. 数据库特别大，内存占用高，维护也比较麻烦。</p><p>　　3. binlog太大，如果是主从同步的架构，会导致主从同步效率问题！</p><p>因此，不推荐使用blob等类型！</p><h3 id="8、表中有大字段X-例如：text类型-，且字段X不会经常更新，以读为主，那么是拆成子表好？还是放一起好？"><a href="#8、表中有大字段X-例如：text类型-，且字段X不会经常更新，以读为主，那么是拆成子表好？还是放一起好？" class="headerlink" title="8、表中有大字段X(例如：text类型)，且字段X不会经常更新，以读为主，那么是拆成子表好？还是放一起好？"></a>8、表中有大字段X(例如：text类型)，且字段X不会经常更新，以读为主，那么是拆成子表好？还是放一起好？</h3><p>其实各有利弊，拆开带来的问题：连接消耗；不拆可能带来的问题：查询性能，所以要看你的实际情况，如果表数据量比较大，最好还是拆开为好。这样查询速度更快。</p><h3 id="9、字段为什么要定义为NOT-NULL"><a href="#9、字段为什么要定义为NOT-NULL" class="headerlink" title="9、字段为什么要定义为NOT NULL?"></a>9、字段为什么要定义为NOT NULL?</h3><p>一般情况，都会设置一个默认值，不会出现字段里面有null，又有空的情况。主要有以下几个原因：</p><p>\1. 索引性能不好，Mysql难以优化引用可空列查询，它会使索引、索引统计和值更加复杂。可空列需要更多的存储空间，还需要mysql内部进行特殊处理。可空列被索引后，每条记录都需要一个额外的字节，还能导致MYisam 中固定大小的索引变成可变大小的索引。</p><p>\2. 如果某列存在null的情况，可能导致count() 等函数执行不对的情况。</p><p>\3. sql 语句写着也麻烦，既要判断是否为空，又要判断是否为null等。</p><h2 id="二、数据库查询优化"><a href="#二、数据库查询优化" class="headerlink" title="二、数据库查询优化"></a>二、数据库查询优化</h2><h3 id="10、where执行顺序是怎样的？"><a href="#10、where执行顺序是怎样的？" class="headerlink" title="10、where执行顺序是怎样的？"></a>10、where执行顺序是怎样的？</h3><p>where 条件从左往右执行的，在数据量小的时候不用考虑，但数据量多的时候要考虑条件的先后顺序，此时应遵守一个原则：排除越多的条件放在第一个。</p><h3 id="11、应该在这些列上创建索引："><a href="#11、应该在这些列上创建索引：" class="headerlink" title="11、应该在这些列上创建索引："></a>11、应该在这些列上创建索引：</h3><p>在经常需要搜索的列上，可以加快搜索的速度；在作为主键的列上，强制该列的唯一性和组织表中数据的排列结构；在经常用在连接的列上，这些列主要是一些外键，可以加快连接的速度；在经常需要根据范围进行搜索的列上创建索引，因为索引已经排序，其指定的范围是连续的；在经常需要排序的列上创建索引，因为索引已经排序，这样查询可以利用索引的排序，加快排序查询时间；在经常使用在WHERE子句中的列上面创建索引，加快条件的判断速度。</p><h3 id="12、mysql联合索引"><a href="#12、mysql联合索引" class="headerlink" title="12、mysql联合索引"></a>12、mysql联合索引</h3><p>联合索引是两个或更多个列上的索引。对于联合索引:Mysql从左到右的使用索引中的字段，一个查询可以只使用索引中的一部分，但只能是最左侧部分。例如索引是key index (a,b,c). 可以支持a 、 a,b 、 a,b,c 3种组合进行查找，但不支持 b,c进行查找 .当最左侧字段是常量引用时，索引就十分有效。<br>利用索引中的附加列，您可以缩小搜索的范围，但使用一个具有两列的索引 不同于使用两个单独的索引。复合索引的结构与电话簿类似，人名由姓和名构成，电话簿首先按姓氏对进行排序，然后按名字对有相同姓氏的人进行排序。如果您知 道姓，电话簿将非常有用；如果您知道姓和名，电话簿则更为有用，但如果您只知道名不姓，电话簿将没有用处。</p><h3 id="13、什么是最左前缀原则？"><a href="#13、什么是最左前缀原则？" class="headerlink" title="13、什么是最左前缀原则？"></a>13、什么是最左前缀原则？</h3><p>最左前缀原则指的是，如果查询的时候查询条件精确匹配索引的左边连续一列或几列，则此列就可以被用到。如下：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">select * from user where name=xx and city=xx ; ／／可以命中索引select * from user where name=xx ; // 可以命中索引select * from user where city=xx ; // 无法命中索引<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里需要注意的是，查询的时候如果两个条件都用上了，但是顺序不同，如 city= xx and name ＝xx，那么现在的查询引擎会自动优化为匹配联合索引的顺序，这样是能够命中索引的。</p><p>由于最左前缀原则，在创建联合索引时，索引字段的顺序需要考虑字段值去重之后的个数，较多的放前面。ORDER BY子句也遵循此规则。</p><h3 id="14、怎么验证-MySQL-的索引是否满足需求？"><a href="#14、怎么验证-MySQL-的索引是否满足需求？" class="headerlink" title="14、怎么验证 MySQL 的索引是否满足需求？"></a>14、怎么验证 MySQL 的索引是否满足需求？</h3><p>使用 explain 查看 SQL 是如何执行查询语句的，从而分析你的索引是否满足需求。</p><p>explain 语法：explain select * from table where type=1。</p><p>具体来说 MySQL 中的索引，不同的数据引擎实现有所不同，但目前主流的数据库引擎的索引都是 B+ 树实现的，B+ 树的搜索效率，可以到达二分法的性能，找到数据区域之后就找到了完整的数据结构了，所有索引的性能也是更好的。</p><h3 id="15、问了下MySQL数据库cpu飙升到100-的话他怎么处理？"><a href="#15、问了下MySQL数据库cpu飙升到100-的话他怎么处理？" class="headerlink" title="15、问了下MySQL数据库cpu飙升到100%的话他怎么处理？"></a>15、问了下MySQL数据库cpu飙升到100%的话他怎么处理？</h3><p>\1. 列出所有进程 show processlist 观察所有进程 多秒没有状态变化的(干掉)</p><p>\2. 查看慢查询，找出执行时间长的sql；explain分析sql是否走索引，sql优化；</p><p>\3. 检查其他子系统是否正常，是否缓存失效引起，需要查看buffer命中率；</p><p>4.开启慢查询日志，查看慢查询的 SQL。</p><h3 id="16、mysql中表锁和行锁的区别"><a href="#16、mysql中表锁和行锁的区别" class="headerlink" title="16、mysql中表锁和行锁的区别"></a>16、mysql中表锁和行锁的区别</h3><p>在开发的时候，应该很少会注意到这些锁的问题，也很少会给程序加锁(除了库存这些对数量准确性要求极高的情况下)，即使我们不会这些锁知识，我们的程序在一般情况下还是可以跑得好好的。因为这些锁数据库隐式帮我们加了，只会在某些特定的场景下才需要手动加锁。</p><p><img src="https://pic1.zhimg.com/v2-6273e736ab50b5df0260f998b69fcf54_b.jpg" alt="img"></p><p>对于<strong>UPDATE、DELETE、INSERT</strong>语句，InnoDB会自动给涉及数据集加排他锁（X) MyISAM在执行查询语句SELECT前，会自动给涉及的所有表加读锁，在执行<strong>增、删、改</strong>操作前，会自动给涉及的表加写锁，这个过程并不需要用户干预</p><p>Mysql有很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁；这些锁统称为悲观锁(Pessimistic Lock)</p><p><strong>行锁</strong></p><p>特点：锁的粒度小，发生锁冲突的概率低、处理并发的能力强；开销大、加锁慢、会出现死锁不同的存储引擎支持的锁粒度是不一样的==：InnoDB行锁和表锁都支持、MyISAM只支持表锁！InnoDB只有通过索引条件检索数据才使用行级锁==，否则，InnoDB使用表锁也就是说，InnoDB的行锁是基于索引的！</p><p>InnoDB和MyISAM有两个本质的区别：<strong>InnoDB支持行锁、InnoDB支持事务</strong></p><ul><li>共享锁（S锁、读锁）：允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁。即多个客户可以同时读取同一个资源，但不允许其他客户修改。</li><li>排他锁（X锁、写锁)：允许获得排他锁的事务更新数据，阻止其他事务取得相同数据集的读锁和写锁。写锁是排他的，写锁会阻塞其他的写锁和读锁。</li></ul><p>另外，为了允许行锁和表锁共存，实现多粒度锁机制，InnoDB还有两种内部使用的意向锁（Intention Locks），这两种意向锁都是表锁：  </p><ul><li>意向共享锁（IS）：事务打算给数据行加行共享锁，事务在给一个数据行加共享锁前必须先取得该表的IS锁。</li><li>意向排他锁（IX）：事务打算给数据行加行排他锁，事务在给一个数据行加排他锁前必须先取得该表的IX锁。</li><li>意向锁也是数据库隐式帮我们做了，不需要程序员关心！</li></ul><p>加锁的方式：自动加锁。对于UPDATE、DELETE和INSERT语句，InnoDB会自动给涉及数据集加排他锁；对于普通SELECT语句，InnoDB不会加任何锁。</p><p><strong>表锁</strong></p><p>特点：开销小、加锁快、无死锁；锁粒度大，发生锁冲突的概率高，高并发下性能低</p><p>加锁的方式：自动加锁。查询操作（SELECT），会自动给涉及的所有表加读锁，更新操作（UPDATE、DELETE、INSERT），会自动给涉及的表加写锁。</p><ul><li>如果某个进程想要获取读锁，同时另外一个进程想要获取写锁。在mysql中，写锁是优先于读锁的！</li><li>写锁和读锁优先级的问题是可以通过参数调节的：max_write_lock_count和low-priority-updates</li></ul><p><img src="https://pic1.zhimg.com/v2-334c965a8a5e5e100c5a6e5f63aa5c28_b.png" alt="img"></p><p><strong>表锁下又分为两种模式：</strong> 表读锁（Table Read Lock）&amp;&amp; 表写锁（Table Write Lock） 从下图可以清晰看到，在表读锁和表写锁的环境下：读读不阻塞，读写阻塞，写写阻塞！ 读读不阻塞：当前用户在读数据，其他的用户也在读数据，不会加锁 读写阻塞：当前用户在读数据，其他的用户不能修改当前用户读的数据，会加锁！ 写写阻塞：当前用户在修改数据，其他的用户不能修改当前用户正在修改的数据，会加锁！</p><p><img src="https://pic1.zhimg.com/v2-4db3d35dad829a35b9d4f94e4c21e860_b.jpg" alt="img"></p><p>从上面已经看到了：读锁和写锁是互斥的，读写操作是串行。</p><p>MVCC MVCC(Multi-Version ConcurrencyControl)多版本并发控制，可以简单地认为：MVCC就是行级锁的一个变种(升级版)。在表锁中我们读写是阻塞的，基于提升并发性能的考虑，MVCC一般读写是不阻塞的(很多情况下避免了加锁的操作)。 可以简单的理解为：对数据库的任何修改的提交都不会直接覆盖之前的数据，而是产生一个新的版本与老版本共存，使得读取时可以完全不加锁。 事务的隔离级别 事务的隔离级别就是通过锁的机制来实现，<strong>锁的应用最终导致不同事务的隔离级别</strong>，只不过隐藏了加锁细节，事务的隔离级别有4种：  </p><ul><li>Read uncommitted：会出现脏读，不可重复读，幻读</li><li>Read committed：会出现不可重复读，幻读</li><li>Repeatable read：会出现幻读(Mysql默认的隔离级别，但是Repeatable read配合gap锁不会出现幻读！)</li><li>Serializable：串行，避免以上的情况</li></ul><p><img src="https://pic4.zhimg.com/v2-d7f7407e3e63862327f928245c1b68cb_b.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/v2-060e82508a8cff82562db7553fd25505_b.jpg" alt="img"></p><p><strong>悲观锁</strong> 我们使用悲观锁的话其实很简单(手动加行锁就行了)：select * from xxxx for update，在select 语句后边加了for update相当于加了排它锁(写锁)，加了写锁以后，其他事务就不能对它修改了！需要等待当前事务修改完之后才可以修改.</p><p><strong>乐观锁</strong> 乐观锁不是数据库层面上的锁，需要用户手动去加的锁。一般我们在数据库表中添加一个版本字段version来实现，在更新User表的时，执行语句如下： update A set Name=lisi,version=version+1 where ID=#{id} and version=#{version}，  此时即可避免更新丢失。</p><p>举例：下单操作包括3步骤：</p><p>1.查询出商品信息</p><p>select (status,status,version) from t_goods where id=#{id}</p><p>2.根据商品信息生成订单</p><p>3.修改商品status为2</p><p>update t_goods</p><p>set status=2,version=version+1</p><p>where id=#{id} and version=#{version};</p><p>除了自己手动实现乐观锁之外，现在网上许多框架已经封装好了乐观锁的实现，如hibernate，需要时，可能自行搜索”hiberate 乐观锁”试试看。</p><p>间隙锁GAP 当我们用范围条件检索数据而不是相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合范围条件的已有数据记录的索引项加锁；对于键值在条件范围内但并不存在 的记录，叫做“间隙（GAP)”。InnoDB也会对这个“间隙”加锁，这种锁机制就是所谓的间隙锁。例子：假如emp表中只有101条记录，其empid的值分别是1,2,…,100,101 Select * from emp where empid &gt; 100 for update;  上面是一个范围查询，InnoDB不仅会对符合条件的empid值为101的记录加锁，也会对empid大于101（这些记录并不存在）的“间隙”加锁</p><p><strong>InnoDB使用间隙锁的目的有2个：</strong> </p><ul><li>为了防止幻读(上面也说了，Repeatable read隔离级别下再通过GAP锁即可避免了幻读)</li><li>满足恢复和复制的需要：MySQL的恢复机制要求在一个事务未提交前，其他并发事务不能插入满足其锁定条件的任何记录，也就是不允许出现幻读</li></ul><p>死锁 并发的问题就少不了死锁，在MySQL中同样会存在死锁的问题 锁总结 表锁其实我们程序员是很少关心它的：  </p><ul><li>在MyISAM存储引擎中，当执行SQL语句的时候是自动加的。</li><li>在InnoDB存储引擎中，如果没有使用索引，表锁也是自动加的。</li></ul><p>现在我们大多数使用MySQL都是使用InnoDB，InnoDB支持行锁：  </p><ul><li>共享锁–读锁–S锁</li><li>排它锁–写锁–X锁</li></ul><p>在默认的情况下，select是不加任何行锁的~事务可以通过以下语句显示给记录集加共享锁或排他锁。  </p><ul><li>共享锁（S）：SELECT * FROM table_name WHERE … LOCK IN SHARE MODE</li><li>排他锁（X)：SELECT * FROM table_name WHERE … FOR UPDATE</li><li>InnoDB基于行锁还实现了MVCC多版本并发控制，MVCC在隔离级别下的Read committed和Repeatable read下工作。MVCC实现了读写不阻塞</li></ul><p>事务是数据库中的一个核心概念，<strong>指的是对数据库的一组操作作为一个整体，要么都执行要么都不执行</strong>。<br>事务有四大特性：<br>\1. <strong>原子性</strong>：每个事务都是一个整体，不可再拆分，事务中的sql语句要么都执行成功，要么都执行失败。<br>\2. <strong>一致性</strong>：事务执行前后数据库的状态保持一致。比如不管如何转账，转账前后的总钱数是不变的。<br>\3. <strong>隔离性</strong>：事务和事务之间不应该相互影响,保持隔离。<br>\4. <strong>持久性</strong>：事务一旦提交对数据库的修改就是永久的，即使电脑发生故障也不会影响该修改，因为他的结果是记录在存储设备上的。<br>事务中有一个重要的特性“事务的隔离性”指的是事务和事务之间不应该相互影响,保持隔离，然而在现实中多个事务可能会操作同一个数据，造成并发问题：</p><p>\1. <strong>脏读</strong>：一个事务读取到了另一个事务尚未提交的数据。<br>\2. <strong>不可重复读</strong>：事务一读取到了age的值20，事务二将该值修改成了28，事务一再次读取age的值28，事务一两次读取的age值不一致。<br>\3. <strong>幻读</strong>：事务一读取到A表中有一条记录，事务二往A表中插入一条记录，事务一再次读取的时候记录变成了两条，就像发生幻觉一样。<br>不可重复读和幻读很相似，可以从两个角度理解两者的差别：<br>\1. 不可重复读是另一个事务修改了数据，导致该事务多次读取出来的值不一样，而幻读是另一个事务插入或删除了记录，导致该事务多次读取出来的记录数不一样<br>\2. 不可重复读的解决只需要锁住会发生修改的记录就可以，幻读需要锁住更大的范围。<br>正是因为有这些问题存在，数据库设置了隔离级别来处理：<br>\1. <strong>读未提交</strong>（read uncommitted）: 事务中的修改，即使没有提交，其他事务也可以看得到<br>在这种隔离级别下有可能发生脏读，不可重复读和幻读。<br>一家酒店对外预定房间，现在还剩四间房，一个顾客到小王这里来预定四间房，小王查询系统发现还剩四间就将这四间房预定出去，该事务还没提交的时候另一个顾客到小李这里来预定房间，小李查询系统发现没房了，就拒绝了这个订单，此时小王的电脑发生故障，事务回滚，订单失效，这就是脏读造成的影响。<br>\2. <strong>读已提交</strong>（read committed）: 事务中的修改只有提交以后才能被其它事务看到。在这种隔离级别下有可能发生不可重复读和幻读。<br>还是定房间的例子，一个顾客到小王这里来预定四间房，小王将这四间房预定了出去，该事务还没提交的时候另一个顾客到小李这里来预定房间，小李查询系统发现还有四间房，刚想预定的时候小王的事务提交了，小李的系统立马呈现0间房。这就是不可重复读造成的影响。<br>\3. <strong>可重复读</strong> （repeatable read）：该级别保证了在事务中看到的每行的记录的结果是一致的，但是这种级别下有可能发生幻读。默认是可重复读<br>公司规定如果销售额达不到就要扣工资，经理查询小王的销售业绩，发现还差几间房，经理喜上眉梢，把结果打印出来，结果打印出来的结果业绩正好合格，原来小王在这当口又卖了几张票正好填上了这个空缺。这就是幻读造成的影响。<br><strong>串行化</strong>（serializable）：该级别下所有的事务都是串行执行的，一个事务执行完了才能执行其它的事务，可以解决所有的并发问题，它是靠大量加锁实现的，所以效率很低下。只有在需要绝对保证数据一致性，并且并发量不大的情况下，可以考虑。</p><h3 id="17、mysql主键索引和普通索引之间的区别是什么"><a href="#17、mysql主键索引和普通索引之间的区别是什么" class="headerlink" title="17、mysql主键索引和普通索引之间的区别是什么"></a>17、mysql主键索引和普通索引之间的区别是什么</h3><p>1）普通索引（INDEX）； 2）唯一索引（UNIQUE INDEX）； 3）全文索引（FULLTEXT）（全文索引是MyISAM的一个特殊索引类型，主要用于全文检索）； 4）主键索引； 5）组合索引（最左前缀）。</p><p><strong>普通索引</strong></p><p>普通索引是最基本的索引类型，而且它没有唯一性之类的限制。普通索引可以通过以下几种方式创建：</p><p>创建索引，例如</p><p><strong>CREATEINDEX</strong>&lt;索引的名字&gt;<strong>ON</strong>tablename (列的列表);</p><p>修改表，例如</p><p><strong>ALTERTABLE</strong>tablename<strong>ADDINDEX</strong>[索引的名字] (列的列表);</p><p>创建表的时候指定索引，例如</p><p><strong>CREATETABLE</strong>tablename ( […],<strong>INDEX</strong>[索引的名字] (列的列表) );</p><p><strong>主键索引</strong></p><p>主键是一种唯一性索引，但它必须指定为“PRIMARY KEY”。</p><p>主键一般在创建表的时候指定，例如</p><p><strong>CREATETABLE</strong>tablename ( […],<strong>PRIMARYKEY</strong>(列的列表) );</p><p>但是，我们也可以通过修改表的方式加入主键，例如“ALTER TABLE tablename ADD PRIMARY KEY (列的列表); ”。每个表只能有一个主键。</p><p><strong>区别</strong></p><p>普通索引是最基本的索引类型，没有任何限制，值可以为空，仅加速查询。普通索引是可以重复的，一个表中可以有多个普通索引。</p><p>主键索引是一种特殊的唯一索引，一个表只能有一个主键，不允许有空值；索引列的所有值都只能出现一次，即必须唯一。简单来说：主键索引是加速查询 + 列值唯一（不可以有null）+ 表中只有一个。<br>2.唯一索引和主键索引区别<br>答：1）主键为一种约束，唯一索引为一种索引，本质上就不同；<br>2）主键创建后一定包含唯一性索引，而唯一索引不一定就是主键；<br>3）主键不允许空值，唯一索引可以为空；<br>4）主键可以被其他表引用，而唯一索引不可以；<br>5）主键只允许一个，唯一索引允许多个；<br>6）主键和索引都是键，主键是逻辑键，索引为物理键，即主键不实际存在。</p><p>3.索引失效<br>答：1）最佳左前缀原则（组合索引，不按索引定义时制定的顺序，最左优先）；<br>2）like模糊查询时，以%开头，导致索引失效;<br>3）使用“!=”和“&lt;&gt;”都会使索引失效，如果是主键或者索引列是整数，索引不会失效；<br>4）遇到null值，索引失效；<br>5）索引列上的显式或者隐式运算，导致索引失效；<br>6）如果列类型是字符串，那一定要在条件中将数据使用引号引用起来,否则不使用索引（如select * from USER where name=123;<br>7）用or连接导致索引失效（or条件有未建立索引的列导致索引失效）。</p><p>4.索引的坏处<br>答：1）创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加；<br>2）索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间。如果要建立聚簇索引，那么需要的空间就会更大；<br>3）当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。<br>因此索引也会有它的缺点：虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。</p><p>5.索引的方法<br>答：主要有以下几种索引方法：B-Tree，Hash，R-Tree。<br>1）B-Tree：<br>B-Tree是最常见的索引类型，所有值（被索引的列）都是排过序的，每个叶节点到跟节点距离相等。所以B-Tree适合用来查找某一范围内的数据，而且可以直接支持数据排序（ORDER BY）B-Tree在MyISAM里的形式和Innodb稍有不同：<br>MyISAM表数据文件和索引文件是分离的，索引文件仅保存数据记录的磁盘地址，<br>InnoDB表数据文件本身就是主索引，叶节点data域保存了完整的数据记录。<br>2）Hash索引：<br>a.仅支持”=”,“IN”和”&lt;=&gt;”精确查询，不能使用范围查询：<br>由于Hash索引比较的是进行Hash运算之后的Hash值，所以它只能用于等值的过滤，不能用于基于范围的过滤，因为经过相应的Hash算法处理之后的Hash；<br>b.不支持排序：<br>由于Hash索引中存放的是经过Hash计算之后的Hash值，而且Hash值的大小关系并不一定和Hash运算前的键值完全一样，所以数据库无法利用索引的数据来避免任何排序运算；<br>c.在任何时候都不能避免表扫描：<br>由于Hash索引比较的是进行Hash运算之后的Hash值，所以即使取满足某个Hash键值的数据的记录条数，也无法从Hash索引中直接完成查询，还是要通过访问表中的实际数据进行相应的比较，并得到相应的结果；<br>d.检索效率高，索引的检索可以一次定位，不像B-Tree索引需要从根节点到枝节点，最后才能访问到页节点这样多次的IO访问，所以Hash索引的查询效率要远高于B-Tree索引；<br>e.只有Memory引擎支持显式的Hash索引，但是它的Hash是nonunique的，冲突太多时也会影响查找性能。Memory引擎默认的索引类型即是Hash索引，虽然它也支持B-Tree索引。<br>3）R-Tree索引：<br>R-Tree在MySQL很少使用，仅支持geometry数据类型，支持该类型的存储引擎只有MyISAM、BDb、InnoDb、NDb、Archive几种。</p><h3 id="18、SQL-JOIN-中-on-与-where-的区别"><a href="#18、SQL-JOIN-中-on-与-where-的区别" class="headerlink" title="18、SQL JOIN 中 on 与 where 的区别"></a>18、SQL JOIN 中 on 与 where 的区别</h3><ul><li><strong>left join</strong> : 左连接，返回左表中所有的记录以及右表中连接字段相等的记录。</li><li><strong>right join</strong> : 右连接，返回右表中所有的记录以及左表中连接字段相等的记录。</li><li><strong>inner join</strong> : 内连接，又叫等值连接，只返回两个表中连接字段相等的行。</li><li><strong>full join</strong> : 外连接，返回两个表中的行：left join + right join。</li><li><strong>cross join</strong> : 结果是笛卡尔积，就是第一个表的行数乘以第二个表的行数。</li></ul><p><strong>关键字 on</strong><br>数据库在通过连接两张或多张表来返回记录时，都会生成一张中间的临时表，然后再将这张临时表返回给用户。<br>在使用 <strong>left jion</strong> 时，<strong>on</strong> 和 <strong>where</strong> 条件的区别如下：</p><ul><li>1、 <strong>on</strong> 条件是在生成临时表时使用的条件，它不管 <strong>on</strong> 中的条件是否为真，都会返回左边表中的记录。</li><li>2、<strong>where</strong> 条件是在临时表生成好后，再对临时表进行过滤的条件。这时已经没有 <strong>left join</strong> 的含义（必须返回左边表的记录）了，条件不为真的就全部过滤掉。</li></ul><p>假设有两张表：<br><strong>表1：tab2</strong><br>idsize110220330<br><strong>表2：tab2</strong><br>sizename10AAA20BBB20CCC<br>两条 SQL:<br>select * form tab1 left join tab2 on (tab1.size = tab2.size) where tab2.name=’AAA’<br>select * form tab1 left join tab2 on (tab1.size = tab2.size and tab2.name=’AAA’)</p><p>第一条SQL的过程：<br>1、中间表<br>on条件:<br>tab1.size = tab2.sizetab1.idtab1.sizetab2.sizetab2.name11010AAA22020BBB22020CCC330(null)(null)<br>2、再对中间表过滤<br>where 条件：<br>tab2.name=’AAA’tab1.idtab1.sizetab2.sizetab2.name11010AAA<br>第二条SQL的过程：<br>1、中间表<br>on条件:<br>tab1.size = tab2.size and tab2.name=’AAA’<br>(条件不为真也会返回左表中的录)</p><p>tab1.idtab1.sizetab2.sizetab2.name11010AAA220(null)(null)330(null)(null)<br>其实以上结果的关键原因就是 <strong>left join、right join、full join</strong> 的特殊性，不管 <strong>on</strong> 上的条件是否为真都会返回 <strong>left</strong> 或 <strong>right</strong> 表中的记录，<strong>full</strong> 则具有 <strong>left</strong> 和 <strong>right</strong> 的特性的并集。 而 <strong>inner jion</strong>没这个特殊性，则条件放在 <strong>on</strong> 中和 <strong>where</strong> 中，返回的结果集是相同的。</p><p><strong>1、一张表，里面有ID自增主键，当insert了17条记录之后，删除了第15,16,17条记录，再把Mysql重启，再insert一条记录，这条记录的ID是18还是15 ？</strong></p><p>如果表的类型是myisam，那么是18。</p><p>因为myisam表会把自增主键的最大ID记录到数据文件里，重启mysql自增主键的最大ID也不会丢失。</p><p>如果表的类型是innoDB，那么是15.</p><p>innoDB表只是把自增主键的最大ID记录到内存中，所以重启数据库或者是对表进行OPTIMIZE操作，都会导致最大ID丢失</p><h3 id="19、优化-MYSQL-数据库的方法"><a href="#19、优化-MYSQL-数据库的方法" class="headerlink" title="19、优化 MYSQL 数据库的方法"></a>19、优化 MYSQL 数据库的方法</h3><p><strong>1、对查询进行优化,应尽可能避免全表扫描</strong></p><p><strong>1）减少where 字段值null判断</strong></p><p><strong>2）应尽量避免在 where 子句中使用!=或&lt;&gt;操作符</strong></p><p><strong>3）应尽量避免在 where 子句中使用 or 来连接条件</strong></p><p><strong>4）in 和 not in 也要慎用</strong></p><p><strong>5）少使用模糊匹配 like</strong></p><p><strong>6）应尽量避免在 where 子句中对字段进行表达式操作</strong></p><p><strong>7）任何地方都不要使用*通配符去查询所有</strong></p><p><strong>3、不要在条件判断时进行 算数运算</strong></p><p><strong>4、很多时候用 exists 代替 in 是一个好的选择</strong></p><p>(1) 选取最适用的字段属性，尽可能减少定义字段长度，尽量把字段设置 NOT NULL, 例如’省份，性别’, 最好设置为 ENUM</p><p>二、SQL语句中IN包含的值不应过多</p><p>三、SELECT语句务必指明字段名称</p><p>SELECT *增加很多不必要的消耗（cpu、io、内存、网络带宽）；增加了使用覆盖索引的可能性；当表结构发生改变时，前断也需要更新。所以要求直接在select后面接上字段名。</p><p>四、当只需要一条数据的时候，使用limit 1</p><p>这是为了使EXPLAIN中type列达到const类型</p><p>五、如果排序字段没有用到索引，就尽量少排序</p><p>六、如果限制条件中其他字段没有索引，尽量少用or</p><p>七、尽量用union all代替union</p><p>九、区分in和exists， not in和not exists</p><p>十、使用合理的分页方式以提高分页的效率</p><p>十一、分段查询</p><p>十二、避免在 where 子句中对字段进行 null 值判断</p><p>十三、不建议使用%前缀模糊查询</p><p>例如LIKE “%name”或者LIKE “%name%”，这种查询会导致索引失效而进行全表扫描。但是可以使用LIKE “name%”。</p><p>十四、避免在where子句中对字段进行表达式操作</p><p>十六、对于联合索引来说，要遵守最左前缀法则</p><p>十九、关于JOIN优化</p><h3 id="20、适用MySQL-5-0以上版本"><a href="#20、适用MySQL-5-0以上版本" class="headerlink" title="20、适用MySQL 5.0以上版本:"></a>20、适用MySQL 5.0以上版本:</h3><p>1.一个汉字占多少长度与编码有关: UTF-8:一个汉字=3个字节 GBK:一个汉字=2个字节</p><h3 id="21、什么时候适合创建索引"><a href="#21、什么时候适合创建索引" class="headerlink" title="21、什么时候适合创建索引"></a>21、什么时候适合创建索引</h3><p>1、适合创建索引条件</p><p>　　1.、主键自动建立唯一索引</p><p>　　2、频繁作为查询条件的字段应该建立索引</p><p>　　3、查询中与其他表关联的字段，外键关系建立索引</p><p>　　4、单键/组合索引的选择问题，组合索引性价比更高</p><p>　　5、查询中排序的字段，排序字段若通过索引去访问将大大提高排序效率</p><p>　　6、查询中统计或者分组字段</p><p>2、不适合创建索引条件</p><p>　　1、表记录少的</p><p>　　2、经常增删改的表或者字段</p><p>　　3、where条件里用不到的字段不创建索引</p><p>　　4、过滤性不好的不适合建索引</p><p>9、在Mysql中ENUM的用法是什么？</p><p>ENUM是一个字符串对象，用于指定一组预定义的值，并可在创建表时使用。</p><p>Create table size(name ENUM(‘Smail,’Medium’,’Large’);</p><h3 id="22、常见的sql语句"><a href="#22、常见的sql语句" class="headerlink" title="22、常见的sql语句"></a>22、常见的sql语句</h3><p>1、表名order中有 1 2 3 4 1 </p><p>去掉重复值 sql : select distinct from order</p><p>结果为company 1 2 3 4 </p><p>2、asc 是升序 是从小到大 desc 是大到小 group 是分组</p><p>3、IFNULL() 函数用于判断第一个表达式是否为 NULL，如果为 NULL 则返回第二个参数的值，如果不为 NULL 则返回第一个参数的值。</p><p>6、查找学生 查询姓“赵”的用户 select * from table where name like ‘赵%’</p><p>查询姓名中最后一个字段带赵字  select * from table where name like ‘%赵’</p><p>查询姓名中带有赵的字段  select * from table where name like ‘%赵%’</p><p>7、汇总分析  查询一个学生总分 select sum(*) from table where 课程号=’0002’ </p><p>查询选课程的学生人数  select count(distinct 学号) as 学生人数 from table</p><p>8、分组 查询各科成绩最高和最低的分 select 课程号 max（成绩）as 最高分，min（成绩）as 最低分 from table group by 课程号</p><p>查询每门课程被选修的学生数  select 课程号，count(学号) from score group by 课程号</p><p>查询男生 和女生人数 select 性别，count(*) from tabel group by 性别</p><p>9、分组结果的条件 查询平均成绩大于60分的学号和平均成绩 </p><p>先说下Having是一个过滤声明，是在查询返回结果集以后对查询结果进行的过滤操作，在Having中可以使用聚合函数。</p><p>在查询过程中聚合语句(sum,min,max,avg,count)要比having子句优先执行。而where子句在查询过程中执行优先级高于聚合语句。</p><p>select 学号，avg(成绩)from group by 学号 having avg(成绩) &gt; 60 </p><p>查询至少选修俩门课程的学生学号 select 学号,count(课程号)as 选修课程数目 from table group by 学号 having count(课程号)&gt;=2;</p><p>查询同名同性学生名单并统计人数 select 姓名，count(*<em>)as 人数from table group by  姓名 having count(**</em>)&gt;=2;</p><p>查询不及格的课程并按课程号从大到小排序</p><p>select 课程号 from table where 成绩&lt;60 order by 课程号 desc;</p><p>10、类似于成绩这一类型表类型为float</p><h3 id="23、php读取文件内容的几种方法和函数？"><a href="#23、php读取文件内容的几种方法和函数？" class="headerlink" title="23、php读取文件内容的几种方法和函数？"></a>23、php读取文件内容的几种方法和函数？</h3><p>打开文件，然后读取。Fopen() fread()</p><p>打开读取一次完成 file_get_contents()</p><h3 id="24、数据库开启慢查询"><a href="#24、数据库开启慢查询" class="headerlink" title="24、数据库开启慢查询"></a>24、数据库开启慢查询</h3><p>show variables like ‘slow_query%’;</p><p><img src="https://pic1.zhimg.com/v2-2d69d7233369c2dc263d2e0c79393c08_b.jpg" alt="img"></p><p>show variables like ‘long_query_time’;</p><p><img src="https://pic1.zhimg.com/v2-b86bce59c65d72c7ad95061c2cfe034c_b.jpg" alt="img"></p><p>方法一：全局变量设置 可以在navicat设置方便 有得时候修改时间不变还是10那就采用第二种</p><p>将 slow_query_log 全局变量设置为“ON”状态</p><p>set global slow_query_log=’ON’; </p><p>设置慢查询日志存放的位置</p><p>set global slow_query_log_file=’/usr/local/mysql/data/www-slow.log’;</p><p>查询超过10秒就记录</p><p>set global long_query_time=10;</p><p>方法二：配置文件设置</p><p>修改配置文件my.cnf，在[mysqld]下的下方加入</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">[mysqld]slow_query_log = ONslow_query_log_file = /usr/local/mysql/data/www-slow.loglong_query_time = 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.重启MySQL服务</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">service mysqld restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.查看设置后的参数</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">mysql&gt; show variables like 'slow_query%';+---------------------+--------------------------------+| Variable_name       | Value                          |+---------------------+--------------------------------+| slow_query_log      | ON                             || slow_query_log_file | /usr/local/mysql/data/slow.log |+---------------------+--------------------------------+mysql&gt; show variables like 'long_query_time';+-----------------+----------+| Variable_name   | Value    |+-----------------+----------+| long_query_time | 1.000000 |+-----------------+----------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="25、MYSQL的主从延迟怎么解决。"><a href="#25、MYSQL的主从延迟怎么解决。" class="headerlink" title="25、MYSQL的主从延迟怎么解决。"></a>25、MYSQL的主从延迟怎么解决。</h3><p>实际上主从同步延迟根本没有什么一招制敌的办法，因为所有的 SQL 必须都要在从服务器里面执行一遍，但是主服务器如果不断的有更新操作源源不断的写入， 那么一旦有延迟产生，那么延迟加重的可能性就会越来越大。 当然我们可以做一些缓解的措施。</p><p>a）、最简单的减少 slave 同步延时的方案就是在架构上做优化，尽量让主库的 DDL 快速执行。还有就是主库是写，对数据安全性较高，比如 sync_binlog=1，innodb_flush_log_at_trx_commit = 1 之类的设置，而 slave 则不需要这么高的数据安全，完全可以将 sync_binlog 设置为 0 或者关闭 binlog，innodb_flushlog 也可以设置为 0 来提高 sql 的执行效率。另外就是使用比主库更好的硬件设备作为 slave。</p><p>b）、把一台从服务器当作备份使用， 而不提供查询， 这样他的负载就下来了， 执行 relay log 里面的 SQL 效率自然就高了。</p><p>c）、增加从服务器，这个目的还是分散读的压力， 从而降低服务器负载。</p><h3 id="26、mysql中in-和exists-区别。"><a href="#26、mysql中in-和exists-区别。" class="headerlink" title="26、mysql中in 和exists 区别。"></a>26、mysql中in 和exists 区别。</h3><p>mysql 中的 in 语句是把外表和内表作 hash 连接，而 exists 语句是对外表作 loop 循环，每次 loop 循环再对内表进行查询。一直大家都认为 exists 比 in 语句的效率要高，这种说法其实是不准确的。这个是要区分环境的。</p><p>㊤、如果查询的两个表大小相当，那么用 in 和 exists 差别不大。</p><p>㊥、如果两个表中一个较小，一个是大表，则子查询表大的用 exists，子查询表小的用 in。</p><p>㊦、not in 和 not exists 如果查询语句使用了not in 那么内外表都进行全表扫描，没有用到索引；而 not extsts 的子查询依然能用到表上的索引。所以无论那个表大，用 not exists 都比 not in 要快。</p><p>EXISTS 只返回 TRUE 或 FALSE，不会返回 UNKNOWN IN 当遇到包含NULL的情况，那么就会返回 UNKNOWN</p><h3 id="27、mysql数据库监控指标之吞吐量"><a href="#27、mysql数据库监控指标之吞吐量" class="headerlink" title="27、mysql数据库监控指标之吞吐量"></a>27、mysql数据库监控指标之吞吐量</h3><p>如果你的数据库运行缓慢，或者出于某种原因无法响应查询，技术栈中每个依赖数据库的组件都会遭受性能问题。为了保证数据库的平稳运行，你可以监控下吞吐量这个指标。</p><p>吞吐量</p><p>在监控任何系统时，我们最关心的应该是确保系统能够高效地完成工作。数据库的工作是运行查询，因此首要任务是确保 MySQL 能够如期执行查询。</p><p>MySQL 有一个名为 Questions 的内部计数器（根据 MySQL 用语，这是一个服务器状态变量），客户端每发送一个查询语句，其值就会加一。</p><h3 id="28、MySQL中通过EXPLAIN如何分析SQL的执行计划详解"><a href="#28、MySQL中通过EXPLAIN如何分析SQL的执行计划详解" class="headerlink" title="28、MySQL中通过EXPLAIN如何分析SQL的执行计划详解"></a>28、MySQL中通过EXPLAIN如何分析SQL的执行计划详解</h3><p><img src="https://pic1.zhimg.com/v2-fa044dd3c8a511580a888a90dac751cc_b.jpg" alt="img"></p><p>简单说下有用的字段</p><p><strong>table</strong>: sql所查询的表名</p><p><strong>possible_keys</strong>: sql可能用到的索引</p><p><strong>key</strong>: sql实际用到的索引,如果是Null,说明没有用到索引</p><p><strong>ows</strong>: MySQL认为执行查询时必须检查的行数</p><p>下面分别对EXPLAIN命令结果的每一列进行说明：</p><p>**.select_type:**表示SELECT的类型，常见的取值有：</p><p>类型说明</p><p>SIMPLE简单表，不使用表连接或子查询</p><p>PRIMARY主查询，即外层的查询</p><p>UNIONUNION中的第二个或者后面的查询语句</p><p>SUBQUERY子查询中的第一个</p><p>**.table:**输出结果集的表（表别名）</p><p>**.type:**表示MySQL在表中找到所需行的方式，或者叫访问类型。常见访问类型如下，从上到下，性能由差到最好：</p><table><thead><tr><th>ALL</th><th>全表扫描</th></tr></thead><tbody><tr><td>index</td><td>索引全扫描</td></tr><tr><td>range</td><td>索引范围扫描</td></tr><tr><td>ref</td><td>非唯一索引扫描</td></tr><tr><td>eq_ref</td><td>唯一索引扫描</td></tr><tr><td>const,system</td><td>单表最多有一个匹配行</td></tr><tr><td>NULL</td><td>不用扫描表或索引</td></tr><tr><td></td><td></td></tr></tbody></table><p>type结果值从好到坏依次是：</p><p>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</p><p>一般来说，得保证查询至少达到range级别，最好能达到ref，否则就可能会出现性能问题</p><p>一般来说，得保证查询至少达到range级别，最好能达到ref，否则就可能会出现性能问题。</p><p><strong>1、type=ALL，全表扫描，MySQL遍历全表来找到匹配行</strong></p><p>一般是没有where条件或者where条件没有使用索引的查询语句</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">EXPLAIN SELECT * FROM customer WHERE active=0;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://pic3.zhimg.com/v2-bff660f59d12171048251740021d73e2_b.png" alt="img"></p><p><strong>2、type=index，索引全扫描，MySQL遍历整个索引来查询匹配行，并不会扫描表</strong></p><p>一般是查询的字段都有索引的查询语句</p><pre class="line-numbers language-none"><code class="language-none">EXPLAIN SELECT store_id FROM customer;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://pic1.zhimg.com/v2-07e410c4dcf2c13020145255b4646468_b.png" alt="img"></p><p><strong>3、type=range，索引范围扫描，常用于&lt;、&lt;=、&gt;、&gt;=、between等操作</strong></p><pre class="line-numbers language-none"><code class="language-none">EXPLAIN SELECT* FROM customer WHEREcustomer_id&gt;=10 ANDcustomer_id&lt;=20;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://pic1.zhimg.com/v2-d4ecd00d262eed0fdde2f319b1a1b5a4_b.png" alt="img"></p><p><strong>注意</strong>这种情况下比较的字段是需要加索引的，如果没有索引，则MySQL会进行全表扫描，如下面这种情况，create_date字段没有加索引：</p><p>EXPLAIN SELECT * FROM customer WHERE create_date&gt;=’2006-02-13’ ;</p><p><img src="https://pic2.zhimg.com/v2-0038deb6db359392311eb0fd5ce2a9ad_b.png" alt="img"></p><p><strong>4、type=ref，使用非唯一索引或唯一索引的前缀扫描，返回匹配某个单独值的记录行</strong></p><p><code>store_id</code>字段存在普通索引（非唯一索引）</p><pre class="line-numbers language-none"><code class="language-none">EXPLAIN SELECT* FROMcustomer WHEREstore_id=10;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://pic4.zhimg.com/v2-28704c3ccb414d8fda75940abb5b753f_b.png" alt="img"></p><p>ref类型还经常会出现在join操作中：</p><p>customer、payment表关联查询，关联字段<code>customer.customer_id</code>（主键），<code>payment.customer_id</code>（非唯一索引）。表关联查询时必定会有一张表进行全表扫描，此表一定是几张表中记录行数最少的表，然后再通过非唯一索引寻找其他关联表中的匹配行，以此达到表关联时扫描行数最少。</p><p><img src="https://pic2.zhimg.com/v2-21e872d4ee49067d02d47133760ab2ad_b.jpg" alt="img"></p><p>因为customer、payment两表中customer表的记录行数最少，所以customer表进行全表扫描，payment表通过非唯一索引寻找匹配行。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">EXPLAIN SELECT * FROM customer customer INNER JOIN payment payment ON customer.customer_id = payment.customer_id;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://pic2.zhimg.com/v2-87a82a6070843ce025ead199d9b03f39_b.png" alt="img"></p><p><strong>6、type=const/system，单表中最多有一条匹配行，查询起来非常迅速，所以这个匹配行的其他列的值可以被优化器在当前查询中当作常量来处理</strong></p><p>const/system出现在根据主键primary key或者 唯一索引 unique index 进行的查询</p><p>根据主键primary key进行的查询：</p><pre class="line-numbers language-none"><code class="language-none">EXPLAIN SELECT* FROMcustomer WHEREcustomer_id =10;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://pic2.zhimg.com/v2-33782e55c986dc5b6bca0e89cde49531_b.png" alt="img"></p><p>根据唯一索引unique index进行的查询：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">EXPLAIN SELECT * FROM customer WHERE email ='MARY.SMITH@sakilacustomer.org';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://pic4.zhimg.com/v2-71e65de46caf22a78c7bc5cae2ce6e6f_b.jpg" alt="img"></p><p><strong>7、type=NULL，MySQL不用访问表或者索引，直接就能够得到结果</strong></p><p><img src="https://pic3.zhimg.com/v2-9a358a3c7b052adee7d2e84d21187f56_b.png" alt="img"></p><p><strong>.possible_keys:</strong> 表示查询可能使用的索引</p><p><strong>.key:</strong> 实际使用的索引</p><p><strong>.key_len:</strong> 使用索引字段的长度</p><p><strong>.ref:</strong> 使用哪个列或常数与key一起从表中选择行。</p><p><strong>.rows:</strong> 扫描行的数量</p><p><strong>.filtered:</strong> 存储引擎返回的数据在server层过滤后，剩下多少满足查询的记录数量的比例(百分比)</p><p><strong>.Extra:</strong> 执行情况的说明和描述，包含不适合在其他列中显示但是对执行计划非常重要的额外信息</p><p>最主要的有一下三种：</p><table><thead><tr><th>Using Index</th><th>表示索引覆盖，不会回表查询</th></tr></thead><tbody><tr><td>Using Where</td><td>表示进行了回表查询</td></tr><tr><td>Using Index Condition</td><td>表示进行了ICP优化</td></tr><tr><td>Using Flesort</td><td>表示MySQL需额外排序操作, 不能通过索引顺序达到排序效果</td></tr></tbody></table><p><strong>什么是ICP？</strong></p><p>MySQL5.6引入了Index Condition Pushdown（ICP）的特性，进一步优化了查询。Pushdown表示操作下放，某些情况下的条件过滤操作下放到存储引擎。</p><pre class="line-numbers language-none"><code class="language-none">EXPLAIN SELECT* FROMrental WHERErental_date='2005-05-25'ANDcustomer_id&gt;=300 ANDcustomer_id&lt;=400;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>在5.6版本之前：</strong></p><p>优化器首先使用复合索引idx_rental_date过滤出符合条件<code>rental_date='2005-05-25'</code>的记录，然后根据复合索引idx_rental_date回表获取记录，最终根据条件<code>customer_id&gt;=300 AND customer_id&lt;=400</code>过滤出最后的查询结果（在服务层完成）。</p><p><strong>在5.6版本之后：</strong></p><p>MySQL使用了ICP来进一步优化查询，在检索的时候，把条件<code>customer_id&gt;=300 AND customer_id&lt;=400</code>也推到存储引擎层完成过滤，这样能够降低不必要的IO访问。Extra为<code>Using index condition</code>就表示使用了ICP优化。</p><p><img src="https://pic4.zhimg.com/v2-39809c410afe4b1b6432b33b17d48693_b.png" alt="img"></p><p>查看当前表中哪些字段创建索引了</p><p>show index from table;</p><h3 id="29、Hash索引和B-树区别是什么？你在设计索引是怎么抉择的？"><a href="#29、Hash索引和B-树区别是什么？你在设计索引是怎么抉择的？" class="headerlink" title="29、Hash索引和B+树区别是什么？你在设计索引是怎么抉择的？"></a>29、Hash索引和B+树区别是什么？你在设计索引是怎么抉择的？</h3><ul><li>B+树可以进行范围查询，Hash索引不能。</li><li>B+树支持联合索引的最左侧原则，Hash索引不支持。</li><li>B+树支持order by排序，Hash索引不支持。</li><li>Hash索引在等值查询上比B+树效率更高。</li><li>B+树使用like 进行模糊查询的时候，like后面（比如%开头）的话可以起到优化的作用，Hash索引根本无法进行模糊查询。</li></ul><p><strong>1、查询Questions服务器状态变量值</strong></p><p>SHOW GLOBAL STATUS LIKE “Questions”;</p><p><img src="https://pic2.zhimg.com/v2-abc5c25500a73093ea8e53ce06753c05_b.jpg" alt="img"></p><p><strong>2、监控读指令的分解情况</strong></p><p>SHOW GLOBAL STATUS LIKE “Com_select”;</p><p><img src="https://pic4.zhimg.com/v2-4042e8f31e0de892d072420f9741ad0f_b.jpg" alt="img"></p><p><strong>3、监控写指令的分解情况</strong></p><p>Writes = Com_insert + Com_update + Com_delete；</p><p>show GLOBAL status like “com_insert”;</p><p>SHOW GLOBAL STATUS LIKE “com_update”;</p><p>SHOW GLOBAL STATUS LIKE “com_delete”;</p><p><img src="https://pic4.zhimg.com/v2-9bd2eea6e3a12dfdcb64d38a354bff1b_b.jpg" alt="img"></p><h3 id="30、MyISAM-和-InnoDB-的基本区别？索引结构如何实现？"><a href="#30、MyISAM-和-InnoDB-的基本区别？索引结构如何实现？" class="headerlink" title="30、MyISAM 和 InnoDB 的基本区别？索引结构如何实现？"></a>30、MyISAM 和 InnoDB 的基本区别？索引结构如何实现？</h3><p>MyISAM类型不支持事务，表锁，易产生碎片，要经常优化，读写速度较快，而InnoDB类型支持事务，行锁，有崩溃恢复能力。读写速度比MyISAM慢，适合插入和更新操作比较多的应用，占空间大。</p><p>创建索引：alert table tablename add index (<code>字段名</code>)</p><h3 id="31、sql语句应该考虑哪些安全性"><a href="#31、sql语句应该考虑哪些安全性" class="headerlink" title="31、sql语句应该考虑哪些安全性"></a>31、sql语句应该考虑哪些安全性</h3><p>（1）防止sql注入，对特殊字符进行转义，过滤或者使用预编译sql语句绑定</p><p>（2）使用最小权限原则，特别是不要使用root账户，微不同的动作或者操作建立不同的账户</p><p>（3）当sql出错时，不要把数据库出错的信息暴露到客户端</p><h3 id="32、mysql-fetch-array和mysql-fetch-object的区别是什么？"><a href="#32、mysql-fetch-array和mysql-fetch-object的区别是什么？" class="headerlink" title="32、mysql_fetch_array和mysql_fetch_object的区别是什么？"></a>32、mysql_fetch_array和mysql_fetch_object的区别是什么？</h3><p>以下是mysql_fetch_array和mysql_fetch_object的区别：</p><p>mysql_fetch_array（） - 将结果行作为关联数组或来自数据库的常规数组返回。</p><p>mysql_fetch_object - 从数据库返回结果行作为对象。</p><h3 id="33、mysql-fetch-row-和mysql-fetch-array之间有什么区别"><a href="#33、mysql-fetch-row-和mysql-fetch-array之间有什么区别" class="headerlink" title="33、mysql_fetch_row() 和mysql_fetch_array之间有什么区别?"></a>33、mysql_fetch_row() 和mysql_fetch_array之间有什么区别?</h3><p>Mysql_fetch_row()是从结果集中取出一行作为枚举数组，mysql_fetch_array()是从结果集中取出一行作为索引数组或关联数组或两种方式都有。</p><p>实现中文字串截取无乱码的方法</p><p>Mb_substr();</p><h3 id="34、请写出数据类型-int-char-varchar-datetime-text-的意思；请问-varchar-和-char有什么区别？"><a href="#34、请写出数据类型-int-char-varchar-datetime-text-的意思；请问-varchar-和-char有什么区别？" class="headerlink" title="34、请写出数据类型(int char varchar datetime text)的意思；请问 varchar 和 char有什么区别？"></a>34、请写出数据类型(int char varchar datetime text)的意思；请问 varchar 和 char有什么区别？</h3><p>Int 整数  Datetime 日期时间型 Text 文本型</p><ul><li>char(n) ：固定长度类型，比如订阅 char(10)，当你输入”abc”三个字符的时候，它们占的空间还是 10 个字节，其他 7 个是空字节。</li></ul><p>chat 优点：效率高；缺点：占用空间；适用场景：存储密码的 md5 值，固定长度的，使用 char 非常合适。</p><ul><li>varchar(n) ：可变长度，存储的值是每个值占用的字节再加上一个用来记录其长度的字节的长度。</li></ul><p>所以，从空间上考虑 varcahr 比较合适；从效率上考虑 char 比较合适，二者使用需要权衡。</p>]]></content>
    
    
    <summary type="html">mysql面试题</summary>
    
    
    
    <category term="sql" scheme="https://13592491893.github.io/categories/sql/"/>
    
    
    <category term="面试" scheme="https://13592491893.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="sql" scheme="https://13592491893.github.io/tags/sql/"/>
    
    <category term="mysql" scheme="https://13592491893.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb——Servlet</title>
    <link href="https://13592491893.github.io/posts/49848.html"/>
    <id>https://13592491893.github.io/posts/49848.html</id>
    <published>2021-05-21T16:00:00.000Z</published>
    <updated>2021-12-29T03:19:25.623Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaWeb——Servlet"><a href="#JavaWeb——Servlet" class="headerlink" title="JavaWeb——Servlet"></a>JavaWeb——Servlet</h1><p>版权声明：本文为CSDN博主「刘扬俊」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_19782019/article/details/80292110">https://blog.csdn.net/qq_19782019/article/details/80292110</a></p><p>————————————————</p><h2 id="一、Tomcat工作机制动画演示-点击动图可全屏观看）"><a href="#一、Tomcat工作机制动画演示-点击动图可全屏观看）" class="headerlink" title="一、Tomcat工作机制动画演示(点击动图可全屏观看）"></a>一、Tomcat工作机制动画演示(点击动图可全屏观看）</h2><p><img src="https://img-blog.csdnimg.cn/2018120522281643.gif" alt="img"></p><h2 id="二、什么是Servlet"><a href="#二、什么是Servlet" class="headerlink" title="二、什么是Servlet"></a>二、什么是Servlet</h2><p>Servlet（Server Applet），全称Java Servlet，未有中文译文。是用Java编写的服务器端程序。其主要功能在于交互式地浏览和修改数据，生成动态Web内容。狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。<br>Servlet运行于支持Java的应用服务器中。从实现上讲，Servlet可以响应任何类型的请求，但绝大多数情况下Servlet只用来扩展基于HTTP协议的Web服务器。</p><h2 id="三、Servlet的工作模式"><a href="#三、Servlet的工作模式" class="headerlink" title="三、Servlet的工作模式"></a>三、Servlet的工作模式</h2><ol><li>客户端发送请求至服务器</li><li>服务器启动并调用Servlet，Servlet根据客户端请求生成响应内容并将其传给服务器</li><li>服务器将响应返回客户端</li></ol><h2 id="四、Servlet-API-概览"><a href="#四、Servlet-API-概览" class="headerlink" title="四、Servlet API 概览"></a>四、Servlet API 概览</h2><p>Servlet API 包含以下4个Java包:</p><ol><li>javax.servlet  其中包含定义servlet和servlet容器之间契约的类和接口。</li><li>javax.servlet.http  其中包含定义HTTP Servlet 和Servlet容器之间的关系。</li><li>javax.servlet.annotation  其中包含标注servlet，Filter,Listener的标注。它还为被标注元件定义元数据。</li><li>javax.servlet.descriptor，其中包含提供程序化登录Web应用程序的配置信息的类型。</li></ol><h2 id="五、Servlet-的主要类型"><a href="#五、Servlet-的主要类型" class="headerlink" title="五、Servlet 的主要类型"></a>五、Servlet 的主要类型</h2><p><img src="https://img-blog.csdn.net/20180512170931739?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE5NzgyMDE5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><h2 id="六、Servlet-的使用方法"><a href="#六、Servlet-的使用方法" class="headerlink" title="六、Servlet 的使用方法"></a>六、Servlet 的使用方法</h2><p>Servlet技术的核心是Servlet，它是所有Servlet类必须直接或者间接实现的一个接口。在编写实现Servlet的Servlet类时，直接实现它。在扩展实现这个这个接口的类时，间接实现它。</p><blockquote><p>Servlet中@WebServlet属性详解:(同理理解到Filter)</p><p>在Servlet中,设置了@WebServlet注解,当请求该Servlet时,服务器就会自动读取当中的信息,如果注解@WebServlet(“/category”),则表示该Servlet默认的请求路径为…/category,这里省略了urlPatterns属性名,完整的写法应该是:@WebServlet(urlPatterns = “/category”),如果在@WebServlet中需要设置多个属性,必须给属性值加上属性名称,中间用逗号隔开,否则会报错.<br>若没有设置@WebServlet的name属性，默认值会是Servlet的类完整名称.</p><p>在servlet3.0以后，web.xml中对Servlet配置，同样可以在@WebServlet注解中配置.<br>下面是@WebServlet的属性列表:<br><img src="C:\Users\45917\AppData\Roaming\Typora\typora-user-images\image-20210703173226572.png" alt="image-20210703173226572"></p></blockquote><p><strong>servlet的url-pattern匹配规则：</strong></p><p>首先需要明确几容易混淆的规则：</p><ol><li>servlet容器中的匹配规则既不是简单的通配，也不是正则表达式，而是特定的规则。所以不要用通配符或者正则表达式的匹配规则来看待servlet的url-pattern。</li><li>Servlet 2.5开始，一个servlet可以使用多个url-pattern规则，<servlet-mapping>标签声明了与该servlet相应的匹配规则，每个<url-pattern>标签代表1个匹配规则；</url-pattern></servlet-mapping></li><li>当servlet容器接收到浏览器发起的一个url请求后，容器会用url减去当前应用的上下文路径，以剩余的字符串作为servlet映射，假如url是<a href="http://localhost:8080/appDemo/index.html%EF%BC%8C%E5%85%B6%E5%BA%94%E7%94%A8%E4%B8%8A%E4%B8%8B%E6%96%87%E6%98%AFappDemo%EF%BC%8C%E5%AE%B9%E5%99%A8%E4%BC%9A%E5%B0%86http://localhost:8080/appDemo%E5%8E%BB%E6%8E%89%EF%BC%8C%E7%94%A8%E5%89%A9%E4%B8%8B%E7%9A%84/index.html%E9%83%A8%E5%88%86%E6%8B%BF%E6%9D%A5%E5%81%9Aservlet%E7%9A%84%E6%98%A0%E5%B0%84%E5%8C%B9%E9%85%8D">http://localhost:8080/appDemo/index.html，其应用上下文是appDemo，容器会将http://localhost:8080/appDemo去掉，用剩下的/index.html部分拿来做servlet的映射匹配</a></li><li>url-pattern映射匹配过程是有优先顺序的</li><li>而且当有一个servlet匹配成功以后，就不会去理会剩下的servlet了。</li></ol><p>需要注意的问题：</p><ol><li>路径匹配和扩展名匹配无法同时设置：匹配方法只有三种，要么是路径匹配（以“/”字符开头，并以“/<em>”结尾），要么是扩展名匹配（以“</em>.”开头），要么是精确匹配，三种匹配方法不能进行组合，不要想当然使用通配符或正则规则。如<code>&lt;url-pattern&gt;/user/*.action&lt;/url-pattern&gt;</code>是非法的，另外注意：<code>&lt;url-pattern&gt;/aa/*/bb&lt;/url-pattern&gt;</code>是精确匹配，合法，这里的*不是通配的含义</li><li>“/*”和”/“含义并不相同<br>“/<em>”属于路径匹配，并且可以匹配所有request，由于路径匹配的优先级仅次于精确匹配，所以“<code>/*</code>”会覆盖所有的扩展名匹配，很多404错误均由此引起，所以这是一种特别恶劣的匹配模式，一般只用于filter的url-pattern<br>“/”是servlet中特殊的匹配模式，切该模式有且仅有一个实例，优先级最低，不会覆盖其他任何url-pattern，只是会替换servlet容器的内建default servlet ，该模式同样会匹配所有request。<br>配置“/”后，一种可能的现象是myServlet会拦截诸如<a href="http://localhost:8080/appDemo/user/addUser.action%E3%80%81http://localhost:8080/appDemo/user/updateUser%E7%9A%84%E6%A0%BC%E5%BC%8F%E7%9A%84%E8%AF%B7%E6%B1%82%EF%BC%8C%E4%BD%86%E6%98%AF%E5%B9%B6%E4%B8%8D%E4%BC%9A%E6%8B%A6%E6%88%AAhttp://localhost:8080/appDemo/user/users.jsp%E3%80%81http://localhost:8080/appDemo/index.jsp%EF%BC%8C%E8%BF%99%E6%98%AF%E5%BA%94%E4%B8%BAservlet%E5%AE%B9%E5%99%A8%E6%9C%89%E5%86%85%E7%BD%AE%E7%9A%84%E2%80%9C">http://localhost:8080/appDemo/user/addUser.action、http://localhost:8080/appDemo/user/updateUser的格式的请求，但是并不会拦截http://localhost:8080/appDemo/user/users.jsp、http://localhost:8080/appDemo/index.jsp，这是应为servlet容器有内置的“</a></em>.jsp”匹配器，而扩展名匹配的优先级高于缺省匹配，所以才会有上述现象。</li></ol><h2 id="七、Servlet-的工作原理"><a href="#七、Servlet-的工作原理" class="headerlink" title="七、Servlet 的工作原理"></a>七、Servlet 的工作原理</h2><p> Servlet接口定义了Servlet与servlet容器之间的契约。这个契约是：Servlet容器将Servlet类载入内存，并产生Servlet实例和调用它具体的方法。<strong>但是要注意的是，在一个应用程序中，每种Servlet类型只能有一个实例</strong>。<br>用户请求致使Servlet容器调用Servlet的Service（）方法，并传入一个ServletRequest对象和一个ServletResponse对象。ServletRequest对象和ServletResponse对象都是由Servlet容器（例如TomCat）封装好的，并不需要程序员去实现，程序员可以直接使用这两个对象。<br>ServletRequest中封装了当前的Http请求，因此，开发人员不必解析和操作原始的Http数据。ServletResponse表示当前用户的Http响应，程序员只需直接操作ServletResponse对象就能把响应轻松的发回给用户。<br>对于每一个应用程序，Servlet容器还会创建一个ServletContext对象。这个对象中封装了上下文（应用程序）的环境详情。每个应用程序只有一个ServletContext。每个Servlet对象也都有一个封装Servlet配置的ServletConfig对象。</p><h2 id="八、Servlet-接口中定义的方法"><a href="#八、Servlet-接口中定义的方法" class="headerlink" title="八、Servlet 接口中定义的方法"></a>八、Servlet 接口中定义的方法</h2><p>让我们首先来看一看Servlet接口中定义了哪些方法吧。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">;</span>     <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> var1<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> var2<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>     <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="九、Servlet-的生命周期"><a href="#九、Servlet-的生命周期" class="headerlink" title="九、Servlet 的生命周期"></a>九、Servlet 的生命周期</h2><p>其中，init( ),service( ),destroy( )是Servlet生命周期的方法。代表了Servlet从“出生”到“工作”再到“死亡 ”的过程。Servlet容器（例如TomCat）会根据下面的规则来调用这三个方法：</p><p>1.init( ),当Servlet第一次被请求时，Servlet容器就会开始调用这个方法来初始化一个Servlet对象出来，但是这个方法在后续请求中不会在被Servlet容器调用，就像人只能“出生”一次一样。我们可以利用init（ ）方法来执行相应的初始化工作。调用这个方法时，Servlet容器会传入一个ServletConfig对象进来从而对Servlet对象进行初始化。</p><p>2.service( )方法，每当请求Servlet时，Servlet容器就会调用这个方法。就像人一样，需要不停的接受老板的指令并且“工作”。第一次请求时，Servlet容器会先调用init( )方法初始化一个Servlet对象出来，然后会调用它的service( )方法进行工作，但在后续的请求中，Servlet容器只会调用service方法了。</p><p>3.destory(),当要销毁Servlet时，Servlet容器就会调用这个方法，就如人一样，到时期了就得死亡。在卸载应用程序或者关闭Servlet容器时，就会发生这种情况，一般在这个方法中会写一些清除代码。</p><p>首先，我们来编写一个简单的Servlet来验证一下它的生命周期：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFirstServlrt</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> servletConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Servlet正在初始化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//专门向客服端提供响应的方法</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Servlet正在提供服务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Servlet正在销毁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在xml中配置正确的映射关系，在浏览器中访问Servlet，第一次访问时，控制台输出了如下信息：</p><p><img src="https://img-blog.csdn.net/20180512164825188?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE5NzgyMDE5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>然后，我们在浏览器中刷新3遍：</p><p>控制台输出的信息变成了下面这样：</p><p><img src="https://img-blog.csdn.net/20180512164922863?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE5NzgyMDE5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>接下来，我们关闭Servlet容器：</p><p><img src="https://img-blog.csdn.net/20180512165004507?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE5NzgyMDE5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>控制台输出了Servlet的销毁信息，这就是一个Servlet的完整生命周期。</p><h2 id="十、Servlet-的其它两个方法"><a href="#十、Servlet-的其它两个方法" class="headerlink" title="十、Servlet 的其它两个方法"></a>十、Servlet 的其它两个方法</h2><p>getServletInfo（ ），这个方法会返回Servlet的一段描述，可以返回一段字符串。</p><p>  getServletConfig（ ），这个方法会返回由Servlet容器传给init（ ）方法的ServletConfig对象。</p><h2 id="十一、ServletRequset接口"><a href="#十一、ServletRequset接口" class="headerlink" title="十一、ServletRequset接口"></a>十一、ServletRequset接口</h2><p>Servlet容器对于接受到的每一个Http请求，<strong>都会创建一个ServletRequest对象</strong>(<em>ServletRequset是一个接口，为什么可以创建一个ServletRequset对象?==&gt;&gt;HttpServletRequest接口的实现类是Web容器负责的，Tomcat服务器有自己的实现。但是程序要还是只需要面向HttpServletRequest接口调用方法即可，不需要关心具体的实现类</em>)，并把这个对象传递给Servlet的Sevice( )方法。其中，ServletRequest对象内封装了关于这个请求的许多详细信息。</p><p>让我们来看一看ServletRequest接口的部分内容：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ServletRequest</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> <span class="token function">getContentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回请求主体的字节数</span>     <span class="token class-name">String</span> <span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回主体的MIME类型</span>     <span class="token class-name">String</span> <span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回请求参数的值</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>getParameter获取参数并返回给页面：</p><p><img src="C:\Users\45917\AppData\Roaming\Typora\typora-user-images\image-20210702152308787.png"></p><p><img src="C:\Users\45917\AppData\Roaming\Typora\typora-user-images\image-20210702152337321.png" alt="image-20210702152337321"></p><p>其中，getParameter是在ServletRequest中最常用的方法，可用于获取查询字符串的值。</p><h2 id="十二、ServletResponse接口"><a href="#十二、ServletResponse接口" class="headerlink" title="十二、ServletResponse接口"></a>十二、ServletResponse接口</h2><p> javax.servlet.ServletResponse接口表示一个Servlet响应，在调用Servlet的Service( )方法前，Servlet容器会先创建一个ServletResponse对象，并把它作为第二个参数传给Service( )方法。ServletResponse隐藏了向浏览器发送响应的复杂过程。</p><p>让我们也来看看ServletResponse内部定义了哪些方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ServletResponse</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">getCharacterEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">String</span> <span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">ServletOutputStream</span> <span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>     <span class="token class-name">PrintWriter</span> <span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token class-name">String</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">setContentLength</span><span class="token punctuation">(</span><span class="token keyword">int</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">String</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">setBufferSize</span><span class="token punctuation">(</span><span class="token keyword">int</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> <span class="token function">getBufferSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">flushBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">resetBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">boolean</span> <span class="token function">isCommitted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">setLocale</span><span class="token punctuation">(</span><span class="token class-name">Locale</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Locale</span> <span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中的getWriter方法，它返回了一个可以向客户端发送文本的的Java.io.PrintWriter对象。默认情况下，PrintWriter对象使用ISO-8859-1编码（该编码在输入中文时会发生乱码）。</p><p>在向客户端发送响应时，大多数都是使用该对象向客户端发送HTML。</p><p>还有一个方法也可以用来向浏览器发送数据，它就是getOutputStream，从名字就可以看出这是一个二进制流对象，因此这个方法是用来发送二进制数据的。</p><p>在发送任何HTML之前，应该先调用setContentType（）方法，设置响应的内容类型，并将“text/html”作为一个参数传入，这是在告诉浏览器响应的内容类型为HTML，需要以HTML的方法解释响应内容而不是普通的文本，或者也可以加上“charset=UTF-8”改变响应的编码方式以防止发生中文乱码现象。</p><h2 id="十三、ServletConfig接口"><a href="#十三、ServletConfig接口" class="headerlink" title="十三、ServletConfig接口"></a>十三、ServletConfig接口</h2><p>当Servlet容器初始化Servlet时，Servlet容器会给Servlet的init( )方式传入一个ServletConfig对象。</p><p>其中几个方法如下：</p><p><img src="https://img-blog.csdn.net/20180512175029254?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE5NzgyMDE5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><h2 id="十四、ServletContext对象"><a href="#十四、ServletContext对象" class="headerlink" title="十四、ServletContext对象"></a>十四、ServletContext对象</h2><p>ServletContext对象表示Servlet应用程序。每个Web应用程序都只有一个ServletContext对象。在将一个应用程序同时部署到多个容器的分布式环境中，每台Java虚拟机上的Web应用都会有一个ServletContext对象。</p><p>通过在ServletConfig中调用getServletContext方法，也可以获得ServletContext对象。</p><p>那么为什么要存在一个ServletContext对象呢？存在肯定是有它的道理，因为有了ServletContext对象，就可以共享从应用程序中的所有资料处访问到的信息，并且可以动态注册Web对象。前者将对象保存在ServletContext中的一个内部Map中。保存在ServletContext中的对象被称作属性。</p><p>ServletContext中的下列方法负责处理属性：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> <span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAttributeNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> var1<span class="token punctuation">,</span> <span class="token class-name">Object</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>热知识：</p><p>1.Session(做验证码时疑问)<br>访问同一个应用程序，一个浏览器对应一个Session，利用此知识可以产生验证码图片和字符串，把字符串存到session里，图片返回前端，登录时传入验证码与session里的做对比</p><p>2.Request、Session、servletContext区别<br><strong>首先从作用范围来说</strong></p><ol><li>Request       保存的键值仅在下一个request对象中可以得到。</li><li>Session        它是一个会话范围，相当于一个局部变量，从Session第一次创建知道关闭，数据都一直 保存，每一个客户都有一个Session，所以它可以被客户一直访问，只要Session没有关闭和超时即浏览器关闭。</li><li>servletContext    它代表了servlet环境的上下文，相当于一个全局变量，即只要某个web应用在启动中，这个对象就一直都有效的存在，所以它的范围是最大的，存储的数据可以被所有用户使用，只要服务器不关闭，数据就会一直都存在。</li></ol><p><strong>它们的优缺点：</strong></p><ol><li><p><strong>request：</strong><br>好处：用完就仍，不会导致资源占用的无限增长。<br>弊处：数据只能被下一个对象获取，所以在写程序时会因为无法共享数据导致每次要用都从数据库中取，多做操作，自然会对性能有一些影响。</p></li><li><p><strong>session：</strong>好处：是一个局部变量，可以保存用户的信息并直接取出，不用每次都去数据库抓，少做操作，极大的方便了程序的编写。<br>弊处：每个客户都有一个session，只能自己使用，不同session可能保存大量重复数据； 可能耗费大量服务器内存； 另外session构建在cookie和url重写的基础上，所以用session实现会话跟踪，会用掉一点点服务器带宽和客户端保持联络， 当然session越多，耗费的带宽越多，理论上也会对性能造成影响。 集群的session同步会是个问题。</p></li><li><p><strong>servletContext：</strong></p><p>好处：不用每次都去数据库抓，少做操作。 存储的数据所有客户都可以用。 可减少重复在内存中存储数据造成的开销。</p></li></ol></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>cdsxt<span class="token punctuation">.</span>action</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintWriter</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpSession</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SessionServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token comment">//创建 session的时机</span><span class="token comment">//首先 服务器调用request.getSession();</span><span class="token comment">//请求头里没有JsessionId     创建一个新的session 对象</span><span class="token comment">//请求头里有JsessionId    按照这个JsessionId去找对应的session对象</span><span class="token comment">//如果session对象没有失效   不创建新的session   </span><span class="token comment">//如果session对象失效    创建新的session</span><span class="token comment">//什么叫一次会话    笼统回答 浏览器启动并且访问项目  到  关闭浏览器 .事实上，取决于JsessionID对应的session是否失效</span><span class="token class-name">HttpSession</span> session<span class="token operator">=</span>request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"aaaaaaaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span> <span class="token string">"bbbbbbbbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//session.setMaxInactiveInterval(10); </span><span class="token comment">//请求转发可以拿到</span><span class="token comment">//request.getRequestDispatcher("sessionServlet2").forward(request, response);</span><span class="token comment">//重定向也可以拿到</span><span class="token comment">//response.sendRedirect("sessionServlet2");</span><span class="token comment">//request    同一次请求</span><span class="token comment">//servletContext(application)  整个web的servlet都享用   从web启动  到web卸载</span><span class="token comment">//session    同一次会话</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十五、GenericServlet抽象类"><a href="#十五、GenericServlet抽象类" class="headerlink" title="十五、GenericServlet抽象类"></a>十五、GenericServlet抽象类</h2><p>前面我们编写Servlet一直是通过实现Servlet接口来编写的，但是，使用这种方法，则必须要实现Servlet接口中定义的所有的方法，即使有一些方法中没有任何东西也要去实现，并且还需要自己手动的维护ServletConfig这个对象的引用。因此，这样去实现Servlet是比较麻烦的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>幸好，GenericServlet抽象类的出现很好的解决了这个问题。本着尽可能使代码简洁的原则，GenericServlet实现了Servlet和ServletConfig接口，下面是GenericServlet抽象类的具体代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">GenericServlet</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span><span class="token punctuation">,</span> <span class="token class-name">ServletConfig</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> LSTRING_FILE <span class="token operator">=</span> <span class="token string">"javax.servlet.LocalStrings"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ResourceBundle</span> lStrings <span class="token operator">=</span> <span class="token class-name">ResourceBundle</span><span class="token punctuation">.</span><span class="token function">getBundle</span><span class="token punctuation">(</span><span class="token string">"javax.servlet.LocalStrings"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">ServletConfig</span> config<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token class-name">GenericServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ServletConfig</span> sc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sc <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>lStrings<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"err.servlet_config_not_initialized"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> sc<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getInitParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ServletConfig</span> sc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sc <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>lStrings<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"err.servlet_config_not_initialized"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> sc<span class="token punctuation">.</span><span class="token function">getInitParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token class-name">ServletContext</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ServletConfig</span> sc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sc <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>lStrings<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"err.servlet_config_not_initialized"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> sc<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> config<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>config <span class="token operator">=</span> config<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> message<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> var1<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> var2<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ServletConfig</span> sc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sc <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>lStrings<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"err.servlet_config_not_initialized"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> sc<span class="token punctuation">.</span><span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，GenericServlet抽象类相比于直接实现Servlet接口，有以下几个好处：</p><p>1.为Servlet接口中的所有方法提供了默认的实现，则程序员需要什么就直接改什么，不再需要把所有的方法都自己实现了。</p><p>2.提供方法，包围ServletConfig对象中的方法。</p><p>3.将init( )方法中的ServletConfig参数赋给了一个内部的ServletConfig引用从而来保存ServletConfig对象，不需要程序员自己去维护ServletConfig了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> config<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>config <span class="token operator">=</span> config<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但是，我们发现在GenericServlet抽象类中还存在着另一个没有任何参数的Init()方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>设计者的初衷到底是为了什么呢？在第一个带参数的init（）方法中就已经把ServletConfig对象传入并且通过引用保存好了，完成了Servlet的初始化过程，那么为什么后面还要加上一个不带任何参数的init（）方法呢？这不是多此一举吗？<br>当然不是多此一举了，存在必然有存在它的道理。我们知道，抽象类是无法直接产生实例的，需要另一个类去继承这个抽象类，那么就会发生方法覆盖的问题，如果在类中覆盖了GenericServlet抽象类的init（）方法，那么程序员就必须手动的去维护ServletConfig对象了，还得调用super.init(servletConfig）方法去调用父类GenericServlet的初始化方法来保存ServletConfig对象，这样会给程序员带来很大的麻烦。GenericServlet提供的第二个不带参数的init( )方法，就是为了解决上述问题的。<br>这个不带参数的init（）方法，是在ServletConfig对象被赋给ServletConfig引用后，由第一个带参数的init(ServletConfig servletconfig)方法调用的，那么这意味着，当程序员如果需要覆盖这个GenericServlet的初始化方法，则只需要覆盖那个不带参数的init( )方法就好了，此时，servletConfig对象仍然有GenericServlet保存着。<br>说了这么多，通过扩展GenericServlet抽象类，就不需要覆盖没有计划改变的方法。因此，代码将会变得更加的简洁，程序员的工作也会减少很多。<br>然而，虽然GenricServlet是对Servlet一个很好的加强，但是也不经常用，因为他不像HttpServlet那么高级。HttpServlet才是主角，在现实的应用程序中被广泛使用。那么我们接下来就看看传说中的HttpServlet到底厉害在哪里吧。</p><h2 id="十六、javax-servlet-http包内容"><a href="#十六、javax-servlet-http包内容" class="headerlink" title="十六、javax.servlet.http包内容"></a>十六、javax.servlet.http包内容</h2><p>之所以所HttpServlet要比GenericServlet强大，其实也是有道理的。HttpServlet是由GenericServlet抽象类扩展而来的，HttpServlet抽象类的声明如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">HttpServlet</span> <span class="token keyword">extends</span> <span class="token class-name">GenericServlet</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>HttpServlet之所以运用广泛的另一个原因是现在大部分的应用程序都要与HTTP结合起来使用。这意味着我们可以利用HTTP的特性完成更多更强大的任务。Javax。servlet.http包是Servlet API中的第二个包，其中包含了用于编写Servlet应用程序的类和接口。Javax.servlet.http中的许多类型都覆盖了Javax.servlet中的类型。<br><img src="https://img-blog.csdn.net/20180513104757248?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE5NzgyMDE5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><h2 id="十七、HttpServlet抽象类"><a href="#十七、HttpServlet抽象类" class="headerlink" title="十七、HttpServlet抽象类"></a>十七、HttpServlet抽象类</h2><p>HttpServlet抽象类是继承于GenericServlet抽象类而来的。使用HttpServlet抽象类时，还需要借助分别代表Servlet请求和Servlet响应的HttpServletRequest和HttpServletResponse对象。</p><p>HttpServletRequest接口扩展于javax.servlet.ServletRequest接口，HttpServletResponse接口扩展于javax.servlet.servletResponse接口。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HttpServletRequest</span> <span class="token keyword">extends</span> <span class="token class-name">ServletRequest</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HttpServletResponse</span> <span class="token keyword">extends</span> <span class="token class-name">ServletResponse</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>HttpServlet抽象类覆盖了GenericServlet抽象类中的Service( )方法，并且添加了一个自己独有的Service(HttpServletRequest request，HttpServletResponse方法。</p><p>让我们来具体的看一看HttpServlet抽象类是如何实现自己的service方法吧：</p><p>首先来看GenericServlet抽象类中是如何定义service方法的：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> var1<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> var2<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们看到是一个抽象方法，也就是HttpServlet要自己去实现这个service方法，我们在看看HttpServlet是怎么覆盖这个service方法的：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">;</span>    <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span>req<span class="token punctuation">;</span>        response <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span>res<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassCastException</span> var6<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span><span class="token punctuation">(</span><span class="token string">"non-HTTP request or response"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们发现，HttpServlet中的service方法把接收到的ServletRequsest类型的对象转换成了HttpServletRequest类型的对象，把ServletResponse类型的对象转换成了HttpServletResponse类型的对象。之所以能够这样强制的转换，是因为在调用Servlet的Service方法时，Servlet容器总会传入一个HttpServletRequest对象和HttpServletResponse对象，预备使用HTTP。因此，转换类型当然不会出错了。</p><p>转换之后，service方法把两个转换后的对象传入了另一个service方法，那么我们再来看看这个方法是如何实现的：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> lastModified<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lastModified <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLastModified</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastModified <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> ifModifiedSince <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getDateHeader</span><span class="token punctuation">(</span><span class="token string">"If-Modified-Since"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ifModifiedSince <span class="token operator">&lt;</span> lastModified<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">maybeSetLastModified</span><span class="token punctuation">(</span>resp<span class="token punctuation">,</span> lastModified<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                resp<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">304</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"HEAD"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lastModified <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLastModified</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">maybeSetLastModified</span><span class="token punctuation">(</span>resp<span class="token punctuation">,</span> lastModified<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doHead</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"PUT"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPut</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"DELETE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doDelete</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"OPTIONS"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doOptions</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"TRACE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doTrace</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> errMsg <span class="token operator">=</span> lStrings<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"http.method_not_implemented"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> errArgs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>method<span class="token punctuation">}</span><span class="token punctuation">;</span>        errMsg <span class="token operator">=</span> <span class="token class-name">MessageFormat</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>errMsg<span class="token punctuation">,</span> errArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span><span class="token number">501</span><span class="token punctuation">,</span> errMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十八、HttpServletRequest接口"><a href="#十八、HttpServletRequest接口" class="headerlink" title="十八、HttpServletRequest接口"></a>十八、HttpServletRequest接口</h2><p>HttpServletRequest表示Http环境中的Servlet请求。它扩展于javax.servlet.ServletRequest接口，并添加了几个方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> <span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回请求上下文的请求URI部分</span><span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回一个cookie对象数组</span><span class="token class-name">String</span> <span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回指定HTTP标题的值</span><span class="token class-name">String</span> <span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回生成这个请求HTTP的方法名称</span><span class="token class-name">String</span> <span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回请求URL中的查询字符串</span><span class="token class-name">HttpSession</span> <span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回与这个请求相关的会话对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十九、HttpServletRequest内封装的请求"><a href="#十九、HttpServletRequest内封装的请求" class="headerlink" title="十九、HttpServletRequest内封装的请求"></a>十九、HttpServletRequest内封装的请求</h2><p>因为Request代表请求，所以我们可以通过该对象分别获得HTTP请求的请求行，请求头和请求体。</p><p>  关于HTTP具体的详细解释，可以参考我的另一篇博文：JavaWeb——HTTP。</p><p><img src="https://img-blog.csdn.net/20180513130638615?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE5NzgyMDE5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><h2 id="二十、通过request获得请求行"><a href="#二十、通过request获得请求行" class="headerlink" title="二十、通过request获得请求行"></a>二十、通过request获得请求行</h2><p>假设查询字符串为：username=zhangsan&amp;password=123</p><p>获得客户端的请求方式：String getMethod()</p><p>获得请求的资源：</p><p>String getRequestURI()</p><p>StringBuffer getRequestURL()</p><p>String getContextPath() —web应用的名称</p><p>String getQueryString() —- get提交url地址后的参数字符串</p><h2 id="二十一、通过request获得请求头"><a href="#二十一、通过request获得请求头" class="headerlink" title="二十一、通过request获得请求头"></a>二十一、通过request获得请求头</h2><p>long getDateHeader(String name)</p><p>String getHeader(String name)</p><p>Enumeration getHeaderNames()</p><p>Enumeration getHeaders(String name)</p><p>int getIntHeader(String name)</p><p>referer头的作用：执行该此访问的的来源，做防盗链</p><h2 id="二十二、通过request获得请求体"><a href="#二十二、通过request获得请求体" class="headerlink" title="二十二、通过request获得请求体"></a>二十二、通过request获得请求体</h2><p>请求体中的内容是通过post提交的请求参数，格式是：</p><p>username=zhangsan&amp;password=123&amp;hobby=football&amp;hobby=basketball</p><p>key ———————- value</p><p>username                               [zhangsan]</p><p>password                               [123]</p><p>hobby                                          [football，basketball]                                       </p><p>以上面参数为例，通过一下方法获得请求参数：</p><p>String getParameter(String name)</p><p>String[] getParameterValues(String name)</p><p>Enumeration getParameterNames()</p><p>Map&lt;String,String[]&gt; getParameterMap()</p><p>注意：get请求方式的请求参数 上述的方法一样可以获得</p><h2 id="二十三、Request乱码问题的解决方法"><a href="#二十三、Request乱码问题的解决方法" class="headerlink" title="二十三、Request乱码问题的解决方法"></a>二十三、Request乱码问题的解决方法</h2><p>在前面我们讲过，<strong>在service中使用的编码解码方式默认为：ISO-8859-1编码</strong>，但此编码并不支持中文，因此会出现乱码问题，所以我们需要手动修改编码方式为UTF-8编码，才能解决中文乱码问题，下面是发生乱码的具体细节：</p><p><img src="https://img-blog.csdn.net/20180513195355316?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE5NzgyMDE5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>解决post提交方式的乱码：request.setCharacterEncoding(“UTF-8”);</p><p> 解决get提交的方式的乱码：parameter = newString(parameter.getbytes(“iso8859-1”),”utf-8”);</p><h2 id="二十四、HttpServletResponse接口"><a href="#二十四、HttpServletResponse接口" class="headerlink" title="二十四、HttpServletResponse接口"></a>二十四、HttpServletResponse接口</h2><p>在Service API中，定义了一个HttpServletResponse接口，它继承自ServletResponse接口，专门用来封装HTTP响应消息。    由于HTTP请求消息分为状态行，响应消息头，响应消息体三部分，因此，在HttpServletResponse接口中定义了向客户端发送响应状态码，响应消息头，响应消息体的方法</p><h2 id="二十五、HttpServletResponse内封装的响应"><a href="#二十五、HttpServletResponse内封装的响应" class="headerlink" title="二十五、HttpServletResponse内封装的响应"></a>二十五、HttpServletResponse内封装的响应</h2><p><img src="https://img-blog.csdn.net/20180513203525684?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE5NzgyMDE5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><h2 id="二十六、通过Response设置响应"><a href="#二十六、通过Response设置响应" class="headerlink" title="二十六、通过Response设置响应"></a>二十六、通过Response设置响应</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">addCookie</span><span class="token punctuation">(</span><span class="token class-name">Cookie</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//给这个响应添加一个cookie</span><span class="token keyword">void</span> <span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> var1<span class="token punctuation">,</span> <span class="token class-name">String</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//给这个请求添加一个响应头</span><span class="token keyword">void</span> <span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token class-name">String</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">//发送一条响应码，讲浏览器跳转到指定的位置</span><span class="token keyword">void</span> <span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token keyword">int</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置响应行的状态码</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span><span class="token function">addIntHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token function">addDateHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">long</span> date<span class="token punctuation">)</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span><span class="token function">setDateHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">long</span> date<span class="token punctuation">)</span><span class="token function">setIntHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PrintWriter getWriter()</p><p>获得字符流，通过字符流的write(String s)方法可以将字符串设置到response   缓冲区中，随后Tomcat会将response缓冲区中的内容组装成Http响应返回给浏览器端。</p><p>ServletOutputStream getOutputStream()</p><p>获得字节流，通过该字节流的write(byte[] bytes)可以向response缓冲区中写入字节，再由Tomcat服务器将字节内容组成Http响应返回给浏览器。<br><img src="https://img-blog.csdn.net/2018051320493643?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE5NzgyMDE5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>注意：虽然response对象的getOutSream（）和getWriter（）方法都可以发送响应消息体，但是他们之间相互排斥，不可以同时使用，否则会发生异常。</p><p><img src="https://img-blog.csdn.net/2018051320525170?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE5NzgyMDE5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><h2 id="二十七、Response的乱码问题"><a href="#二十七、Response的乱码问题" class="headerlink" title="二十七、Response的乱码问题"></a>二十七、Response的乱码问题</h2><p><img src="https://img-blog.csdn.net/20180513205522756?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE5NzgyMDE5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>原因：response缓冲区的默认编码是iso8859-1，此码表中没有中文。所以需要更改response的编码方式：</p><p><img src="https://img-blog.csdn.net/20180513205620262?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE5NzgyMDE5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>通过更改response的编码方式为UTF-8，任然无法解决乱码问题，因为发送端服务端虽然改变了编码方式为UTF-8，但是接收端浏览器端仍然使用GB2312编码方式解码，还是无法还原正常的中文，因此还需要告知浏览器端使用UTF-8编码去解码。</p><p><img src="https://img-blog.csdn.net/20180513210539156?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE5NzgyMDE5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>上面通过调用两个方式分别改变服务端对于Response的编码方式以及浏览器的解码方式为同样的UTF-8编码来解决编码方式不一样发生乱码的问题。</p><p>response.setContentType(“text/html;charset=UTF-8”)这个方法包含了上面的两个方法的调用，因此在实际的开发中，只需要调用一个response.setContentType(“text/html;charset=UTF-8”)方法即可。<br><img src="https://img-blog.csdn.net/20180513210927639?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE5NzgyMDE5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p><img src="https://img-blog.csdn.net/20180513204459256?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE5NzgyMDE5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><h2 id="二十八、Response的工作流程"><a href="#二十八、Response的工作流程" class="headerlink" title="二十八、Response的工作流程"></a>二十八、Response的工作流程</h2><p><img src="https://img-blog.csdn.net/20180513204718428?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE5NzgyMDE5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><h2 id="二十九、Servlet的工作流程"><a href="#二十九、Servlet的工作流程" class="headerlink" title="二十九、Servlet的工作流程"></a>二十九、Servlet的工作流程</h2><p><img src="https://img-blog.csdn.net/20180513204808318?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE5NzgyMDE5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><h2 id="三十、编写第一个Servlet"><a href="#三十、编写第一个Servlet" class="headerlink" title="三十、编写第一个Servlet"></a>三十、编写第一个Servlet</h2><p>首先，我们来写一个简单的用户名，密码的登录界面的html文件：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/form<span class="token punctuation">"</span></span><span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该html文件在最后点击提交按钮时，把表单所有数据通过Get方式发送到/form虚拟路径下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/form<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问一下我们刚才写的这个简单的登录界面：</p><p><img src="https://img-blog.csdn.net/20180514163550574?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE5NzgyMDE5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>接下来，我们就开始写一个Servlet用来接收处理表单发送过来的请求，这个Servlet的名称就叫做FormServlet：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FormServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4186928407001085733L</span><span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>         <span class="token comment">//设置响应的编码格式为UTF-8编码，否则发生中文乱码现象</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1.获得请求方式</span>        <span class="token class-name">String</span> method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.获得请求的资源相关的内容</span>        <span class="token class-name">String</span> requestURI <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得请求URI</span>        <span class="token class-name">StringBuffer</span> requestURL <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> webName <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得应用路径（应用名称）</span>        <span class="token class-name">String</span> querryString <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得查询字符串</span>         response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1&gt;下面是获得的字符串&lt;/h1&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1&gt;method(HTTP方法):&lt;h1&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1&gt;"</span><span class="token operator">+</span>method<span class="token operator">+</span><span class="token string">"&lt;/h1&gt;&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1&gt;requestURi(请求URI）:&lt;/h1&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1&gt;"</span> <span class="token operator">+</span> requestURI <span class="token operator">+</span> <span class="token string">"&lt;/h1&gt;&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1&gt;webname(应用名称):&lt;/h1&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1&gt;"</span> <span class="token operator">+</span> webName <span class="token operator">+</span> <span class="token string">"&lt;/h1&gt;&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1&gt;querrystring(查询字符串):&lt;/h1&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1&gt;"</span> <span class="token operator">+</span> querryString <span class="token operator">+</span> <span class="token string">"&lt;/h1&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该Servlet的作用是，接收form登录表单发送过来的HTTP请求，并解析出请求中封装的一些参数，然后在回写到response响应当中去，最后在浏览器端显示。</p><p>  最后一步，我们在XML中配置好这个Servlet的映射关系：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>mapping<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>servlet<span class="token punctuation">&gt;</span></span>        <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">&gt;</span><span class="token class-name">FormServlet</span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">&gt;</span>com<span class="token punctuation">.</span>javaee<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token class-name">FormServlet</span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>mapping<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">&gt;</span><span class="token class-name">FormServlet</span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">&gt;</span><span class="token operator">/</span>form<span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">-</span>pattern<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>mapping<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来，启动tomcat，在浏览器中输入登录表单的地址：</p><p>填入用户名为：root，密码为：123,最后点击提交：</p><p><img src="https://img-blog.csdn.net/20180514171147398?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE5NzgyMDE5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>提交之后，表单数据将会发送到相应的Servlet进行处理，此时，浏览器的地址变成如下所示：</p><p><img src="https://img-blog.csdn.net/20180514171352799?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE5NzgyMDE5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p> 我们会发现，在地址栏中，多了后面的“?username=root&amp;password=123&amp;提交=提交”字符串，这其实就是我们开始填写的参数，以Get的方法发送过去，所以查询字符串会直接加在链接后面，如果采用的是Post方式则不会出现在链接中，因此，登录表单为了安全性大多采用Post方式提交。</p><p>我们来看看Servlet给我们返回了什么东西：</p><p><img src="https://img-blog.csdn.net/20180514171653913?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE5NzgyMDE5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>正如我们在Servlet中写的那样，Servlet把HTTP请求中的部分参数给解析出来了。</p><p>因此，可以再翻到上面的Servlet重新去理解一遍Servlet的工作原理，可能会有更清晰的认识。</p><h2 id="三十一、Servlet的局限性"><a href="#三十一、Servlet的局限性" class="headerlink" title="三十一、Servlet的局限性"></a>三十一、Servlet的局限性</h2><p>我们已经看到，Servlet如果需要给客户端返回数据，比如像下面这样的一个HTML文件：</p><p><img src="https://img-blog.csdn.net/20180514172209114?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE5NzgyMDE5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>Servlet内部需要这样写输出语句：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">PrintWriter writer = response.getWriter();writer.write("<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n" +        "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>\n" +        "\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n" +        "\t\t&lt;meta charset=\"UTF-8\"&gt;\n" +        "\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>标题标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n" +        "\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n" +        "\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n" +        "\t\t<span class="token comment">&lt;!--标题标签--&gt;</span>\n" +        "\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>公司简介<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>\n" +        "\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>公司简介<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>\n" +        "\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>公司简介<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>\n" +        "\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>公司简介<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>\n" +        "\t\t\n" +        "\t\t<span class="token comment">&lt;!--加入一条水平线--&gt;</span>\n" +        "\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/&gt;</span></span>\n" +        "\t\t\n" +        "\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">&gt;</span></span>公司简介<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>\n" +        "\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">&gt;</span></span>公司简介<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h7</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>\n" +        "\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h100</span><span class="token punctuation">&gt;</span></span>公司简介<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h100</span><span class="token punctuation">&gt;</span></span>\n" +        "\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n" +        "<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即一行一行的把HTML语句给用Writer输出，早期简单的网页还能应付得住，但是随着互联网的不断发展，网站的内容和功能越来越强大，一个普通的HTML文件可能就达到好几百行，如果在采用使用Servlet去一行一行的输出HTML代码的话，将会非常的繁琐并且浪费大量的时间，且在当时，出现了PHP这种可以内嵌到HTML文件的动态语言，使得制作动态网页变得异常的简单和轻松，因此大量的程序员转上了PHP语言的道路，JAVA的份额急剧减小，当时JAVA的开发者Sun公司为了解决这个问题，也开发出了自己的动态网页生成技术，使得同样可以在HTML文件里内嵌JAVA代码，这就是现在的JSP技术，关于JSP技术的具体内容，我们将留到下一节进行讲解。</p><h2 id="三十二、ServletContextListener（Servlet全局监听器）"><a href="#三十二、ServletContextListener（Servlet全局监听器）" class="headerlink" title="三十二、ServletContextListener（Servlet全局监听器）"></a>三十二、ServletContextListener（Servlet全局监听器）</h2><p>首先要说明的是，ServletContextListener是一个接口，我们随便写一个类，只要这个类实现了ServletContextListener接口，那么这个类就实现了【监听ServletContext】的功能。那么，这个神奇的接口是如何定义的呢？我们来看一下这个接口的内部情况：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">EventListener</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ServletContextListener</span> <span class="token keyword">extends</span> <span class="token class-name">EventListener</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们发现，在这个接口中只声明了两个方法，分别是void contextInitialized(ServletContextEvent var1)和void contextDestroyed(ServletContextEvent var1)方法，所以，我们很容易的就能猜测到，ServletContext的生命只有两种，分别是：</p><p>1.ServletContext初始化。（应用start时）———-&gt;Servlet容器调用void contextInitialized(ServletContextEvent var1)</p><p>2.ServletContext销毁。（应用stop时）———-&gt;Servlet容器调用 void contextDestroyed(ServletContextEvent var1)</p><p>因此，我们大概能够猜到ServletContextListener的工作机制了，当应用启动时，ServletContext进行初始化，然后Servlet容器会自动调用正在监听ServletContext的ServletContextListener的void contextInitialized(ServletContextEvent var1)方法，并向其传入一个ServletContextEvent对象。当应用停止时，ServletContext被销毁，此时Servlet容器也会自动地调用正在监听ServletContext的ServletContextListener的void contextDestroyed(ServletContextEvent var1)方法。</p><p>为了验证我们的猜测，我们来随便写一个类，并且实现ServletContextListener接口，即实现监听ServletContext的功能：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletContextEvent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletContextListener</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> servletContextEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ServletContextListener.contextInitialized方法被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> servletContextEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ServletContextListener.contextDestroyed方法被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，在web.xml中注册我们自己写的这个MyListener:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>MyListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来，让我们启动一下Tomcat，看一看会发生什么吧！控制台打印信息如下：</p><p><img src="https://img-blog.csdnimg.cn/20181222161836740.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE5NzgyMDE5,size_16,color_FFFFFF,t_70" alt="img"></p><p>我们发现，当应用启动时，ServletContextListener.contextInitialized（）方法被调用了。这其实是Servlet容器偷偷干的事情。那么，当我们停止Tomcat时，按照猜想，Servlet容器应该也会偷偷调用void contextDestroyed(ServletContextEvent var1)方法，来通知ServletContextListener监听器：ServletContext已经被销毁了。那么，事实是不是和我们猜想的一模一样呢？让我们来停止Tomcat的运行，看一看控制台的情况吧：<br>我们发现，void contextDestroyed(ServletContextEvent var1)方法确实被Servlet容器调用了。因此，我们的猜想得到了证实。</p><h2 id="三十三、【进阶】ServletContextListener在Spring中的应用"><a href="#三十三、【进阶】ServletContextListener在Spring中的应用" class="headerlink" title="三十三、【进阶】ServletContextListener在Spring中的应用"></a>三十三、【进阶】ServletContextListener在Spring中的应用</h2><p>如果基础好一点的童鞋，或者已经学过Spring框架的同学，建议阅读下面的内容，没有学过Spring也没有关系，可以先学或者学完之后再回头来看一看，Spring容器是如何借用ServletContextListener这个接口来实例化的。</p><p>首先让我们再来回顾一下ServletContext的概念，ServletContext翻译成中文叫做“Servlet上下文”或者“Servlet全局”，但是这个翻译我认为翻译的实在是有点牵强，也导致了许多的开发者不明白这个变量到底具体代表了什么。其实ServletContext就是一个“域对象”，它存在于整个应用中，并在在整个应用中有且仅有1份，它表示了当前整个应用的“状态”，你也可以理解为某个时刻的ServletContext代表了这个应用在某个时刻的“一张快照”，这张“快照”里面包含了有关应用的许多信息，应用的所有组件都可以从ServletContext获取当前应用的状态信息。ServletContext随着程序的启动而创建，随着程序的停止而销毁。通俗点说，我们可以往这个ServletContext域对象中“存东西”，然后也可以在别的地方中“取出来”。</p><p>我们知道，Spring容器可以通过：</p><p>ApplicationContext ctx=new ClassPathXmlApplicationContext(“配置文件的路径”）;</p><p>显示地实例化一个Spring IOC容器。也可以像下面一样，在web.xml中注册Spring IOC容器：</p><pre class="line-numbers language-none"><code class="language-none">&lt;listener&gt;    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;&lt;/listener&gt;&lt;context-param&gt;    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;    &lt;param-value&gt;        classpath:applicationContext.xml    &lt;/param-value&gt;&lt;/context-param&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中的监听器类【org.springframework.web.context.ContextLoaderListener】实现了ServletContextListener接口，能够监听ServletContext的生命周期中的“初始化”和“销毁”。注意，这个【org.springframework.web.context.ContextLoaderListener】监听器类当然不是我们自己写的哦，是人家Spring团队写的，我们只要拿来用就行了。当然，别忘记导入相关的Jar包。（spring-web-4.2.4.RELEASE.jar）</p><p>那么，Spring团队给我们提供的这个监听器类是如何实现：当ServletContext初始化后，Spring IOC容器也能跟着初始化的呢？怀着好奇心，让我们再来看一看【org.springframework.web.context.ContextLoaderListener】的内部实现情况吧。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletContextEvent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletContextListener</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContextLoaderListener</span> <span class="token keyword">extends</span> <span class="token class-name">ContextLoader</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ContextLoaderListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">ContextLoaderListener</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>重点关注下面这里哦！<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initWebApplicationContext</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>重点关注上面这里哦！<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">closeWebApplicationContext</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ContextCleanupListener</span><span class="token punctuation">.</span><span class="token function">cleanupAttributes</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们发现，【org.springframework.web.context.ContextLoaderListener】这个类实现了ServletContextListener接口中的两个方法，其中，当ServletContext初始化后， public void contextInitialized(ServletContextEvent event)方法被调用，接下来执行initWebApplicationContext(event.getServletContext())方法，但是我们发现这个方法并没有在这个类中声明，因此，我们再看一下其父类中是如何声明的：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">WebApplicationContext</span> <span class="token function">initWebApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>servletContext<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span><span class="token punctuation">.</span>ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Cannot initialize context because there is already a root application context present - check whether you have multiple ContextLoader* definitions in your web.xml!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token class-name">Log</span> logger <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">ContextLoader</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         servletContext<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Initializing Spring root WebApplicationContext"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Root WebApplicationContext: initialization started"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>           <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">try</span> <span class="token punctuation">{</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createWebApplicationContext</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurableWebApplicationContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token class-name">ConfigurableWebApplicationContext</span> cwac <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ConfigurableWebApplicationContext</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">;</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cwac<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token keyword">if</span> <span class="token punctuation">(</span>cwac<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                         <span class="token class-name">ApplicationContext</span> parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadParentContext</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>                         cwac<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">configureAndRefreshWebApplicationContext</span><span class="token punctuation">(</span>cwac<span class="token punctuation">,</span> servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>       servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span><span class="token punctuation">.</span>ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ClassLoader</span> ccl <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ccl <span class="token operator">==</span> <span class="token class-name">ContextLoader</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               currentContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ccl <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                currentContextPerThread<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ccl<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Published root WebApplicationContext as ServletContext attribute with name ["</span> <span class="token operator">+</span> <span class="token class-name">WebApplicationContext</span><span class="token punctuation">.</span>ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">long</span> elapsedTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">;</span>                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Root WebApplicationContext: initialization completed in "</span> <span class="token operator">+</span> elapsedTime <span class="token operator">+</span> <span class="token string">" ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> var8<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Context initialization failed"</span><span class="token punctuation">,</span> var8<span class="token punctuation">)</span><span class="token punctuation">;</span>     servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span><span class="token punctuation">.</span>ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE<span class="token punctuation">,</span> var8<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> var8<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span> var9<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Context initialization failed"</span><span class="token punctuation">,</span> var9<span class="token punctuation">)</span><span class="token punctuation">;</span>            servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span><span class="token punctuation">.</span>ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE<span class="token punctuation">,</span> var9<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> var9<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析到这一步，我们发现Spring容器在这个方法中被实例化了。接下来，就让我们整理一下整体的思路：</p><p>当Servlet容器启动时，ServletContext对象被初始化，然后Servlet容器调用web.xml中注册的监听器的</p><p>public void contextInitialized(ServletContextEvent event)</p><p>方法，而在监听器中，调用了this.initWebApplicationContext(event.getServletContext())方法，在这个方法中实例化了Spring IOC容器。即ApplicationContext对象。</p><p>因此，当ServletContext创建时我们可以创建applicationContext对象，当ServletContext销毁时，我们可以销毁applicationContext对象。这样applicationContext就和ServletContext“共生死了”。<br>————————————————<br>版权声明：本文为CSDN博主「刘扬俊」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_19782019/article/details/80292110">https://blog.csdn.net/qq_19782019/article/details/80292110</a></p>]]></content>
    
    
    <summary type="html">JavaWeb——Servlet</summary>
    
    
    
    <category term="java" scheme="https://13592491893.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://13592491893.github.io/tags/java/"/>
    
    <category term="web" scheme="https://13592491893.github.io/tags/web/"/>
    
    <category term="servlet" scheme="https://13592491893.github.io/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>SQL语法</title>
    <link href="https://13592491893.github.io/posts/62230.html"/>
    <id>https://13592491893.github.io/posts/62230.html</id>
    <published>2021-05-20T16:00:00.000Z</published>
    <updated>2021-12-29T03:19:25.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL语法"><a href="#SQL语法" class="headerlink" title="SQL语法"></a>SQL语法</h1><h2 id="一、视图"><a href="#一、视图" class="headerlink" title="一、视图"></a>一、视图</h2><h3 id="1-sqlserver"><a href="#1-sqlserver" class="headerlink" title="1. sqlserver:"></a>1. sqlserver:</h3><h4 id="a-sys-sh-rzp-item-mate-view"><a href="#a-sys-sh-rzp-item-mate-view" class="headerlink" title="a.sys_sh_rzp_item_mate_view:"></a>a.sys_sh_rzp_item_mate_view:</h4>   <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> a<span class="token punctuation">.</span>EnterpriseId<span class="token punctuation">,</span>b<span class="token punctuation">.</span>ItemCode<span class="token punctuation">,</span>c<span class="token punctuation">.</span>ItemCode mateItemCode<span class="token punctuation">,</span>a<span class="token punctuation">.</span>MateItemTypeCode<span class="token punctuation">,</span>a<span class="token punctuation">.</span>MateItemTypeName<span class="token punctuation">,</span>a<span class="token punctuation">.</span>mateitemweight<span class="token punctuation">,</span>a<span class="token punctuation">.</span>DisPlayOrder<span class="token punctuation">,</span>a<span class="token punctuation">.</span>IsWeight<span class="token punctuation">,</span>a<span class="token punctuation">.</span>PreciseScope<span class="token punctuation">,</span>a<span class="token punctuation">.</span>MateItemTime<span class="token punctuation">,</span>a<span class="token punctuation">.</span>VersionCode<span class="token punctuation">,</span>a<span class="token punctuation">.</span>VersionName<span class="token punctuation">,</span>d<span class="token punctuation">.</span>OrgCode<span class="token punctuation">,</span>a<span class="token punctuation">.</span>IsEnabled<span class="token punctuation">,</span>a<span class="token punctuation">.</span>IsUsed<span class="token punctuation">,</span>a<span class="token punctuation">.</span>IsRepeat<span class="token punctuation">,</span>a<span class="token punctuation">.</span>IsWhole<span class="token punctuation">,</span>a<span class="token punctuation">.</span>IsUseBag<span class="token punctuation">,</span>a<span class="token punctuation">.</span>UseBagNumber<span class="token keyword">FROM</span> dbo<span class="token punctuation">.</span>sys_sh_rzp_item_mate a<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> dbo<span class="token punctuation">.</span>sys_sh_item_master b <span class="token keyword">ON</span> b<span class="token punctuation">.</span>EnterpriseId <span class="token operator">=</span> a<span class="token punctuation">.</span>EnterpriseId <span class="token operator">AND</span> b<span class="token punctuation">.</span>ItemId<span class="token operator">=</span>a<span class="token punctuation">.</span>ItemId<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> sys_sh_item_master c <span class="token keyword">ON</span> c<span class="token punctuation">.</span>EnterpriseId<span class="token operator">=</span>a<span class="token punctuation">.</span>EnterpriseId <span class="token operator">AND</span> c<span class="token punctuation">.</span>ItemId<span class="token operator">=</span>a<span class="token punctuation">.</span>MateItemId<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> dbo<span class="token punctuation">.</span>sys_sh_org d <span class="token keyword">ON</span> d<span class="token punctuation">.</span>EnterpriseId<span class="token operator">=</span>a<span class="token punctuation">.</span>EnterpriseId <span class="token operator">AND</span> d<span class="token punctuation">.</span>OrgId<span class="token operator">=</span>a<span class="token punctuation">.</span>OrgId<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="b-sys-sh-rzp-material-contrast-view"><a href="#b-sys-sh-rzp-material-contrast-view" class="headerlink" title="b.sys_sh_rzp_material_contrast_view:"></a>b.sys_sh_rzp_material_contrast_view:</h4>   <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> c<span class="token punctuation">.</span>EnterpriseId<span class="token punctuation">,</span>       c<span class="token punctuation">.</span>ExItemId<span class="token punctuation">,</span>   exitem<span class="token punctuation">.</span>ItemCode ExItemCode<span class="token punctuation">,</span>   exitem<span class="token punctuation">.</span>ItemName ExItemName<span class="token punctuation">,</span>       c<span class="token punctuation">.</span>ItemId<span class="token punctuation">,</span>   item<span class="token punctuation">.</span>ItemCode<span class="token punctuation">,</span>   item<span class="token punctuation">.</span>ItemName<span class="token punctuation">,</span>       c<span class="token punctuation">.</span>ItemType<span class="token punctuation">,</span>       c<span class="token punctuation">.</span>DisPlayOrder<span class="token punctuation">,</span>       c<span class="token punctuation">.</span>OrgId<span class="token punctuation">,</span>   o<span class="token punctuation">.</span>OrgCode<span class="token punctuation">,</span>   o<span class="token punctuation">.</span>OrgName<span class="token punctuation">,</span>       c<span class="token punctuation">.</span>CreateUserCode<span class="token punctuation">,</span>       c<span class="token punctuation">.</span>CreateUserName<span class="token punctuation">,</span>       c<span class="token punctuation">.</span>CreateDateTime<span class="token punctuation">,</span>       c<span class="token punctuation">.</span>EditUserCode<span class="token punctuation">,</span>       c<span class="token punctuation">.</span>EditUserName<span class="token punctuation">,</span>       c<span class="token punctuation">.</span>EditDateTime <span class="token keyword">FROM</span> sys_sh_rzp_material_contrast c<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> sys_sh_item_master exitem <span class="token keyword">ON</span> exitem<span class="token punctuation">.</span>EnterpriseId <span class="token operator">=</span> c<span class="token punctuation">.</span>EnterpriseId <span class="token operator">AND</span> exitem<span class="token punctuation">.</span>ItemId <span class="token operator">=</span> c<span class="token punctuation">.</span>ExItemId<span class="token keyword">LEFT</span>  <span class="token keyword">JOIN</span> sys_sh_item_master item <span class="token keyword">ON</span> item<span class="token punctuation">.</span>EnterpriseId<span class="token operator">=</span>c<span class="token punctuation">.</span>EnterpriseId <span class="token operator">AND</span> item<span class="token punctuation">.</span>ItemId <span class="token operator">=</span> c<span class="token punctuation">.</span>ItemId<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> dbo<span class="token punctuation">.</span>sys_sh_org o <span class="token keyword">ON</span> o<span class="token punctuation">.</span>EnterpriseId<span class="token operator">=</span>c<span class="token punctuation">.</span>EnterpriseId <span class="token operator">AND</span> o<span class="token punctuation">.</span>OrgId<span class="token operator">=</span>c<span class="token punctuation">.</span>OrgId<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、函数"><a href="#二、函数" class="headerlink" title="二、函数"></a>二、函数</h2><h3 id="1-sqlserver-1"><a href="#1-sqlserver-1" class="headerlink" title="1. sqlserver"></a>1. sqlserver</h3><h4 id="a-funGetChildItemType"><a href="#a-funGetChildItemType" class="headerlink" title="a.funGetChildItemType:"></a>a.funGetChildItemType:</h4>   <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- =============================================</span><span class="token comment">-- Author:LH</span><span class="token comment">-- Create date: 2020-12-09</span><span class="token comment">-- Description:根据类别代码获取所有子类别</span><span class="token comment">--SELECT * FROM funGetChildItemType(3,'RZP')</span><span class="token comment">-- =============================================</span><span class="token keyword">ALTER</span> <span class="token keyword">FUNCTION</span> <span class="token punctuation">[</span>dbo<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>funGetChildItemType<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token variable">@enterpriseId</span> <span class="token keyword">INTEGER</span><span class="token punctuation">,</span><span class="token comment">---企业ID</span><span class="token variable">@ParentItemTypeCode</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token comment">---类别代码</span><span class="token punctuation">)</span><span class="token keyword">RETURNS</span> <span class="token keyword">TABLE</span> <span class="token keyword">AS</span><span class="token keyword">RETURN</span> <span class="token punctuation">(</span><span class="token keyword">WITH</span> cr<span class="token keyword">AS</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> c<span class="token punctuation">.</span>EnterpriseId<span class="token punctuation">,</span>c<span class="token punctuation">.</span>ItemTypeId<span class="token punctuation">,</span>c<span class="token punctuation">.</span>ItemTypeCode<span class="token punctuation">,</span>c<span class="token punctuation">.</span>ItemTypeName<span class="token keyword">FROM</span> sys_sh_item_type c<span class="token keyword">WHERE</span> c<span class="token punctuation">.</span>EnterpriseId<span class="token operator">=</span><span class="token variable">@enterpriseId</span> <span class="token operator">AND</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> f_split<span class="token punctuation">(</span><span class="token variable">@ParentItemTypeCode</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">)</span> f <span class="token keyword">WHERE</span> f<span class="token punctuation">.</span>item <span class="token operator">=</span> c<span class="token punctuation">.</span>ItemTypeCode <span class="token punctuation">)</span><span class="token keyword">UNION</span> <span class="token keyword">ALL</span><span class="token keyword">SELECT</span> c<span class="token punctuation">.</span>EnterpriseId<span class="token punctuation">,</span>c<span class="token punctuation">.</span>ItemTypeId<span class="token punctuation">,</span>c<span class="token punctuation">.</span>ItemTypeCode<span class="token punctuation">,</span>c<span class="token punctuation">.</span>ItemTypeName<span class="token keyword">FROM</span> sys_sh_item_type c<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> cr <span class="token keyword">ON</span> cr<span class="token punctuation">.</span>EnterpriseId <span class="token operator">=</span> c<span class="token punctuation">.</span>EnterpriseId <span class="token operator">AND</span> c<span class="token punctuation">.</span>ParentItemTypeId<span class="token operator">=</span>cr<span class="token punctuation">.</span>ItemTypeId<span class="token punctuation">)</span><span class="token keyword">SELECT</span> cr<span class="token punctuation">.</span>EnterpriseId<span class="token punctuation">,</span>ItemTypeId<span class="token punctuation">,</span>ItemTypeCode<span class="token punctuation">,</span>ItemTypeName <span class="token keyword">FROM</span> cr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   使用方法：在sql语句里直接使用</p><p>   <img src="SQL%E8%AF%AD%E6%B3%95.assets/image-20210810154630048.png" alt="image-20210810154630048"></p><h4 id="b-proc-commitflight-交班"><a href="#b-proc-commitflight-交班" class="headerlink" title="b.proc_commitflight:交班"></a>b.proc_commitflight:交班</h4>   <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*Description： 生成交接班记录Create   By：LHCreate Date：2021-06-02Version:2021.7.6.1EXEC proc_commitflight '2021/06/09','bc03','前夜','999','管理员'*/</span><span class="token keyword">ALTER</span> <span class="token keyword">PROC</span> proc_commitflight<span class="token punctuation">(</span>    <span class="token variable">@agitatedate</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'2021-06-02'</span><span class="token punctuation">,</span> <span class="token comment">--工作日期</span>    <span class="token variable">@flightscode</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'bc02'</span><span class="token punctuation">,</span> <span class="token comment">--班次代码</span>    <span class="token variable">@flightsname</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'白班'</span><span class="token punctuation">,</span> <span class="token comment">--班次名称</span><span class="token variable">@usercode</span>    <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">@username</span>    <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">@warehousecode</span>  <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">@enterpriseId</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">@resultnum</span> <span class="token keyword">INT</span><span class="token operator">=</span><span class="token number">0</span> OUTPUT    <span class="token punctuation">)</span><span class="token keyword">AS</span>   <span class="token keyword">BEGIN</span><span class="token keyword">BEGIN</span> <span class="token keyword">TRAN</span> <span class="token keyword">SET</span>   NOCOUNT   <span class="token keyword">ON</span><span class="token keyword">SET</span>   ANSI_WARNINGS   <span class="token keyword">OFF</span><span class="token keyword">DECLARE</span> <span class="token variable">@foreflightscode</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">''</span><span class="token keyword">DECLARE</span> <span class="token variable">@foreagitatedate</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token variable">@agitatedate</span><span class="token keyword">SELECT</span> <span class="token keyword">TOP</span> <span class="token number">1</span> <span class="token variable">@foreagitatedate</span><span class="token operator">=</span>agitateDate<span class="token punctuation">,</span><span class="token variable">@foreflightscode</span><span class="token operator">=</span>flightscode <span class="token keyword">FROM</span> sys_sh_rzp_material_flightsstock  <span class="token keyword">WHERE</span> warehouseCode<span class="token operator">=</span><span class="token variable">@warehousecode</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> agitateDate <span class="token keyword">DESC</span><span class="token punctuation">,</span>flightscode <span class="token keyword">DESC</span> <span class="token comment">/*IF @flightscode = 'bc02'SET @foreflightscode='bc01'ELSE IF @flightscode = 'bc03'BEGINSET @foreflightscode='bc02'ENDELSE IF @flightscode = 'bc01'BEGINSET @foreflightscode='bc03'SET @foreagitatedate=CONVERT(varchar(10),DATEADD(DAY,-1,CAST(@agitatedate as DATE)),111)END*/</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token comment">#inventory(warehousecode VARCHAR(20),warehousename VARCHAR(20),flightscode  VARCHAR(20),flightsname  VARCHAR(20),</span>itemcode  <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>itemname  <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>firstweight <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>inweight  <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>outweight <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>stockweight  <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nowweight  <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">---库存盘点 期初</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token comment">#inventory(warehousecode,warehousename,flightscode,flightsname,itemcode,itemname,</span>firstweight<span class="token punctuation">,</span>inweight<span class="token punctuation">,</span>outweight<span class="token punctuation">,</span>stockweight<span class="token punctuation">,</span>nowweight<span class="token punctuation">)</span><span class="token keyword">SELECT</span> warehousecode<span class="token punctuation">,</span>warehousename<span class="token punctuation">,</span><span class="token variable">@flightscode</span> flightscode<span class="token punctuation">,</span><span class="token variable">@flightsname</span> flightsname<span class="token punctuation">,</span>itemcode<span class="token punctuation">,</span>itemname<span class="token punctuation">,</span>ISNULL<span class="token punctuation">(</span>stockweight<span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">)</span> firstweight<span class="token punctuation">,</span><span class="token number">0.0000</span> inweight<span class="token punctuation">,</span><span class="token number">0.0000</span> outweight<span class="token punctuation">,</span><span class="token number">0.0000</span> stockweight<span class="token punctuation">,</span><span class="token number">0.0000</span> nowweight <span class="token keyword">FROM</span> sys_sh_rzp_material_flightsstock m<span class="token keyword">WHERE</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token keyword">FROM</span> sys_sh_rzp_material_contrast_view c <span class="token keyword">WHERE</span> c<span class="token punctuation">.</span>EnterpriseId<span class="token operator">=</span>m<span class="token punctuation">.</span>EnterpriseId <span class="token operator">AND</span> c<span class="token punctuation">.</span>itemtype<span class="token operator">=</span><span class="token string">'Z'</span> <span class="token operator">AND</span> c<span class="token punctuation">.</span>exitemcode<span class="token operator">=</span>m<span class="token punctuation">.</span>itemcode<span class="token punctuation">)</span> <span class="token operator">AND</span> EnterpriseId<span class="token operator">=</span><span class="token variable">@enterpriseId</span> <span class="token operator">AND</span> agitatedate<span class="token operator">=</span><span class="token variable">@foreagitatedate</span> <span class="token operator">AND</span> flightscode<span class="token operator">=</span><span class="token variable">@foreflightscode</span> <span class="token operator">AND</span> warehouseCode<span class="token operator">=</span><span class="token variable">@warehousecode</span> <span class="token operator">AND</span>  ISNULL<span class="token punctuation">(</span>stockweight<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token comment">--原料接收 入库</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token comment">#inventory(warehousecode,warehousename,flightscode,flightsname,itemcode,itemname,</span>firstweight<span class="token punctuation">,</span>inweight<span class="token punctuation">,</span>outweight<span class="token punctuation">,</span>stockweight<span class="token punctuation">,</span>nowweight<span class="token punctuation">)</span><span class="token keyword">SELECT</span>  i<span class="token punctuation">.</span>warehouseCode<span class="token punctuation">,</span>i<span class="token punctuation">.</span>warehousename<span class="token punctuation">,</span>d<span class="token punctuation">.</span>flightscode<span class="token punctuation">,</span>d<span class="token punctuation">.</span>flightsname<span class="token punctuation">,</span>d<span class="token punctuation">.</span>itemCode<span class="token punctuation">,</span>d<span class="token punctuation">.</span>ItemName<span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>ISNULL<span class="token punctuation">(</span>d<span class="token punctuation">.</span>RealWeight<span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token keyword">FROM</span> sys_sh_rzp_material_incept_detail d<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> sys_sh_rzp_material_incept i <span class="token keyword">ON</span> i<span class="token punctuation">.</span>EnterpriseId <span class="token operator">=</span> d<span class="token punctuation">.</span>EnterpriseId <span class="token operator">AND</span> i<span class="token punctuation">.</span>seq <span class="token operator">=</span> d<span class="token punctuation">.</span>seq<span class="token keyword">WHERE</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token keyword">FROM</span> sys_sh_rzp_material_contrast_view c <span class="token keyword">WHERE</span> c<span class="token punctuation">.</span>EnterpriseId<span class="token operator">=</span>d<span class="token punctuation">.</span>EnterpriseId <span class="token operator">AND</span> c<span class="token punctuation">.</span>itemtype<span class="token operator">=</span><span class="token string">'Z'</span> <span class="token operator">AND</span> c<span class="token punctuation">.</span>exitemcode<span class="token operator">=</span>d<span class="token punctuation">.</span>itemcode<span class="token punctuation">)</span> <span class="token operator">AND</span>d<span class="token punctuation">.</span>EnterpriseId<span class="token operator">=</span><span class="token variable">@enterpriseId</span> <span class="token operator">AND</span> d<span class="token punctuation">.</span>agitatedate<span class="token operator">=</span><span class="token variable">@agitatedate</span> <span class="token operator">AND</span> d<span class="token punctuation">.</span>flightscode<span class="token operator">=</span><span class="token variable">@flightscode</span> <span class="token operator">AND</span> i<span class="token punctuation">.</span>warehouseCode<span class="token operator">=</span><span class="token variable">@warehousecode</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> i<span class="token punctuation">.</span>warehousecode<span class="token punctuation">,</span>i<span class="token punctuation">.</span>warehousename<span class="token punctuation">,</span>d<span class="token punctuation">.</span>flightscode<span class="token punctuation">,</span>d<span class="token punctuation">.</span>flightsname<span class="token punctuation">,</span>d<span class="token punctuation">.</span>itemCode<span class="token punctuation">,</span>d<span class="token punctuation">.</span>ItemName<span class="token comment">--原料移库 出库</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token comment">#inventory(warehousecode,warehousename,flightscode,flightsname,itemcode,itemname,</span>firstweight<span class="token punctuation">,</span>inweight<span class="token punctuation">,</span>outweight<span class="token punctuation">,</span>stockweight<span class="token punctuation">,</span>nowweight<span class="token punctuation">)</span><span class="token keyword">SELECT</span>  OutWareHouseCode<span class="token punctuation">,</span>OutWareHouseName<span class="token punctuation">,</span>flightscode<span class="token punctuation">,</span>flightsname<span class="token punctuation">,</span>itemCode<span class="token punctuation">,</span>ItemName<span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>ISNULL<span class="token punctuation">(</span>netweight<span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token keyword">FROM</span> sys_sh_rzp_materialmove m<span class="token keyword">WHERE</span> isDown<span class="token operator">!=</span><span class="token string">'Y'</span> <span class="token operator">AND</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token keyword">FROM</span> sys_sh_rzp_material_contrast_view c <span class="token keyword">WHERE</span> c<span class="token punctuation">.</span>EnterpriseId<span class="token operator">=</span>m<span class="token punctuation">.</span>EnterpriseId <span class="token operator">AND</span> c<span class="token punctuation">.</span>itemtype<span class="token operator">=</span><span class="token string">'Z'</span> <span class="token operator">AND</span> c<span class="token punctuation">.</span>exitemcode<span class="token operator">=</span>m<span class="token punctuation">.</span>itemcode<span class="token punctuation">)</span> <span class="token operator">AND</span> EnterpriseId<span class="token operator">=</span><span class="token variable">@enterpriseId</span> <span class="token operator">AND</span> agitatedate<span class="token operator">=</span><span class="token variable">@agitatedate</span> <span class="token operator">AND</span> flightscode<span class="token operator">=</span><span class="token variable">@flightscode</span> <span class="token operator">AND</span> OutWareHouseCode<span class="token operator">=</span><span class="token variable">@warehousecode</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> OutWareHouseCode<span class="token punctuation">,</span>OutWareHouseName<span class="token punctuation">,</span>flightscode<span class="token punctuation">,</span>flightsname<span class="token punctuation">,</span>itemCode<span class="token punctuation">,</span>ItemName<span class="token comment">--原料移库 入库</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token comment">#inventory(warehousecode,warehousename,flightscode,flightsname,itemcode,itemname,</span>firstweight<span class="token punctuation">,</span>inweight<span class="token punctuation">,</span>outweight<span class="token punctuation">,</span>stockweight<span class="token punctuation">,</span>nowweight<span class="token punctuation">)</span><span class="token keyword">SELECT</span>  InWareHouseCode<span class="token punctuation">,</span>InWareHouseName<span class="token punctuation">,</span>flightscode<span class="token punctuation">,</span>flightsname<span class="token punctuation">,</span>itemCode<span class="token punctuation">,</span>ItemName<span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>ISNULL<span class="token punctuation">(</span>netweight<span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token keyword">FROM</span> sys_sh_rzp_materialmove m<span class="token keyword">WHERE</span> isDown<span class="token operator">!=</span><span class="token string">'Y'</span> <span class="token operator">AND</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token keyword">FROM</span> sys_sh_rzp_material_contrast_view c <span class="token keyword">WHERE</span> c<span class="token punctuation">.</span>EnterpriseId<span class="token operator">=</span>m<span class="token punctuation">.</span>EnterpriseId <span class="token operator">AND</span> c<span class="token punctuation">.</span>itemtype<span class="token operator">=</span><span class="token string">'Z'</span> <span class="token operator">AND</span> c<span class="token punctuation">.</span>exitemcode<span class="token operator">=</span>m<span class="token punctuation">.</span>itemcode<span class="token punctuation">)</span> <span class="token operator">AND</span> EnterpriseId<span class="token operator">=</span><span class="token variable">@enterpriseId</span> <span class="token operator">AND</span> agitatedate<span class="token operator">=</span><span class="token variable">@agitatedate</span> <span class="token operator">AND</span> flightscode<span class="token operator">=</span><span class="token variable">@flightscode</span> <span class="token operator">AND</span> issign<span class="token operator">=</span><span class="token string">'Y'</span>  <span class="token operator">AND</span> InWareHouseCode<span class="token operator">=</span><span class="token variable">@warehousecode</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> InWareHouseCode<span class="token punctuation">,</span>InWareHouseName<span class="token punctuation">,</span>flightscode<span class="token punctuation">,</span>flightsname<span class="token punctuation">,</span>itemCode<span class="token punctuation">,</span>ItemName<span class="token comment">--原料销售 出库</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token comment">#inventory(warehousecode,warehousename,flightscode,flightsname,itemcode,itemname,</span>firstweight<span class="token punctuation">,</span>inweight<span class="token punctuation">,</span>outweight<span class="token punctuation">,</span>stockweight<span class="token punctuation">,</span>nowweight<span class="token punctuation">)</span><span class="token keyword">SELECT</span>  warehousecode<span class="token punctuation">,</span>warehousename<span class="token punctuation">,</span>flightscode<span class="token punctuation">,</span>flightsname<span class="token punctuation">,</span>itemCode<span class="token punctuation">,</span>ItemName<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>ISNULL<span class="token punctuation">(</span>netweight<span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token keyword">FROM</span> sys_sh_rzp_materialsale m<span class="token keyword">WHERE</span>  <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token keyword">FROM</span> sys_sh_rzp_material_contrast_view c <span class="token keyword">WHERE</span> c<span class="token punctuation">.</span>EnterpriseId<span class="token operator">=</span>m<span class="token punctuation">.</span>EnterpriseId <span class="token operator">AND</span> c<span class="token punctuation">.</span>itemtype<span class="token operator">=</span><span class="token string">'Z'</span> <span class="token operator">AND</span> c<span class="token punctuation">.</span>exitemcode<span class="token operator">=</span>m<span class="token punctuation">.</span>itemcode<span class="token punctuation">)</span> <span class="token operator">AND</span> EnterpriseId<span class="token operator">=</span><span class="token variable">@enterpriseId</span> <span class="token operator">AND</span> agitatedate<span class="token operator">=</span><span class="token variable">@agitatedate</span> <span class="token operator">AND</span> flightscode<span class="token operator">=</span><span class="token variable">@flightscode</span>  <span class="token operator">AND</span> warehousecode<span class="token operator">=</span><span class="token variable">@warehousecode</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> warehousecode<span class="token punctuation">,</span>warehousename<span class="token punctuation">,</span>flightscode<span class="token punctuation">,</span>flightsname<span class="token punctuation">,</span>itemCode<span class="token punctuation">,</span>ItemName<span class="token comment">--原料领用 出库</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token comment">#inventory(warehousecode,warehousename,flightscode,flightsname,itemcode,itemname,</span>firstweight<span class="token punctuation">,</span>inweight<span class="token punctuation">,</span>outweight<span class="token punctuation">,</span>stockweight<span class="token punctuation">,</span>nowweight<span class="token punctuation">)</span><span class="token keyword">SELECT</span>  warehousecode<span class="token punctuation">,</span>warehousename<span class="token punctuation">,</span>flightscode<span class="token punctuation">,</span>flightsname<span class="token punctuation">,</span>itemCode<span class="token punctuation">,</span>ItemName<span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>ISNULL<span class="token punctuation">(</span>InputWeight<span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token keyword">FROM</span> sys_sh_rzp_material_xinput <span class="token keyword">WHERE</span> EnterpriseId<span class="token operator">=</span><span class="token variable">@enterpriseId</span> <span class="token operator">AND</span> agitatedate<span class="token operator">=</span><span class="token variable">@agitatedate</span> <span class="token operator">AND</span> flightscode<span class="token operator">=</span><span class="token variable">@flightscode</span>  <span class="token operator">AND</span> warehousecode<span class="token operator">=</span><span class="token variable">@warehousecode</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> warehousecode<span class="token punctuation">,</span>warehousename<span class="token punctuation">,</span>flightscode<span class="token punctuation">,</span>flightsname<span class="token punctuation">,</span>itemCode<span class="token punctuation">,</span>ItemName<span class="token comment">--盘点库存</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token comment">#inventory(warehousecode,warehousename,flightscode,flightsname,itemcode,itemname,</span>firstweight<span class="token punctuation">,</span>inweight<span class="token punctuation">,</span>outweight<span class="token punctuation">,</span>stockweight<span class="token punctuation">,</span>nowweight<span class="token punctuation">)</span><span class="token keyword">SELECT</span>  warehousecode<span class="token punctuation">,</span>warehousename<span class="token punctuation">,</span><span class="token variable">@flightscode</span><span class="token punctuation">,</span><span class="token variable">@flightsname</span><span class="token punctuation">,</span>itemCode<span class="token punctuation">,</span>ItemName<span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>ISNULL<span class="token punctuation">(</span>qtyweight<span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token keyword">FROM</span> dbo<span class="token punctuation">.</span>sys_sh_rzp_inventory_pda m<span class="token keyword">WHERE</span> <span class="token punctuation">(</span>iscancel <span class="token operator">IS</span> <span class="token boolean">NULL</span> <span class="token operator">OR</span> iscancel<span class="token operator">&lt;&gt;</span><span class="token string">'Y'</span><span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token keyword">FROM</span> sys_sh_rzp_material_contrast_view c <span class="token keyword">WHERE</span> c<span class="token punctuation">.</span>EnterpriseId<span class="token operator">=</span>m<span class="token punctuation">.</span>EnterpriseId <span class="token operator">AND</span> c<span class="token punctuation">.</span>itemtype<span class="token operator">=</span><span class="token string">'Z'</span> <span class="token operator">AND</span> c<span class="token punctuation">.</span>exitemcode<span class="token operator">=</span>m<span class="token punctuation">.</span>itemcode<span class="token punctuation">)</span> <span class="token operator">AND</span> agitatedate<span class="token operator">=</span><span class="token variable">@agitatedate</span> <span class="token operator">AND</span> flightscode<span class="token operator">=</span><span class="token variable">@flightscode</span>  <span class="token operator">AND</span> warehousecode<span class="token operator">=</span><span class="token variable">@warehousecode</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> warehousecode<span class="token punctuation">,</span>warehousename<span class="token punctuation">,</span>itemCode<span class="token punctuation">,</span>ItemName<span class="token comment">--实时库存</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token comment">#inventory(warehousecode,warehousename,flightscode,flightsname,itemcode,itemname,</span>firstweight<span class="token punctuation">,</span>inweight<span class="token punctuation">,</span>outweight<span class="token punctuation">,</span>stockweight<span class="token punctuation">,</span>nowweight<span class="token punctuation">)</span><span class="token keyword">SELECT</span>  warehousecode<span class="token punctuation">,</span>warehousename<span class="token punctuation">,</span><span class="token variable">@flightscode</span><span class="token punctuation">,</span><span class="token variable">@flightsname</span><span class="token punctuation">,</span>itemCode<span class="token punctuation">,</span>ItemName<span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>ISNULL<span class="token punctuation">(</span>nowWeight<span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> sys_sh_rzp_materialware m<span class="token keyword">WHERE</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token keyword">FROM</span> sys_sh_rzp_material_contrast_view c <span class="token keyword">WHERE</span> c<span class="token punctuation">.</span>EnterpriseId<span class="token operator">=</span>m<span class="token punctuation">.</span>EnterpriseId <span class="token operator">AND</span> c<span class="token punctuation">.</span>itemtype<span class="token operator">=</span><span class="token string">'Z'</span> <span class="token operator">AND</span> c<span class="token punctuation">.</span>exitemcode<span class="token operator">=</span>m<span class="token punctuation">.</span>itemcode<span class="token punctuation">)</span> <span class="token operator">AND</span> EnterpriseId<span class="token operator">=</span><span class="token variable">@enterpriseId</span> <span class="token operator">AND</span>  nowweight<span class="token operator">&gt;</span><span class="token number">0</span>  <span class="token operator">AND</span> warehousecode<span class="token operator">=</span><span class="token variable">@warehousecode</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> warehousecode<span class="token punctuation">,</span>warehousename<span class="token punctuation">,</span>itemCode<span class="token punctuation">,</span>ItemName<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> sys_sh_rzp_material_flightsstock<span class="token punctuation">(</span>enterpriseId<span class="token punctuation">,</span>warehousecode<span class="token punctuation">,</span>warehousename<span class="token punctuation">,</span>agitateDate<span class="token punctuation">,</span>flightscode<span class="token punctuation">,</span>flightsname<span class="token punctuation">,</span>itemcode<span class="token punctuation">,</span>itemname<span class="token punctuation">,</span>exweight<span class="token punctuation">,</span>inweight<span class="token punctuation">,</span>outweight<span class="token punctuation">,</span>StockWeight<span class="token punctuation">,</span>theorystockweight<span class="token punctuation">,</span>usercode<span class="token punctuation">,</span>username<span class="token punctuation">,</span>entryDate<span class="token punctuation">,</span>entryTime<span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token variable">@enterpriseId</span><span class="token punctuation">,</span>warehousecode<span class="token punctuation">,</span>warehousename<span class="token punctuation">,</span><span class="token variable">@agitateDate</span><span class="token punctuation">,</span>flightscode<span class="token punctuation">,</span>flightsname<span class="token punctuation">,</span>itemcode<span class="token punctuation">,</span>itemname<span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>ISNULL<span class="token punctuation">(</span>firstweight<span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>ISNULL<span class="token punctuation">(</span>inweight<span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>ISNULL<span class="token punctuation">(</span>outweight<span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>ISNULL<span class="token punctuation">(</span>stockweight<span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>ISNULL<span class="token punctuation">(</span>nowweight<span class="token punctuation">,</span><span class="token number">0.0000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">@usercode</span><span class="token punctuation">,</span><span class="token variable">@username</span><span class="token punctuation">,</span><span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> <span class="token comment">#inventory</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> warehousecode<span class="token punctuation">,</span>warehousename<span class="token punctuation">,</span>flightscode<span class="token punctuation">,</span>flightsname<span class="token punctuation">,</span>itemCode<span class="token punctuation">,</span>ItemName<span class="token keyword">SET</span> <span class="token variable">@resultnum</span><span class="token operator">=</span>@<span class="token variable">@ROWCOUNT</span><span class="token keyword">IF</span> @<span class="token variable">@ERROR</span><span class="token operator">&lt;&gt;</span><span class="token number">0</span> <span class="token keyword">GOTO</span>  errhandle<span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token comment">#inventory</span><span class="token keyword">COMMIT</span>   <span class="token keyword">TRAN</span> errhandle:    <span class="token keyword">IF</span>   @<span class="token variable">@ERROR</span><span class="token operator">&lt;&gt;</span><span class="token number">0</span>    <span class="token keyword">BEGIN</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token comment">#inventory</span><span class="token keyword">SET</span> <span class="token variable">@resultnum</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token keyword">ROLLBACK</span>   <span class="token keyword">TRAN</span> <span class="token keyword">END</span><span class="token keyword">END</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   ​        使用方法：</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/image-20210810155014118.png" alt="image-20210810155014118"></p><h2 id="三、建DBlink"><a href="#三、建DBlink" class="headerlink" title="三、建DBlink"></a>三、建DBlink</h2><pre><code>###     1.sqlserver</code></pre><h4 id="移库同步数据"><a href="#移库同步数据" class="headerlink" title="移库同步数据"></a>移库同步数据</h4><ol><li><pre><code class="sql">EXEC sp_addlinkedserver@server='10.1.6.14',--被访问的服务器别名（习惯上直接使用目标服务器IP，或取个别名如：JOY）@srvproduct='',@provider='SQLOLEDB',@datasrc='10.1.6.14' --要访问的服务器<pre class="line-numbers language-none"><code class="language-none">2. ```sql   EXEC sp_addlinkedsrvlogin   '10.1.6.14', --被访问的服务器别名（如果上面sp_addlinkedserver中使用别名JOY，则这里也是JOY）   'false',   NULL,   'sa', --帐号   'shxxzx123!@#' --密码 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><p>建触发器</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">trigger</span> trig_move_insert<span class="token keyword">on</span> sys_sh_rzp_materialmove<span class="token keyword">after</span> <span class="token keyword">insert</span><span class="token keyword">as</span><span class="token keyword">BEGIN</span>    <span class="token keyword">declare</span> <span class="token variable">@names</span> nvarchar<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token boolean">null</span><span class="token punctuation">;</span>    <span class="token keyword">set</span> <span class="token variable">@names</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">top</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> name <span class="token keyword">from</span> dbo<span class="token punctuation">.</span>test1 <span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">desc</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token variable">@names</span><span class="token punctuation">)</span> <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span>    <span class="token keyword">begin</span>    <span class="token keyword">insert</span> <span class="token keyword">into</span> dbo<span class="token punctuation">.</span>test2<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token variable">@names</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考：<a href="https://www.cnblogs.com/vuenote/p/9765156.html">https://www.cnblogs.com/vuenote/p/9765156.html</a></p></li></ol><h2 id="四、语法"><a href="#四、语法" class="headerlink" title="四、语法"></a>四、语法</h2><h3 id="1-exists和in"><a href="#1-exists和in" class="headerlink" title="1.exists和in"></a>1.exists和in</h3><p>参考：<a href="https://www.cnblogs.com/emilyyoucan/p/7833769.html">https://www.cnblogs.com/emilyyoucan/p/7833769.html</a></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> a<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> A a <span class="token keyword">where</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> B b <span class="token keyword">where</span> a<span class="token punctuation">.</span>id<span class="token operator">=</span>b<span class="token punctuation">.</span>id<span class="token punctuation">)</span>以上查询使用了<span class="token keyword">exists</span>语句<span class="token punctuation">,</span><span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span>会执行A<span class="token punctuation">.</span>length次<span class="token punctuation">,</span>它并不缓存<span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span>结果集<span class="token punctuation">,</span>因为<span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span>结果集的内容并不重要<span class="token punctuation">,</span>重要的是结果集中是否有记录<span class="token punctuation">,</span>如果有则返回<span class="token boolean">true</span><span class="token punctuation">,</span>没有则返回<span class="token boolean">false</span><span class="token punctuation">.</span> 它的查询过程类似于以下过程List resultSet<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> Array A<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> A<span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>A<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span> {    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">exists</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span> {    <span class="token comment">//执行select 1 from B b where b.id=a.id是否有记录返回        resultSet.add(A[i]);    } } return resultSet;</span>当B表比A表数据大时适合使用<span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>因为它没有那么遍历操作<span class="token punctuation">,</span>只需要再执行一次查询就行<span class="token punctuation">.</span> 如:A表有<span class="token number">10000</span>条记录<span class="token punctuation">,</span>B表有<span class="token number">1000000</span>条记录<span class="token punctuation">,</span>那么<span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span>会执行<span class="token number">10000</span>次去判断A表中的id是否与B表中的id相等<span class="token punctuation">.</span> 如:A表有<span class="token number">10000</span>条记录<span class="token punctuation">,</span>B表有<span class="token number">100000000</span>条记录<span class="token punctuation">,</span>那么<span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span>还是执行<span class="token number">10000</span>次<span class="token punctuation">,</span>因为它只执行A<span class="token punctuation">.</span>length次<span class="token punctuation">,</span>可见B表数据越多<span class="token punctuation">,</span>越适合<span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span>发挥效果<span class="token punctuation">.</span> 再如:A表有<span class="token number">10000</span>条记录<span class="token punctuation">,</span>B表有<span class="token number">100</span>条记录<span class="token punctuation">,</span>那么<span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span>还是执行<span class="token number">10000</span>次<span class="token punctuation">,</span>还不如使用<span class="token operator">in</span><span class="token punctuation">(</span><span class="token punctuation">)</span>遍历<span class="token number">10000</span><span class="token operator">*</span><span class="token number">100</span>次<span class="token punctuation">,</span>因为<span class="token operator">in</span><span class="token punctuation">(</span><span class="token punctuation">)</span>是在内存里遍历比较<span class="token punctuation">,</span>而<span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span>需要查询数据库<span class="token punctuation">,</span>我们都知道查询数据库所消耗的性能更高<span class="token punctuation">,</span>而内存比较很快<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结论:exists()适合B表比A表数据大的情况</strong></p><p><strong>当A表数据与B表数据一样大时,in与exists效率差不多,可任选一个使用.</strong></p><h3 id="2-rownum"><a href="#2-rownum" class="headerlink" title="2.rownum"></a>2.rownum</h3><h4 id="a-sqlserver"><a href="#a-sqlserver" class="headerlink" title="a.sqlserver"></a>a.sqlserver</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">row_number函数<span class="token keyword">select</span> row_number<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> seq<span class="token punctuation">)</span> rownum <span class="token keyword">from</span> fix_sh_card<span class="token punctuation">;</span>此方法把括号里的查询结果放到变量:<span class="token keyword">temp</span> 里面<span class="token punctuation">(</span> 我也不确定是不是变量<span class="token punctuation">)</span><span class="token punctuation">,</span> 并用row_number<span class="token punctuation">(</span><span class="token punctuation">)</span>函数进行一个行号跟踪<span class="token punctuation">,</span> 再用<span class="token keyword">over</span> 函数进行一个列的排序规则<span class="token punctuation">(</span> 是这必须的<span class="token punctuation">)</span><span class="token punctuation">,</span> 并指定列名为<span class="token string">'rownum'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="b-oracle"><a href="#b-oracle" class="headerlink" title="b.oracle"></a>b.oracle</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--直接使用rownum</span><span class="token keyword">select</span> rownum<span class="token punctuation">,</span>id<span class="token punctuation">,</span>name <span class="token keyword">from</span> student <span class="token keyword">where</span> rownum<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>扩展：oracle中rownum和row_number()<br>row_number()over(partition by col1 order by col2)表示根据col1分组，在分组内部根据col2排序，而此函数计算的值就表示每组内部排序后的顺序编号（组内连续的唯一的）。 与rownum的区别在于：使用rownum进行排序的时候是先对结果集加入伪劣rownum然后再进行排序，而row_number()在包含排序从句后是先排序再计算行号码</p><p>详细查看：<a href="https://www.cnblogs.com/CandiceW/p/6869167.html">https://www.cnblogs.com/CandiceW/p/6869167.html</a></p><h3 id="3-stuff和for-xml-path"><a href="#3-stuff和for-xml-path" class="headerlink" title="3.stuff和for xml path"></a>3.stuff和for xml path</h3><p>原表数据：<img src="https://gitee.com/gsshy/picgo/raw/master/img/image-20210810182002445.png" alt="image-20210810182002445"></p><p>把isInventory分组，seq加起来用“，”隔开</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/image-20210810182118637.png" alt="image-20210810182118637"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> IsInventory<span class="token punctuation">,</span> seqs <span class="token operator">=</span> <span class="token punctuation">(</span>stuff<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token string">','</span> <span class="token operator">+</span> CAST <span class="token punctuation">(</span>seq <span class="token keyword">as</span> <span class="token keyword">varchar</span><span class="token punctuation">)</span> <span class="token keyword">from</span> fix_sh_inventory_set <span class="token keyword">where</span> IsInventory <span class="token operator">=</span> A<span class="token punctuation">.</span>IsInventory <span class="token keyword">for</span> xml path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">from</span> fix_sh_inventory_set <span class="token keyword">as</span> A <span class="token keyword">group</span> <span class="token keyword">by</span> IsInventory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解析：<br>stuff(param1, startIndex, length, param2)<br>将param1中自startIndex(SQL中都是从1开始，而非0)起，删除length个字符，然后用param2替换删掉的字符。</p><pre class="line-numbers language-none"><code class="language-none">select STUFF('abcdefg',1,0,'1234')       --结果为'1234abcdefg'  select STUFF('abcdefg',1,1,'1234')       --结果为'1234bcdefg'  select STUFF('abcdefg',2,1,'1234')       --结果为'a1234cdefg'  select STUFF('abcdefg',2,2,'1234')       --结果为'a1234defg'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>for xml path是将查询结果集以XML形式展现</p><p><code>select ',' + CAST (seq as varchar) from fix_sh_inventory_set for xml path</code></p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/image-20210810182434517.png" alt="image-20210810182434517"></p><p><strong>比上面多个括号</strong>：</p><p><code>select ',' + CAST (seq as varchar) from fix_sh_inventory_set for xml path('')</code></p><p><img src="C:\Users\45917\AppData\Roaming\Typora\typora-user-images\image-20210810182510470.png" alt="image-20210810182510470"></p><p>记住下面这个固定格式：</p><p><img src="C:\Users\45917\AppData\Roaming\Typora\typora-user-images\image-20210810182632136.png" alt="image-20210810182632136"></p><h3 id="4-union-all"><a href="#4-union-all" class="headerlink" title="4.union all"></a>4.union all</h3><p>​    union all只是合并查询结果，并不会进行去重和排序操作，在没有去重的前提下，使用union all的执行效率要比union高</p><ol><li><p><strong>union</strong>: 对两个结果集进行并集操作, 不包括重复行,相当于distinct, 同时进行默认规则的排序;</p><p><strong>union all</strong>: 对两个结果集进行并集操作, 包括重复行, 即所有的结果全部显示, 不管是不是重复;</p></li><li><p><strong>union</strong>: 会对获取的结果进行排序操作</p><p><strong>union all</strong>: 不会对获取的结果进行排序操作</p></li></ol><h3 id="5-查最大编号"><a href="#5-查最大编号" class="headerlink" title="5.查最大编号"></a>5.查最大编号</h3><p> 老语句：</p><p>   <code>SELECT IsNull(SUBSTRING(MAX(filmNo),LEN(MAX(filmNo))  ,1),0)+1 number</code></p><p>   <img src="https://gitee.com/gsshy/picgo/raw/master/img/image-20210324150630614.png" alt="image-20210324150630614"></p><p>   因为filmno是字符类型，直接用MAX函数比较最后一位值的时候永远是9大,就是最后一个’-‘后面是10或者11,用MAX函数取值的时候也是9,造成新生成的最大number一直是10</p><p>   改后的语句:</p><p>   <code>SELECT isnull(max(cast(REPLACE( SUBSTRING(filmNo, len(filmno)-1, 2) , '-', '') AS int)),0)+1 number </code></p><p>   注意：max比较的时候要用CAST函数把字符转为int</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token string">'BK'</span> <span class="token operator">+</span> <span class="token string">'3'</span> <span class="token operator">+</span> <span class="token keyword">convert</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">,</span>getdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token keyword">RIGHT</span><span class="token punctuation">(</span><span class="token string">'000'</span> <span class="token operator">+</span> CAST<span class="token punctuation">(</span>isnull<span class="token punctuation">(</span>SUBSTRING<span class="token punctuation">(</span><span class="token function">MAX</span><span class="token punctuation">(</span>inwareSeq<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token function">MAX</span><span class="token punctuation">(</span>inwareSeq<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">AS</span> nvarchar<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">from</span> fix_sh_spareparts_inware        <span class="token keyword">where</span> inwareSeq <span class="token operator">like</span> <span class="token string">'BK3210524%'</span>          <span class="token operator">and</span> enterpriseId <span class="token operator">=</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-convert"><a href="#6-convert" class="headerlink" title="6.convert"></a>6.convert</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> : <span class="token number">01</span> <span class="token number">26</span> <span class="token number">2021</span> <span class="token number">11</span>:<span class="token number">32</span>PM<span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> : <span class="token number">01</span><span class="token operator">/</span><span class="token number">26</span><span class="token operator">/</span><span class="token number">21</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> : <span class="token number">21.01</span><span class="token number">.26</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> : <span class="token number">26</span><span class="token operator">/</span><span class="token number">01</span><span class="token operator">/</span><span class="token number">21</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> : <span class="token number">26.01</span><span class="token number">.21</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> : <span class="token number">26</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">21</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> : <span class="token number">26</span> <span class="token number">01</span> <span class="token number">21</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span> : <span class="token number">01</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> : <span class="token number">23</span>:<span class="token number">35</span>:<span class="token number">25</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span> : <span class="token number">01</span> <span class="token number">26</span> <span class="token number">2021</span> <span class="token number">11</span>:<span class="token number">35</span>:<span class="token number">34</span>:<span class="token number">873</span>PM<span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> : <span class="token number">01</span><span class="token operator">-</span><span class="token number">26</span><span class="token operator">-</span><span class="token number">21</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> : <span class="token number">21</span><span class="token operator">/</span><span class="token number">01</span><span class="token operator">/</span><span class="token number">26</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span> : <span class="token number">210126</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span> : <span class="token number">26</span> <span class="token number">01</span> <span class="token number">2021</span> <span class="token number">23</span>:<span class="token number">36</span>:<span class="token number">08</span>:<span class="token number">347</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span> : <span class="token number">23</span>:<span class="token number">36</span>:<span class="token number">15</span>:<span class="token number">593</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> : <span class="token number">2021</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">23</span>:<span class="token number">36</span>:<span class="token number">22</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span> : <span class="token number">2021</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">23</span>:<span class="token number">36</span>:<span class="token number">29.990</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span> : <span class="token number">01</span><span class="token operator">/</span><span class="token number">26</span><span class="token operator">/</span><span class="token number">21</span> <span class="token number">11</span>:<span class="token number">36</span>:<span class="token number">41</span> PM<span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span> : <span class="token number">2021</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">26</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span> : <span class="token number">23</span>:<span class="token number">36</span>:<span class="token number">58</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span> : <span class="token number">2021</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">23</span>:<span class="token number">37</span>:<span class="token number">05.717</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> : <span class="token number">01</span> <span class="token number">26</span> <span class="token number">2021</span> <span class="token number">11</span>:<span class="token number">37</span>PM<span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span> : <span class="token number">01</span><span class="token operator">/</span><span class="token number">26</span><span class="token operator">/</span><span class="token number">2021</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">)</span> : <span class="token number">2021.01</span><span class="token number">.26</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">)</span> : <span class="token number">26</span><span class="token operator">/</span><span class="token number">01</span><span class="token operator">/</span><span class="token number">2021</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">)</span> : <span class="token number">26.01</span><span class="token number">.2021</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">)</span> : <span class="token number">26</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">2021</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">106</span><span class="token punctuation">)</span> : <span class="token number">26</span> <span class="token number">01</span> <span class="token number">2021</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">107</span><span class="token punctuation">)</span> : <span class="token number">01</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">2021</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">)</span> : <span class="token number">23</span>:<span class="token number">38</span>:<span class="token number">38</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">)</span> : <span class="token number">01</span> <span class="token number">26</span> <span class="token number">2021</span> <span class="token number">11</span>:<span class="token number">38</span>:<span class="token number">45</span>:<span class="token number">950</span>PM<span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">)</span> : <span class="token number">01</span><span class="token operator">-</span><span class="token number">26</span><span class="token operator">-</span><span class="token number">2021</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">)</span> : <span class="token number">2021</span><span class="token operator">/</span><span class="token number">01</span><span class="token operator">/</span><span class="token number">26</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">)</span> : <span class="token number">20210126</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">113</span><span class="token punctuation">)</span> : <span class="token number">26</span> <span class="token number">01</span> <span class="token number">2021</span> <span class="token number">23</span>:<span class="token number">39</span>:<span class="token number">18</span>:<span class="token number">693</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">)</span> : <span class="token number">23</span>:<span class="token number">39</span>:<span class="token number">25</span>:<span class="token number">183</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span> : <span class="token number">2021</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">23</span>:<span class="token number">39</span>:<span class="token number">45</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">)</span> : <span class="token number">2021</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">23</span>:<span class="token number">39</span>:<span class="token number">53.440</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">126</span><span class="token punctuation">)</span> : <span class="token number">2021</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">26</span>T23:<span class="token number">40</span>:<span class="token number">00.727</span><span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">)</span> : <span class="token number">13</span> ????? ??????? <span class="token number">1442</span> <span class="token number">11</span>:<span class="token number">40</span>:<span class="token number">07</span>:<span class="token number">847</span>PM<span class="token keyword">Select</span> <span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">131</span><span class="token punctuation">)</span> : <span class="token number">13</span><span class="token operator">/</span><span class="token number">06</span><span class="token operator">/</span><span class="token number">1442</span> <span class="token number">11</span>:<span class="token number">40</span>:<span class="token number">14</span>:<span class="token number">917</span>PM<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-cast"><a href="#7-cast" class="headerlink" title="7.cast"></a>7.cast</h3><p>语法：CAST (expression AS data_type)</p><h3 id="8-DATEADD"><a href="#8-DATEADD" class="headerlink" title="8.DATEADD"></a>8.DATEADD</h3><p>DATEADD() 函数在日期中添加或减去指定的时间间隔。<br>语法：DATEADD(datepart,number,date)<img src="https://gitee.com/gsshy/picgo/raw/master/img/image-20210811182307381.png" alt="image-20210811182307381"></p><h3 id="9-with-as"><a href="#9-with-as" class="headerlink" title="9.with as"></a>9.with as</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">with</span> cte1 <span class="token keyword">as</span> <span class="token punctuation">(</span>     <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table1 <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'abc%'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> cte2 <span class="token keyword">as</span> <span class="token punctuation">(</span>     <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table2 <span class="token keyword">where</span> id <span class="token operator">&gt;</span> <span class="token number">20</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> cte3 <span class="token keyword">as</span> <span class="token punctuation">(</span>     <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table3 <span class="token keyword">where</span> price <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token punctuation">)</span> <span class="token keyword">select</span> a<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> cte1 a<span class="token punctuation">,</span> cte2 b<span class="token punctuation">,</span> cte3 c <span class="token keyword">where</span> a<span class="token punctuation">.</span>id <span class="token operator">=</span> b<span class="token punctuation">.</span>id <span class="token operator">and</span> a<span class="token punctuation">.</span>id <span class="token operator">=</span> c<span class="token punctuation">.</span>id <span class="token comment">--CTE后面必须直接跟使用CTE的SQL语句（如select、insert、update等），否则，CTE将失效。如下面的SQL语句将无法正常使用CTE：</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-left-join一对多只保留一条结果的解决方法"><a href="#10-left-join一对多只保留一条结果的解决方法" class="headerlink" title="10.left join一对多只保留一条结果的解决方法"></a>10.left join一对多只保留一条结果的解决方法</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span>（<span class="token keyword">select</span> user_id <span class="token keyword">from</span> tabel_1）a<span class="token keyword">left</span> <span class="token keyword">join</span><span class="token punctuation">(</span><span class="token keyword">select</span> user_id <span class="token keyword">from</span> tabel_2 <span class="token keyword">group</span> <span class="token keyword">by</span> user_id<span class="token punctuation">)</span> b<span class="token keyword">on</span> a<span class="token punctuation">.</span>user_id <span class="token operator">=</span> b<span class="token punctuation">.</span>user_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">SQL语法</summary>
    
    
    
    <category term="sql" scheme="https://13592491893.github.io/categories/sql/"/>
    
    
    <category term="命令" scheme="https://13592491893.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
    <category term="sql" scheme="https://13592491893.github.io/tags/sql/"/>
    
    <category term="语法" scheme="https://13592491893.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>spring日志</title>
    <link href="https://13592491893.github.io/posts/5502.html"/>
    <id>https://13592491893.github.io/posts/5502.html</id>
    <published>2021-04-25T16:00:00.000Z</published>
    <updated>2021-12-29T03:19:25.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring日志"><a href="#spring日志" class="headerlink" title="spring日志"></a>spring日志</h1><p>今天来谈一谈日志，主要是说一说springboot的日志，因为最近在学习springboot。首先在写代码的时候，要养成记日志的习惯，这点真的很重要，因为之前吃了很多亏。过去我对日志很不在意，该有的日志没有，不该有的日志却随意输出。新换的工作，上司对日志有严格的要求，也就慢慢开始注意了。</p><p>一般而言，一个接口或者说一段程序，其入口要有日志，记录传入的数据是什么；部分重要的处理逻辑要有日志输出；程序出口也要有日志，记录其最终的处理结果。这样在解决生产上的问题时，可以很快的定位问题的位置，是传入数据的问题还是我们代码逻辑写错了，总比凭空想象的好，要相信计算机，日志是不会骗人的。</p><p>还有一点，在生产上严禁使用System.out输出，性能太低，原因是System.out输出会导致线程等待（同步），而使用Logger输出线程不等待日志的输出（异步），而继续执行。</p><p>接下来看一看springboot的日志配置,说一下把日志记录到文件中的配置方式。</p><h2 id="一、工具-原料"><a href="#一、工具-原料" class="headerlink" title="一、工具/原料"></a>一、工具/原料</h2><ul><li>springboot</li><li>日志</li></ul><h2 id="二、方法-步骤"><a href="#二、方法-步骤" class="headerlink" title="二、方法/步骤"></a>二、方法/步骤</h2><ol><li><p>springboot推荐的日志类库是slf4j、日志系统为logback,确实我回头一看项目中使用的都是slf4j，说明这个东西确实有他的优点。</p><p>上文中也说了一点，slf4j有个接口叫Logger，提供了丰富的日志输出方法，包含了所有日志级别的输出。使用方式也是特别的简单，用slf4j的工厂类获取一个logger ，然后就可以输出日志了，默认情况下，日志只会输出到控制台。</p><p><img src="https://img-blog.csdn.net/20180918173714938?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xjaHExOTk1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p></li><li><p>通过在application.properties文件中配置logging.file、logging.path可以控制日志文件的输出路径和文件名。</p><p>不过有些细节需要注意，否则配置不生效，我测试了几种情况。</p><p><img src="https://img-blog.csdn.net/20180918173738308?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xjaHExOTk1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p></li><li><p>如果，两者都配置了：logging.file=myLog.log、logging.path=D:/data/mylog，注意windos的路径（后面配置文件中也是/），此时并不会在d盘下生成日志文件，只会在项目的根目录下创建一个myLog.log的文件（workspace中，此项目的根目录）。</p><p>其原因是，没有logback-spring.xml配置文件，系统只认识logging.file，不认识logging.path。</p><p><img src="https://img-blog.csdn.net/20180918173757844?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xjaHExOTk1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p></li><li><p>所以要配置logback-spring.xml，spring boot会默认加载此文件，为什么不配置logback.xml,因为logback.xml会先application.properties加载，而logback-spring.xml会后于application.properties加载，这样我们在application.properties文中设置日志文件名称和文件路径才能生效。</p><p><img src="https://img-blog.csdn.net/20180918173824889?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xjaHExOTk1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p></li><li><p>且看logback-spring.xml的配置详情。注意${LOG_PATH}和${LOG_FILE}分别是获取配置文件中的路径和文件名称，必须使用这两个全局的配置去获取。然后重启项目，发现在配置的目录下，有了相应的日志文件。</p></li></ol><p>   <img src="https://img-blog.csdn.net/20180918173909141?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xjaHExOTk1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><ol start="6"><li><p>日志文件的配置结构：</p><p>（1）FILE_LOG_PATTERN：日志输出格式变量，在控制台输出和文件中输出的append中都引用了此变量。（2）consoleLog：定义一个控制台的appender（3）fileLog：定义一个日志文件的appender，这就是文件输出的详细配置，<file>是日志文件的输出地址：必须要为${LOG_PATH}/${LOG_FILE}，这样我们在application.properties中的配置才有效。level标签：如果我们设置了level为info,只会输出info的日志信息，其他日志级别的日志就会过滤掉，建议不配置level属性。</file></p><p>（4）logger：其name就是项目中对应的包路径，appender-ref是appender的引用，在本配置文件中，意思就是com.example.xyx.MySpringBootTest包下文件的日志，按照fileLog的配置去输出，即按照FILE_LOG_PATTERN的格式，输出到D:/data/mylog/myLog.log文件中。</p><p>标签level=”debug”是设置日志级别：作用是debug级别及其以上级别的日志会输出（debug、info、warn、error,,,），注意此处的level是一个下线，比其日志级别高的日志信息也会输出，很重要。</p><p>additivity=”false”是配置此logger是否提交给其他的logger或者root节点，如果true，则root也会执行或者其他的可以拦截到的logger节点,且logger的level优先级高;否则不会执行，在本配置文件中即控制台不会输出com.example.xyx.MySpringBootTest包下文件的日志。</p><p>（5）root：根节点，在logback-spring.xml中只引用了控制台日志输出配置，不会输出到文件，如果想输出到文件，可以写再写一个引用。level=info，在控制台输出into级别及其以上级别的日志。会拦截所有包下的日志，但是其输出会受到logger的影响，即注意logger中的additivity属性，如果为false，com.example.xyx.MySpringBootTest包下的日志不会输出到控制台。</p><p><img src="https://img-blog.csdn.net/20180918173942712?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xjaHExOTk1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p></li></ol><h2 id="三、肉制品同步程序的logback文件"><a href="#三、肉制品同步程序的logback文件" class="headerlink" title="三、肉制品同步程序的logback文件"></a>三、肉制品同步程序的logback文件</h2><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/image-20210820150322211.png" alt="image-20210820150322211"></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">scan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>conversionRule</span> <span class="token attr-name">conversionWord</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>seq<span class="token punctuation">"</span></span>                    <span class="token attr-name">converterClass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.shys.iiot.rzp.sync.utils.LocalSeqNumberConverter<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>application.properties<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--日志文件的名称，根据系统自动追加日期和后缀 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LOG_FILE_NAME<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shys-iiot-rzp-sync<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- 彩色日志依赖的渲染类 &lt;conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"        /&gt; &lt;conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"        /&gt; &lt;conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"        /&gt; --&gt;</span>    <span class="token comment">&lt;!-- %-5p %是格式修饰符， -指左对齐 5指最小字符 --&gt;</span>    <span class="token comment">&lt;!-- &lt;property name="CONSOLE_LOG_PATTERN" value="%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint}        %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(-){faint} %clr([%15.15t]){faint}        %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"        /&gt; --&gt;</span>    <span class="token comment">&lt;!-- 默认Sleuth会在MDC中添加[appname,traceId,spanId,exportable]： spanId - the id        of a specific operation that took place appname - the name of the application        that logged the span traceId - the id of the latency graph that contains        the span exportable - whether the log should be exported to Zipkin or not.        Whenwould you like the span not to be exportable? In the case in which you        want towrap some operation in a Span and have it written to the logs only. --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE_LOG_PATTERN<span class="token punctuation">"</span></span>              <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%d{yyyy-MM-dd HH:mm:ss.SSS} %-2seq %-5p --- serviceId:[${spring.application.name:-}] user[%X{userSessionId},%X{enterpriseID}] traceId:[%X{X-B3-TraceId}] [%15.15t] %-40.40logger{39} : %m%n<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- 控制台输出，开发调试可以在下文root中添加项 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stdout<span class="token punctuation">"</span></span>              <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>${CONSOLE_LOG_PATTERN}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">&gt;</span></span>utf8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--dev环境 输出到LogStash property("apollo.env").equalsIgnoreCase("dev") &lt;if        condition='property("apollo.env").equalsIgnoreCase("dev")'&gt; &lt;then&gt; &lt;/then&gt;        &lt;/if&gt;    &lt;appender name="logstash"        class="net.logstash.logback.appender.LogstashTcpSocketAppender"&gt;        &lt;destination&gt;10.1.5.20:5000&lt;/destination&gt;        &lt;encoder            class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder"&gt;            &lt;providers&gt;                &lt;pattern&gt;                    &lt;pattern&gt;                        {                        "timestamp": "%date{\"yyyy-MM-dd'T'HH:mm:ss,SSSZ\"}",                        "seq":"#asLong{%seq}",                        "serviceId": "${spring.application.name}",                        "traceId": "%X{X-B3-TraceId}",                        "userId": "%X{userSessionId}",                        "enterpriseID": "%X{enterpriseID}",                        "log_level": "%level",                        "thread": "%thread",                        "class_name": "%class",                        "message": "%message",                        "stack_trace": "%exception{5}"                        }                    &lt;/pattern&gt;                &lt;/pattern&gt;            &lt;/providers&gt;        &lt;/encoder&gt;    &lt;/appender&gt;--&gt;</span>    <span class="token comment">&lt;!-- 每天生成一个日志文件 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logfile<span class="token punctuation">"</span></span>              <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>/home/logs/${LOG_FILE_NAME}/${LOG_FILE_NAME}.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span>                <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--日志文件输出的文件路径和文件名，不要修改 --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FileNamePattern</span><span class="token punctuation">&gt;</span></span>/home/logs/${LOG_FILE_NAME}/${LOG_FILE_NAME}.%d{yyyy-MM-dd}.%i.log            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FileNamePattern</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--日志文件保留天数，默认30天 --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">&gt;</span></span>100MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MaxHistory</span><span class="token punctuation">&gt;</span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MaxHistory</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>${CONSOLE_LOG_PATTERN}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">&gt;</span></span>utf8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>errorfile<span class="token punctuation">"</span></span>              <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>/home/logs/${LOG_FILE_NAME}/${LOG_FILE_NAME}_ERROR.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span>                <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--日志文件输出的文件路径和文件名，不要修改 --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FileNamePattern</span><span class="token punctuation">&gt;</span></span>/home/logs/${LOG_FILE_NAME}_ERROR/${LOG_FILE_NAME}.%d{yyyy-MM-dd}.log            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FileNamePattern</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--日志文件保留天数，默认30天 --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MaxHistory</span><span class="token punctuation">&gt;</span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MaxHistory</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>${CONSOLE_LOG_PATTERN}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">&gt;</span></span>utf8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">&gt;</span></span>ERROR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">&gt;</span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">&gt;</span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.netflix.discovery<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WARN<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.netflix.loadbalancer<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WARN<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WARN<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.shys<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DEBUG<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>druid.sql<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DEBUG<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stdout<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logfile<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--&lt;logger name="com.ctrip" level="INFO"&gt;    &lt;/logger&gt;--&gt;</span>    <span class="token comment">&lt;!-- &lt;logger name="org.apache.ibatis" level="ERROR"&gt; &lt;appender-ref ref="stdout"        /&gt; &lt;appender-ref ref="logfile" /&gt; &lt;/logger&gt; 就是这个监控了mybatis日志输出，配合上面的“dao”        &lt;logger name="mybatisDao" level="DEBUG"/&gt; --&gt;</span>    <span class="token comment">&lt;!-- &lt;logger name="java.sql.PreparedStatement" level="DEBUG"&gt; &lt;appender-ref        ref="stdout" /&gt; &lt;appender-ref ref="logfile" /&gt; &lt;/logger&gt; --&gt;</span>    <span class="token comment">&lt;!-- &lt;logger name="org.spring.springboot.dao" level="DEBUG"&gt; &lt;appender-ref        ref="stdout"/&gt; &lt;/logger&gt; --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.redisson<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ERROR<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stdout<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DEBUG<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stdout<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logfile<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>errorfile<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!-- &lt;appender-ref ref="logstash" /&gt; --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>shys<span class="token punctuation">.</span>iiot<span class="token punctuation">.</span>rzp<span class="token punctuation">.</span>sync<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ch<span class="token punctuation">.</span>qos<span class="token punctuation">.</span>logback<span class="token punctuation">.</span>classic<span class="token punctuation">.</span>pattern<span class="token punctuation">.</span></span><span class="token class-name">ClassicConverter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">ch<span class="token punctuation">.</span>qos<span class="token punctuation">.</span>logback<span class="token punctuation">.</span>classic<span class="token punctuation">.</span>spi<span class="token punctuation">.</span></span><span class="token class-name">ILoggingEvent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicInteger</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalSeqNumberConverter</span> <span class="token keyword">extends</span> <span class="token class-name">ClassicConverter</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> lastTimestamp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">AtomicInteger</span> sequenceNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">ILoggingEvent</span> le<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> now <span class="token operator">=</span> le<span class="token punctuation">.</span><span class="token function">getTimeStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastTimestamp <span class="token operator">!=</span> now<span class="token punctuation">)</span> <span class="token punctuation">{</span>            lastTimestamp <span class="token operator">=</span> now<span class="token punctuation">;</span>            sequenceNumber<span class="token punctuation">.</span><span class="token function">getAndSet</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>sequenceNumber<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">spring日志</summary>
    
    
    
    <category term="java" scheme="https://13592491893.github.io/categories/java/"/>
    
    
    <category term="spring" scheme="https://13592491893.github.io/tags/spring/"/>
    
    <category term="日志" scheme="https://13592491893.github.io/tags/%E6%97%A5%E5%BF%97/"/>
    
    <category term="log" scheme="https://13592491893.github.io/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>Gitee快速设置</title>
    <link href="https://13592491893.github.io/posts/49456.html"/>
    <id>https://13592491893.github.io/posts/49456.html</id>
    <published>2021-04-21T16:00:00.000Z</published>
    <updated>2021-12-29T03:19:25.623Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gitee快速设置"><a href="#Gitee快速设置" class="headerlink" title="Gitee快速设置"></a>Gitee快速设置</h1><h2 id="git全局设置"><a href="#git全局设置" class="headerlink" title="git全局设置"></a>git全局设置</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>name <span class="token string">"时鸿运"</span>git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>email <span class="token string">"459173919@qq.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="创建-git-仓库"><a href="#创建-git-仓库" class="headerlink" title="创建 git 仓库"></a>创建 git 仓库</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">mkdir ttcd ttgit inittouch README<span class="token punctuation">.</span>mdgit add README<span class="token punctuation">.</span>mdgit commit <span class="token operator">-</span>m <span class="token string">"first commit"</span>git remote add origin https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>gitee<span class="token punctuation">.</span>com<span class="token operator">/</span>gsshy<span class="token operator">/</span>tt<span class="token punctuation">.</span>gitgit push <span class="token operator">-</span>u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="已有仓库"><a href="#已有仓库" class="headerlink" title="已有仓库?"></a>已有仓库?</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">cd existing_git_repogit remote add origin https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>gitee<span class="token punctuation">.</span>com<span class="token operator">/</span>gsshy<span class="token operator">/</span>tt<span class="token punctuation">.</span>gitgit push <span class="token operator">-</span>u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">Gitee快速设置</summary>
    
    
    
    <category term="git" scheme="https://13592491893.github.io/categories/git/"/>
    
    
    <category term="git" scheme="https://13592491893.github.io/tags/git/"/>
    
    <category term="gitee" scheme="https://13592491893.github.io/tags/gitee/"/>
    
    <category term="config" scheme="https://13592491893.github.io/tags/config/"/>
    
  </entry>
  
  <entry>
    <title>feign使用</title>
    <link href="https://13592491893.github.io/posts/8056.html"/>
    <id>https://13592491893.github.io/posts/8056.html</id>
    <published>2021-03-21T16:00:00.000Z</published>
    <updated>2021-12-29T03:19:25.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="feign使用"><a href="#feign使用" class="headerlink" title="feign使用"></a>feign使用</h1><p>代码：</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/image-20210910165918430.png" alt="image-20210910165918430"></p><p>提供方：<img src="https://gitee.com/gsshy/picgo/raw/master/img/image-20210910170006603.png" alt="image-20210910170006603"></p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/image-20210910170045823.png" alt="image-20210910170045823"></p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/image-20210914181533359.png" alt="image-20210914181533359"></p><p>调用方：</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/image-20210910170322314.png" alt="image-20210910170322314"><img src="https://gitee.com/gsshy/picgo/raw/master/img/image-20210910170342321.png" alt="image-20210910170342321"><img src="https://gitee.com/gsshy/picgo/raw/master/img/image-20210910170402684.png" alt="image-20210910170402684"></p><h2 id="Spring-Cloud-Feign中的-RequestParam-RequestBody-PathVariable：https-faceghost-com-article-217761"><a href="#Spring-Cloud-Feign中的-RequestParam-RequestBody-PathVariable：https-faceghost-com-article-217761" class="headerlink" title="Spring Cloud Feign中的@RequestParam,@RequestBody,@PathVariable：https://faceghost.com/article/217761"></a>Spring Cloud Feign中的@RequestParam,@RequestBody,@PathVariable：<a href="https://faceghost.com/article/217761">https://faceghost.com/article/217761</a></h2>]]></content>
    
    
    <summary type="html">feign使用</summary>
    
    
    
    <category term="java" scheme="https://13592491893.github.io/categories/java/"/>
    
    
    <category term="rpc" scheme="https://13592491893.github.io/tags/rpc/"/>
    
    <category term="远程调用" scheme="https://13592491893.github.io/tags/%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/"/>
    
    <category term="feign" scheme="https://13592491893.github.io/tags/feign/"/>
    
  </entry>
  
  <entry>
    <title>Executor框架</title>
    <link href="https://13592491893.github.io/posts/54338.html"/>
    <id>https://13592491893.github.io/posts/54338.html</id>
    <published>2021-02-21T16:00:00.000Z</published>
    <updated>2021-12-29T03:19:25.623Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Executor框架"><a href="#Executor框架" class="headerlink" title="Executor框架"></a>Executor框架</h1><h2 id="一、Executor、Executors、ExecutorService"><a href="#一、Executor、Executors、ExecutorService" class="headerlink" title="一、Executor、Executors、ExecutorService"></a>一、Executor、Executors、ExecutorService</h2><p>在Java 5之后，并发编程引入了一堆新的启动、调度和管理线程的API。Executor框架便是Java 5中引入的，其内部使用了线程池机制，它在java.util.cocurrent 包下，通过该框架来控制线程的启动、执行和关闭，可以简化并发编程的操作。因此，在Java 5之后，通过Executor来启动线程比使用Thread的start方法更好，除了更易管理，效率更好（用线程池实现，节约开销）外，还有关键的一点：有助于避免this逃逸问题——如果我们在构造器中启动一个线程，因为另一个任务可能会在构造器结束之前开始执行，此时可能会访问到初始化了一半的对象用Executor在构造器中。Eexecutor作为灵活且强大的异步执行框架，其支持多种不同类型的任务执行策略，提供了一种标准的方法将任务的提交过程和执行过程解耦开发，基于生产者-消费者模式，其提交任务的线程相当于生产者，执行任务的线程相当于消费者，并用Runnable来表示任务，Executor的实现还提供了对生命周期的支持，以及统计信息收集，应用程序管理机制和性能监视等机制。</p><h3 id="1、Executor的UML图：（常用的几个接口和子类）"><a href="#1、Executor的UML图：（常用的几个接口和子类）" class="headerlink" title="1、Executor的UML图：（常用的几个接口和子类）"></a>1、Executor的UML图：（常用的几个接口和子类）</h3><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/image-20210323103723142.png" alt="image-20210323103723142"></p><p>Executor框架包括：线程池，Executor，Executors，ExecutorService，CompletionService，Future，Callable等。</p><h3 id="2、Executor和ExecutorService"><a href="#2、Executor和ExecutorService" class="headerlink" title="2、Executor和ExecutorService"></a>2、Executor和ExecutorService</h3><p><strong>Executor：</strong>一个接口，其定义了一个接收Runnable对象的方法executor，其方法签名为executor(Runnable command),该方法接收一个Runable实例，它用来执行一个任务，任务即一个实现了Runnable接口的类，一般来说，Runnable任务开辟在新线程中的使用方法为：new Thread(new RunnableTask())).start()，但在Executor中，可以使用Executor而不用显示地创建线程：executor.execute(new RunnableTask()); // 异步执行</p><p>ExecutorService：是一个比Executor使用更广泛的子类接口，其提供了生命周期管理的方法，返回 Future 对象，以及可跟踪一个或多个异步任务执行状况返回Future的方法；可以调用ExecutorService的shutdown（）方法来平滑地关闭 ExecutorService，调用该方法后，将导致ExecutorService停止接受任何新的任务且等待已经提交的任务执行完成(已经提交的任务会分两类：一类是已经在执行的，另一类是还没有开始执行的)，当所有已经提交的任务执行完毕后将会关闭ExecutorService。因此我们一般用该接口来实现和管理多线程。</p><p>通过 ExecutorService.submit() 方法返回的 Future 对象，可以调用isDone（）方法查询Future是否已经完成。当任务完成时，它具有一个结果，你可以调用get()方法来获取该结果。你也可以不用isDone（）进行检查就直接调用get()获取结果，在这种情况下，get()将阻塞，直至结果准备就绪，还可以取消任务的执行。Future 提供了 cancel() 方法用来取消执行 pending 中的任务。ExecutorService 部分代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ExecutorService</span> <span class="token keyword">extends</span> <span class="token class-name">Executor</span> <span class="token punctuation">{</span><span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> task<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">,</span> <span class="token class-name">T</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">invokeAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> tasks<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、Executors类：-主要用于提供线程池相关的操作"><a href="#3、Executors类：-主要用于提供线程池相关的操作" class="headerlink" title="3、Executors类： 主要用于提供线程池相关的操作"></a>3、Executors类： 主要用于提供线程池相关的操作</h3><p>Executors类，提供了一系列工厂方法用于创建线程池，返回的线程池都实现了ExecutorService接口。</p><ol><li><p>public static ExecutorService newFiexedThreadPool(int Threads) 创建固定数目线程的线程池。</p></li><li><p>public static ExecutorService newCachedThreadPool()：创建一个可缓存的线程池，调用execute 将重用以前构造的线程（如果线程可用）。如果没有可用的线程，则创建一个新线程并添加到池中。终止并从缓存中移除那些已有 60 秒钟未被使用的线程。</p></li><li><p>public static ExecutorService newSingleThreadExecutor()：创建一个单线程化的Executor。</p></li><li><p>public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)：创建一个支持定时及周期性的任务执行的线程池，多数情况下可用来替代Timer类。</p></li></ol><h3 id="4、Executor-VS-ExecutorService-VS-Executors"><a href="#4、Executor-VS-ExecutorService-VS-Executors" class="headerlink" title="4、Executor VS ExecutorService VS Executors"></a>4、Executor VS ExecutorService VS Executors</h3><p>正如上面所说，这三者均是 Executor 框架中的一部分。Java 开发者很有必要学习和理解他们，以便更高效的使用 Java 提供的不同类型的线程池。总结一下这三者间的区别，以便大家更好的理解：</p><p>Executor 和 ExecutorService 这两个接口主要的区别是：ExecutorService 接口继承了 Executor 接口，是 Executor 的子接口<br>Executor 和 ExecutorService 第二个区别是：Executor 接口定义了 execute()方法用来接收一个Runnable接口的对象，而 ExecutorService 接口中的 submit()方法可以接受Runnable和Callable接口的对象。<br>Executor 和 ExecutorService 接口第三个区别是 Executor 中的 execute() 方法不返回任何结果，而 ExecutorService 中的 submit()方法可以通过一个 Future 对象返回运算结果。<br>Executor 和 ExecutorService 接口第四个区别是除了允许客户端提交一个任务，ExecutorService 还提供用来控制线程池的方法。比如：调用 shutDown() 方法终止线程池。可以通过 《Java Concurrency in Practice》 一书了解更多关于关闭线程池和如何处理 pending 的任务的知识。<br>Executors 类提供工厂方法用来创建不同类型的线程池。比如: newSingleThreadExecutor() 创建一个只有一个线程的线程池，newFixedThreadPool(int numOfThreads)来创建固定线程数的线程池，newCachedThreadPool()可以根据需要创建新的线程，但如果已有线程是空闲的会重用已有线程。<br>下面给出一个Executor执行Callable任务的示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span>   <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span>   <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CallableDemo</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> resultList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//创建10个任务并执行   </span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token comment">//使用ExecutorService执行Callable类型的任务，并将结果保存在future变量中   </span>            <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TaskWithResult</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//将任务执行结果存储到List中   </span>            resultList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token comment">//遍历任务的结果   </span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fs <span class="token operator">:</span> resultList<span class="token punctuation">)</span><span class="token punctuation">{</span>                   <span class="token keyword">try</span><span class="token punctuation">{</span>                       <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>fs<span class="token punctuation">.</span>isDone<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Future返回如果没有完成，则一直循环等待，直到Future返回完成  </span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//打印各个线程（任务）执行的结果   </span>                <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                       e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                       e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>                       <span class="token comment">//启动一次顺序关闭，执行以前提交的任务，但不接受新任务  </span>                    executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span>     <span class="token keyword">class</span> <span class="token class-name">TaskWithResult</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>       <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>         <span class="token keyword">public</span> <span class="token class-name">TaskWithResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>       <span class="token punctuation">}</span>         <span class="token comment">/**       * 任务的具体过程，一旦任务传给ExecutorService的submit方法，      * 则该方法自动在一个线程上执行      */</span>       <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"call()方法被自动调用！！！    "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//该返回结果将被Future的get方法得到  </span>        <span class="token keyword">return</span> <span class="token string">"call()方法被自动调用，任务返回的结果是："</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"    "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、自定义线程池"><a href="#5、自定义线程池" class="headerlink" title="5、自定义线程池"></a>5、自定义线程池</h3><p>自定义线程池，可以用ThreadPool Executor类创建，它有多个构造方法来创建线程池，用该类很容易实现自定义的线程池，这里先贴上示例程序：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ArrayBlockingQueue</span><span class="token punctuation">;</span>   <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">BlockingQueue</span><span class="token punctuation">;</span>   <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">;</span>   <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolTest</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token comment">//创建等待队列   </span>        <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> bqueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//创建线程池，池中保存的线程数为3，允许的最大线程数为5  </span>        <span class="token class-name">ThreadPoolExecutor</span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>bqueue<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//创建七个任务   </span>        <span class="token class-name">Runnable</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">Runnable</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">Runnable</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">Runnable</span> t4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">Runnable</span> t5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">Runnable</span> t6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">Runnable</span> t7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//每个任务会在一个线程上执行  </span>        pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>           pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>           pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token punctuation">;</span>           pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>t4<span class="token punctuation">)</span><span class="token punctuation">;</span>           pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>t5<span class="token punctuation">)</span><span class="token punctuation">;</span>           pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>t6<span class="token punctuation">)</span><span class="token punctuation">;</span>           pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>t7<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//关闭线程池   </span>        pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span>     <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"正在执行。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">try</span><span class="token punctuation">{</span>               <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/image-20210323105726043.png" alt="image-20210323105726043"></p><h3 id="6、比较Executor和new-Thread"><a href="#6、比较Executor和new-Thread" class="headerlink" title="6、比较Executor和new Thread()"></a>6、比较Executor和new Thread()</h3><p>new Thread的弊端如下：</p><ul><li>每次new Thread新建对象性能差。</li><li>线程缺乏统一管理，可能无限制新建线程，相互之间竞争，及可能占用过多系统资源导致死机或oom。</li><li>缺乏更多功能，如定时执行、定期执行、线程中断。</li></ul><p>相比new Thread，Java提供的四种线程池的好处在于：</p><ul><li> 重用存在的线程，减少对象创建、消亡的开销，性能佳。</li><li>可有效控制最大并发线程数，提高系统资源的使用率，同时避免过多资源竞争，避免堵塞。</li><li>提供定时执行、定期执行、单线程、并发数控制等功能。</li></ul><h2 id="二、ExecutorService和ThreadPoolExecutor"><a href="#二、ExecutorService和ThreadPoolExecutor" class="headerlink" title="二、ExecutorService和ThreadPoolExecutor"></a>二、ExecutorService和ThreadPoolExecutor</h2><h3 id="1、创建线程池有两种方式"><a href="#1、创建线程池有两种方式" class="headerlink" title="1、创建线程池有两种方式"></a>1、创建线程池有两种方式</h3><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/image-20210323110453172.png" alt="image-20210323110453172"></p><ol><li><p>通过ThreadPoolExecutor构造函数(推荐)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ArrayBlockingQueue</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolExecutorDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CORE_POOL_SIZE <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_POOL_SIZE <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> QUEUE_CAPACITY <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Long</span> KEEP_ALIVE_TIME <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//使用阿里巴巴推荐的创建线程池的方式</span>        <span class="token comment">//通过ThreadPoolExecutor构造函数自定义参数创建</span>        <span class="token class-name">ThreadPoolExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>                CORE_POOL_SIZE<span class="token punctuation">,</span>                MAX_POOL_SIZE<span class="token punctuation">,</span>                KEEP_ALIVE_TIME<span class="token punctuation">,</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>QUEUE_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">.</span><span class="token class-name">CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//创建WorkerThread对象（WorkerThread类实现了Runnable 接口）</span>            <span class="token class-name">Runnable</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//执行Runnable</span>            executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//终止线程池</span>        executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>executor<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Finished all threads"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>corePoolSize: 核心线程数为 5。<br>maximumPoolSize ：最大线程数 10<br>keepAliveTime : 等待时间为 1L。<br>unit: 等待时间的单位为 TimeUnit.SECONDS。<br>workQueue：任务队列为 ArrayBlockingQueue，并且容量为 100;<br>handler:饱和策略为 CallerRunsPolicy。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">outputpool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">3</span> <span class="token class-name">Start</span><span class="token punctuation">.</span> <span class="token class-name">Time</span> <span class="token operator">=</span> <span class="token class-name">Sun</span> <span class="token class-name">Apr</span> <span class="token number">12</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">37</span> CST <span class="token number">2020</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">5</span> <span class="token class-name">Start</span><span class="token punctuation">.</span> <span class="token class-name">Time</span> <span class="token operator">=</span> <span class="token class-name">Sun</span> <span class="token class-name">Apr</span> <span class="token number">12</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">37</span> CST <span class="token number">2020</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span> <span class="token class-name">Start</span><span class="token punctuation">.</span> <span class="token class-name">Time</span> <span class="token operator">=</span> <span class="token class-name">Sun</span> <span class="token class-name">Apr</span> <span class="token number">12</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">37</span> CST <span class="token number">2020</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span> <span class="token class-name">Start</span><span class="token punctuation">.</span> <span class="token class-name">Time</span> <span class="token operator">=</span> <span class="token class-name">Sun</span> <span class="token class-name">Apr</span> <span class="token number">12</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">37</span> CST <span class="token number">2020</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">4</span> <span class="token class-name">Start</span><span class="token punctuation">.</span> <span class="token class-name">Time</span> <span class="token operator">=</span> <span class="token class-name">Sun</span> <span class="token class-name">Apr</span> <span class="token number">12</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">37</span> CST <span class="token number">2020</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">3</span> <span class="token class-name">End</span><span class="token punctuation">.</span> <span class="token class-name">Time</span> <span class="token operator">=</span> <span class="token class-name">Sun</span> <span class="token class-name">Apr</span> <span class="token number">12</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">42</span> CST <span class="token number">2020</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">4</span> <span class="token class-name">End</span><span class="token punctuation">.</span> <span class="token class-name">Time</span> <span class="token operator">=</span> <span class="token class-name">Sun</span> <span class="token class-name">Apr</span> <span class="token number">12</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">42</span> CST <span class="token number">2020</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span> <span class="token class-name">End</span><span class="token punctuation">.</span> <span class="token class-name">Time</span> <span class="token operator">=</span> <span class="token class-name">Sun</span> <span class="token class-name">Apr</span> <span class="token number">12</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">42</span> CST <span class="token number">2020</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">5</span> <span class="token class-name">End</span><span class="token punctuation">.</span> <span class="token class-name">Time</span> <span class="token operator">=</span> <span class="token class-name">Sun</span> <span class="token class-name">Apr</span> <span class="token number">12</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">42</span> CST <span class="token number">2020</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span> <span class="token class-name">Start</span><span class="token punctuation">.</span> <span class="token class-name">Time</span> <span class="token operator">=</span> <span class="token class-name">Sun</span> <span class="token class-name">Apr</span> <span class="token number">12</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">42</span> CST <span class="token number">2020</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span> <span class="token class-name">End</span><span class="token punctuation">.</span> <span class="token class-name">Time</span> <span class="token operator">=</span> <span class="token class-name">Sun</span> <span class="token class-name">Apr</span> <span class="token number">12</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">42</span> CST <span class="token number">2020</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">5</span> <span class="token class-name">Start</span><span class="token punctuation">.</span> <span class="token class-name">Time</span> <span class="token operator">=</span> <span class="token class-name">Sun</span> <span class="token class-name">Apr</span> <span class="token number">12</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">42</span> CST <span class="token number">2020</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">4</span> <span class="token class-name">Start</span><span class="token punctuation">.</span> <span class="token class-name">Time</span> <span class="token operator">=</span> <span class="token class-name">Sun</span> <span class="token class-name">Apr</span> <span class="token number">12</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">42</span> CST <span class="token number">2020</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">3</span> <span class="token class-name">Start</span><span class="token punctuation">.</span> <span class="token class-name">Time</span> <span class="token operator">=</span> <span class="token class-name">Sun</span> <span class="token class-name">Apr</span> <span class="token number">12</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">42</span> CST <span class="token number">2020</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span> <span class="token class-name">Start</span><span class="token punctuation">.</span> <span class="token class-name">Time</span> <span class="token operator">=</span> <span class="token class-name">Sun</span> <span class="token class-name">Apr</span> <span class="token number">12</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">42</span> CST <span class="token number">2020</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span> <span class="token class-name">End</span><span class="token punctuation">.</span> <span class="token class-name">Time</span> <span class="token operator">=</span> <span class="token class-name">Sun</span> <span class="token class-name">Apr</span> <span class="token number">12</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">47</span> CST <span class="token number">2020</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">4</span> <span class="token class-name">End</span><span class="token punctuation">.</span> <span class="token class-name">Time</span> <span class="token operator">=</span> <span class="token class-name">Sun</span> <span class="token class-name">Apr</span> <span class="token number">12</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">47</span> CST <span class="token number">2020</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">5</span> <span class="token class-name">End</span><span class="token punctuation">.</span> <span class="token class-name">Time</span> <span class="token operator">=</span> <span class="token class-name">Sun</span> <span class="token class-name">Apr</span> <span class="token number">12</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">47</span> CST <span class="token number">2020</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">3</span> <span class="token class-name">End</span><span class="token punctuation">.</span> <span class="token class-name">Time</span> <span class="token operator">=</span> <span class="token class-name">Sun</span> <span class="token class-name">Apr</span> <span class="token number">12</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">47</span> CST <span class="token number">2020</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span> <span class="token class-name">End</span><span class="token punctuation">.</span> <span class="token class-name">Time</span> <span class="token operator">=</span> <span class="token class-name">Sun</span> <span class="token class-name">Apr</span> <span class="token number">12</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">47</span> CST <span class="token number">2020</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过Executor框架的Executors创建</p><p>Executors返回的是ExecutorService</p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/image-20210323111609960.png" alt="image-20210323111609960"></p></li></ol><h3 id="2、ExecutorService"><a href="#2、ExecutorService" class="headerlink" title="2、ExecutorService"></a>2、ExecutorService</h3><p>Java.util.concurrent.ExecutorService接口代表一种异步执行机制，它能够在后台执行任务。因此ExecutorService与thread pool是非常相似的。事实上，在java.util.package包中ExecutorService的具体实现就是一个线程池的具体实现。下面是一个简单的例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Asynchronous task"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，通过newFixedThreadPool()工厂方法创建一个ExecutorService的实例。这个方法创建了一个可以有10个线程执行任务的线程池。</p><p>第二，Runnable接口的匿名实现类作为参数被传递给execute()方法。Runable将会被ExecutorService中的一个线程来执行。</p><p>下面是委托任务给ExecutorService的一些不同的方式：</p><ul><li>execute(Runnable)</li><li>submit(Runnable)</li><li>submit(Callable)</li><li>invokeAny(…)</li><li>invokeAll(…)</li></ul><p>下面来逐个看看这些方法。</p><ul><li>execute(Runnable)</li></ul><p>execute(Runnable) 方法接受一个java.lang.Runable对象的实例，并异步执行之。下面是一个使用ExecutorService执行Runnable的例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Asynchronous task"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式不能获得Runnable执行的结果，如果有这种需要，你将要使用Callable。</p><ul><li>submit(Runnable)</li></ul><p>submit(Runnable) 方法也接收一个Runnable接口的具体实现，并返回一个Future对象。Future对象可以用来检测Runable是否执行完成。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Future</span> future <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Asynchronous task"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//returns null if the task has finished correctly.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>submit(Callable)</li></ul><p>submit(Callable)方法与submit(Runnable)方法相似，除了接收的参数有所不同。Callable实例非常类似于Runnable,不同的是call方法可以返回一个结果，Runnable.run()方法不能返回一个结果(因为是void类型)，就算线程执行完了，成功了future.get()也只是得到null</p><p>可以通过submit(Callable)方法返回的Future对象获取Callable的结果。下面是一个使用Callable的例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Future</span> future <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Asynchronous Callable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Callable Result"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"future.get() = "</span> <span class="token operator">+</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码的输出结果是：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Asynchronous</span> <span class="token class-name">Callable</span>future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token class-name">Callable</span> <span class="token class-name">Result</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>invokeAny(…)</li></ul><p>invokeAny()方法接收一个Callable对象或者Callable的子接口实例的集合作为参数，这个方法不会返回Future,但会返回集合中某一个Callable的结果。你不能确定你得到是哪个Callable的结果。只是已执行完成的Callable中的一个。</p><p>如果一个任务已经完成（或者抛出了异常），剩余的Callable任务将被取消。<br>下面是示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> callables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> callables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Task 1"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>callables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Task 2"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>callables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Task 3"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">String</span> result <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">invokeAny</span><span class="token punctuation">(</span>callables<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result = "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>示例代码将会打印给定的Callable集合中一个Callable任务返回的结果。我尝试执行了多次，结果是变化的。有时候是“Task1”,有时候是“Task 2”等。</p></li><li></li><li><p>invokeAll(…)</p></li></ul><p>invokeAll()接收一个Callable对象的集合作为参数，该方法会调用你传给他的集合中的所有Callable对象。Invoke()会返回一个Future对象的列表，通过这个列表你可以获取每一个Callable执行的结果。</p><p>一个任务可能会因为一个异常而结束，因此这时任务并不是真正意义上执行成功了。这在Future上是没有办法来判断的。</p><p>处理一个任务的容器（collection），并返回一个Future的容器。两个容器具有相同的结构，这里提交的任务容器列表和返回的Future列表存在顺序对应的关系。</p><p>下面是示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> callables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> callables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Task 1"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>callables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Task 2"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>callables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Task 3"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> futures <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">invokeAll</span><span class="token punctuation">(</span>callables<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">:</span> futures<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"future.get = "</span> <span class="token operator">+</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ExecutorService Shutdown</strong></p><p>当你是使用完ExecutorService后，你应该关闭它，使得线程不能持续运行。例如，你的应用程序从main()方法开始并且你的主线程退出应用程序，这时如果存在激活状态的ExecutorService，你的应用程序将仍然会保持运行。ExecutorService中激活的线程会阻止JVM关闭。</p><p>为了终止ExecutorService中的线程，你需要调用shutdown()方法。ExecutorService不会立即关闭，但是它也不会接受新的任务，直到它里面的所有线程都执行完毕，ExecutorService才会关闭。所有提交到ExecutorService中的任务会在调用shutdown()方法之前被执行。</p><p>如果你想立即关闭ExecutorService,你可以调用shutdownNow()方法。这将会尝试立即停止所有正在执行的任务，并且忽略所有提交的但未被处理的任务。对于正在执行的任务是不能确定的，也许它们停止了，也行它们执行直到结束。</p><h3 id="3、ThreadPoolExecutor"><a href="#3、ThreadPoolExecutor" class="headerlink" title="3、ThreadPoolExecutor"></a>3、ThreadPoolExecutor</h3><p>Java.util.concurrent.ThreadPoolExecutor类是ExecutorSerivce接口的具体实现。ThreadPoolExecutor使用线程池中的一个线程来执行给定的任务（Runnable或者Runnable）。</p><p>ThreadPoolExecutor内部的线程池包含不定数量的线程。池中线程的数量由下面的这些变量决定：</p><ul><li>corePoolSize</li><li>maximumPoolSize</li></ul><p>当一个任务委托给线程池执行，此时如果池线程中线程数少于corePoolSize，即使池中有空闲的线程，线程池中也会创建一个新的线程。</p><p>如果任务队列是满的，corePoolSize个线程或者更多的且少于maximumPoolSize的线程正在运行，也会创建一个新的线程来执行任务。</p><p>下面图释ThreadPoolExecutor这种原理： </p><p><img src="https://gitee.com/gsshy/picgo/raw/master/img/20160712174701471" alt="这里写图片描述"></p><h4 id="创建ThreadPoolExecutor"><a href="#创建ThreadPoolExecutor" class="headerlink" title="创建ThreadPoolExecutor"></a>创建ThreadPoolExecutor</h4><p>ThreadPoolExecutor有多种构造函数。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span>  corePoolSize  <span class="token operator">=</span>    <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span>  maxPoolSize   <span class="token operator">=</span>   <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">long</span> keepAliveTime <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span> <span class="token class-name">ExecutorService</span> threadPoolExecutor <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>                corePoolSize<span class="token punctuation">,</span>                maxPoolSize<span class="token punctuation">,</span>                keepAliveTime<span class="token punctuation">,</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、CompletionService"><a href="#三、CompletionService" class="headerlink" title="三、CompletionService"></a>三、CompletionService</h2><p><code>java.util.concurrent.CompletionService</code> 是对 <code>ExecutorService</code> 的一个功能增强封装，优化了获取异步操作结果的接口。</p><h3 id="1、使用场景"><a href="#1、使用场景" class="headerlink" title="1、使用场景"></a>1、使用场景</h3><p>假设我们要向线程池提交一批任务，并获取任务结果。一般的方式是提交任务后，从线程池得到一批 <code>Future</code> 对象集合，然后依次调用其 <code>get()</code> 方法。</p><p>这里有个问题：因为我们会要按固定的顺序来遍历 <code>Future</code> 元素，而 <code>get()</code> 方法又是阻塞的，因此如果某个 <code>Future</code> 对象执行时间太长，会使得我们的遍历过程阻塞在该元素上，无法及时从后面早已完成的 <code>Future</code> 当中取得结果。</p><p><code>CompletionService</code> 解决了这个问题。它本身不包含线程池，创建一个 <code>CompletionService</code> 需要先创建一个 <code>Executor</code>。下面是一个例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CompletionService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> completionService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExecutorCompletionService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>向 <code>CompletionService</code> 提交任务的方式与 <code>ExecutorService</code> 一样：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">completionService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当你需要获得结果的时候，就不同了。有了 <code>CompletionService</code>，你不需要再持有 <code>Future</code> 集合。如果要得到最早的执行结果，只需要像下面这样：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> result <span class="token operator">=</span> completionService<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个 <code>take()</code> 方法返回的是最早完成的任务的结果，这个就解决了一个任务被另一个任务阻塞的问题。下面是一个完整的例子：</p><h3 id="2、示例（更好的可以看代码里的测试内容）"><a href="#2、示例（更好的可以看代码里的测试内容）" class="headerlink" title="2、示例（更好的可以看代码里的测试内容）"></a>2、示例（更好的可以看代码里的测试内容）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">ExecutorService</span> executor<span class="token punctuation">;</span>    <span class="token class-name">CompletionService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> completionService<span class="token punctuation">;</span>    <span class="token comment">// 创建一个指定执行时长的任务的方法</span>    <span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Callable</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> createTask <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> duration<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Task "</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">" started, duration="</span> <span class="token operator">+</span> duration<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Task "</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">" completed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Result of task "</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">///////////////////////////////////////////////////////////////////</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"// 示例1：像使用 ExecutorService 一样使用 CompletionService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 初始化 executor 和 completionService</span>    executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    completionService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExecutorCompletionService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 提交任务</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> results <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>            completionService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>createTask<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            completionService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>createTask<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            completionService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>createTask<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            completionService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>createTask<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 取结果</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">:</span> results<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">///////////////////////////////////////////////////////////////////</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"// 示例2：按标准方式使用 CompletionService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 初始化 executor 和 completionService</span>    executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    completionService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExecutorCompletionService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 提交任务</span>    completionService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>createTask<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    completionService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>createTask<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    completionService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>createTask<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    completionService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>createTask<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 取结果</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">log</span><span class="token punctuation">(</span>completionService<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">///////////////////////////////////////////////////////////////////</span>    executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个例子的执行结果如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 示例1：像使用 ExecutorService 一样使用 CompletionService</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">271</span> <span class="token operator">-</span> <span class="token class-name">Task</span> <span class="token number">4</span> started<span class="token punctuation">,</span> duration<span class="token operator">=</span><span class="token number">400</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">271</span> <span class="token operator">-</span> <span class="token class-name">Task</span> <span class="token number">3</span> started<span class="token punctuation">,</span> duration<span class="token operator">=</span><span class="token number">600</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">271</span> <span class="token operator">-</span> <span class="token class-name">Task</span> <span class="token number">2</span> started<span class="token punctuation">,</span> duration<span class="token operator">=</span><span class="token number">800</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">271</span> <span class="token operator">-</span> <span class="token class-name">Task</span> <span class="token number">1</span> started<span class="token punctuation">,</span> duration<span class="token operator">=</span><span class="token number">1000</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">687</span> <span class="token operator">-</span> <span class="token class-name">Task</span> <span class="token number">4</span> completed<span class="token punctuation">.</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">888</span> <span class="token operator">-</span> <span class="token class-name">Task</span> <span class="token number">3</span> completed<span class="token punctuation">.</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">089</span> <span class="token operator">-</span> <span class="token class-name">Task</span> <span class="token number">2</span> completed<span class="token punctuation">.</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">303</span> <span class="token operator">-</span> <span class="token class-name">Task</span> <span class="token number">1</span> completed<span class="token punctuation">.</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">303</span> <span class="token operator">-</span> <span class="token class-name">Result</span> of task <span class="token number">1</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">303</span> <span class="token operator">-</span> <span class="token class-name">Result</span> of task <span class="token number">2</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">303</span> <span class="token operator">-</span> <span class="token class-name">Result</span> of task <span class="token number">3</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">303</span> <span class="token operator">-</span> <span class="token class-name">Result</span> of task <span class="token number">4</span><span class="token comment">// 示例2：按标准方式使用 CompletionService</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">305</span> <span class="token operator">-</span> <span class="token class-name">Task</span> <span class="token number">5</span> started<span class="token punctuation">,</span> duration<span class="token operator">=</span><span class="token number">1000</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">305</span> <span class="token operator">-</span> <span class="token class-name">Task</span> <span class="token number">7</span> started<span class="token punctuation">,</span> duration<span class="token operator">=</span><span class="token number">600</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">305</span> <span class="token operator">-</span> <span class="token class-name">Task</span> <span class="token number">6</span> started<span class="token punctuation">,</span> duration<span class="token operator">=</span><span class="token number">800</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">305</span> <span class="token operator">-</span> <span class="token class-name">Task</span> <span class="token number">8</span> started<span class="token punctuation">,</span> duration<span class="token operator">=</span><span class="token number">400</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">718</span> <span class="token operator">-</span> <span class="token class-name">Task</span> <span class="token number">8</span> completed<span class="token punctuation">.</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">718</span> <span class="token operator">-</span> <span class="token class-name">Result</span> of task <span class="token number">8</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">918</span> <span class="token operator">-</span> <span class="token class-name">Task</span> <span class="token number">7</span> completed<span class="token punctuation">.</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">918</span> <span class="token operator">-</span> <span class="token class-name">Result</span> of task <span class="token number">7</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">119</span> <span class="token operator">-</span> <span class="token class-name">Task</span> <span class="token number">6</span> completed<span class="token punctuation">.</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">119</span> <span class="token operator">-</span> <span class="token class-name">Result</span> of task <span class="token number">6</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">320</span> <span class="token operator">-</span> <span class="token class-name">Task</span> <span class="token number">5</span> completed<span class="token punctuation">.</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">320</span> <span class="token operator">-</span> <span class="token class-name">Result</span> of task <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，在示例 1 中，虽然 Task 4 执行时间只有 400ms，但因为我们是按照 1-2-3-4 的顺序依次取结果，因此 Task 4 完成后并没有马上打印出结果来。而在示例 2 中，对每个 Task 都是在完成时立刻就将结果打印出来了。这就是 <code>CompletionService</code> 的优势所在。</p><h3 id="3、原理解释"><a href="#3、原理解释" class="headerlink" title="3、原理解释"></a>3、原理解释</h3><p><code>CompletionService</code> 之所以能够做到这点，是因为它没有采取依次遍历 Future 的方式，而是在中间加上了一个结果队列，任务完成后马上将结果放入队列，那么从队列中取到的就是最早完成的结果。</p><p>如果队列为空，那么 <code>take()</code> 方法会阻塞直到队列中出现结果为止。此外 <code>CompletionService</code> 还提供一个 <code>poll()</code> 方法，返回值与 <code>take()</code> 方法一样，不同之处在于它不会阻塞，如果队列为空则立刻返回 null。这算是给用户多一种选择。</p>]]></content>
    
    
    <summary type="html">Executor框架</summary>
    
    
    
    <category term="java" scheme="https://13592491893.github.io/categories/java/"/>
    
    
    <category term="Executor" scheme="https://13592491893.github.io/tags/Executor/"/>
    
    <category term="多线程" scheme="https://13592491893.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="线程" scheme="https://13592491893.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
</feed>
